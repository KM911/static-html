<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>碎碎念</title>
    <url>/static-html/2023/04/09/Life/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>碎碎念是什么</h1>
<p>很多时候人会有一点的想法,只有一点点,就是三两句的有感而发,记录一下作为一个乐子一样存在吧就是说.</p>
<h2 id="我不知道">我不知道</h2>
<p>其实这些东西不重要 最关键的是 我挺开心的哈哈哈</p>
<h2 id="自我满足的需要">自我满足的需要</h2>
<p>其实说实话 我个人觉得只有计算机 或者说网络 才是真正意义上的去中心化 这个名词 对于现在的我 很看重 就是这样</p>
<h1>身体是很宝贵的</h1>
<p>这一点 随着年龄的增长 只会得到更多的认可 (有一说一 你现在连20都没有 懂什么)</p>
<p>其实我的头发是很多的 不少人看见了 都会觉得羡慕 不过随着我坐在位置上写代码的日子越来越长 我的头发也开始抗议了</p>
<h2 id="可以休息-但没必要">可以休息 但没必要</h2>
<p>这里回答我的题目 为什么是没有必要的</p>
<p>设想一下 现在你正在写一个项目 假如说项目马上就写完了 你这个时候 对自己说 休息一下 吧</p>
<p>其实如果是真的休息了 一下 立马回来工作 绝对是没有任何问题 可问题是– 我觉得生活中的我 不是一个对自己可以严格管控的人</p>
<p>我大概率是拿起了手机 开始看视频 还很可能是和技术 不太相关的 东西 (额 不要说得那么委婉 好吧 我承认我确实是很喜欢玩)</p>
<p>很可能你的项目 并没有多少代码 不过你需要花 <strong>一点点</strong> 时间 想起来 自己当时到底是怎么想得 如果出了一些 偏差 估计又是需要花费很多的时间在调试上面</p>
<p>别 还是抓紧时间写代码吧</p>
<p>写了两个月了 一点最简单的东西 都没有写完 实在是不太可以啊</p>
<h1>今天是1月24号</h1>
<p>今天是我来到外婆家的第二天, 不出意外的话,我们应该是今天就会回家了,因为老姐下午就要回去了.</p>
<p>我在来的时候要求带电脑过来,结果因为需要“走人家”,在亲戚的家里面是吃得没有停下.刚刚才在外婆家吃过,就又到“下边外婆”家去吃饭了.可以说吃饭占据了我们大部分时间,不过过年嘛,也可以理解.</p>
<p>晚上我还在和那些小朋友一起玩,其实小朋友真的挺简单的,特别是最为年幼的,其实在小孩子的群体中并没有什么话语权,他们只是模仿着其他小孩子的行为,就可以很开心和快乐.</p>
<p>其实感觉自己好像也没有做什么,但是时间就就是很快的就过去了.其实还有一个原因就是我没有经常看时间.我估计我也花了不少的时间在手机上, 毕竟看我的手机都没有点了,你说是不是 哈哈哈哈哈.</p>
<p>好了其实我也没有什么怨言,只是想吐槽一下自己,会计划着自己要做什么事情,将破碎的事情利用起来,结果大概率是一团糟,什么都没有做好,不过还是有一些事情是在自己的控制范围内的不是吗?</p>
<p>所以说现在的我们,加油吧.</p>
<h2 id="有些难过">有些难过</h2>
<p>每个人难过的原因 或许都不相同 所以 难以理解对方也是很常见的事情</p>
<p>我的难过只是因为平常无法被人 理解罢了 其实也不是什么大的事情 不过是一些生活中的琐事 可能是现如今的我越来越缺少耐心了吧 看来想要养猫的想法确实该打消了 我不觉得我有足够的耐心 可以好好的照顾她 所以说</p>
<p>其实我给很多人都打过交道 但是我还是喜欢那些聪明的人 如果他们还可以再包容一些 就太好了 所以我很长的一段时间里(其实直到现在 我也都是这样) 都像成为他们那样的人</p>
<p>不过事实却是 我离心里的那个自己越来越远了 很多事情都是得过且过 其实也不对 我总是在两个极端间反复横跳 喜怒无常 让人觉得有些怪异 或许我是离我心中的那个自己跟进了 也说不定—— 我一直在等一个人来救救我 (da si ki dei) 当时还是不要了吧</p>
<p>看到了南农大学的同辈 面对污蔑 保持理智 写出如此文采斐然的文章 想到自己连话都讲不清 只会独自生气 实在是无地自容</p>
<p>如果可以的话 我想喜欢上 一个人 真正意义上的喜欢 不是我对于spring的那种喜欢 或许她会给我带来很多快乐 但是只是幻想实在是有些可笑 所以该开始尝试 构建一些长期的关系了? 我不明白 就是说 或许我还是那个我 根本就没有办法被拯救 只会搞得大家不欢而散 (在这件事情上 我似乎很有把握)</p>
<p>所以 救救我 可以吗?  👧</p>
<h2 id="夜晚不适合给你EMO">夜晚不适合给你EMO</h2>
<p>夜晚到了 我觉得我应该开始就是回顾自己的东西 而不是去东看看西看看</p>
<p>我现在视乎学会了很多杂乱的东西 但是并不系统 我需要写出足够优秀的内容</p>
<p>我们现在开始吧 加油加油 我只能这样做了呢</p>
<h1>睡觉的艺术</h1>
<p>经常会看见 很多说自己很努力 每天工作学习到2-3点 我就好奇 你睡这么晚 第二天可以早起吗? 除非你是外星人 不然一个人一天肯定还是要睡6-9个小时的 不然肯定gg</p>
<p>也就是说 你的工作时长 也不会因为你工作得很晚变长 最关键的是 以为自身的经历来看 我们如果前一天很晚睡 第二天很可能是睡了一样长的时间 结果身体状况也比不上早睡的结果</p>
<p>早睡好 主要是符合日出日落的生物规律</p>
<h2 id="所以">所以</h2>
<p>我们现在开始 每天早睡早起 不能写代码和看手机到很晚了 其实主要是看手机 白天的高强度劳动 结果我们没有怎么看手机 就到了晚上 我们很想玩一玩 这样很不好</p>
<p>早睡最大的好处应该是我们有时间学习英语了吧 我们可以到外面去读英语 其实可以读了 你也可以写阅读了</p>
<p>加油吧 手机闹钟定死了啊</p>
<h1>生产者</h1>
<p>这里我用工人是因为他们花费了 大量的时间在劳动上 我觉得我也应该像他们一样 就是说</p>
<p>这个不单单是为了自我满足 还是因为生成者 是一个真正独立的个体 他们不依赖于任何人 只要他们的身体和精神还是健全的 他们就可以在某个地方继续发光发热</p>
<p>这样的人 才有可能真正意义上的自由,所以我先慢慢积累吧 还哈哈.</p>
<p>有些胡言乱语 不要当真</p>
<h2 id="自我表达">自我表达</h2>
<p>其实不需要你告诉我 我自己也知道 个人博客 其实是流量很小的平台 不会有什么人来看 不过这样也挺好的 就是说 这里是属于我自己的 不会被他人恶意举报 不会被他人的私信骚扰 是完全属于我自己的 如果哪天我不开心了 我就 rm -r -f 全删掉 也没有任何人可以阻止我 这种安全感 总是让我觉得 只是一件很幸福的事情 如果有机会碰见一些有意思的人 我觉得就再好不过了<br />
有时间的话 我会再详细写写 写博客的原因</p>
<h1>从自行车到spring</h1>
<h2 id="自行车">自行车</h2>
<p>首先,自行车并不是什么高科技,大部分都是很简单的传动结构,你可以很直观地看出其工作原理.比如我们的U刹,在刹车线被拉伸后,产生的压力和自行车的轮组一起摩擦,实现制动的效果.</p>
<p>确实也是很简单的原理不是吗?</p>
<p>但是,一开始我就直接自己去捣鼓,花费了很久的时间.其实就是在抓瞎,不是刹车线太送了没有任何的压力,就是</p>
<h2 id="spring">spring</h2>
<p>我已经学会了如何用nodejs和go语言来编写简单的web服务器,但是来到了java,需要使用spring和maven或者gradle,就是直接傻眼了.</p>
<p>其实从注解开始的那一刻,我的体验就已经不是很好了哈哈哈哈.</p>
<p>不是很能理解,但是还是在自己捣鼓,结果就是花费了大量的时间,结果什么也得不到.</p>
<p>从明天开始,我们先把网站项目给写完吧,不然对于我后面的内容影响有些大了不是吗?</p>
<h2 id="总结">总结</h2>
<p>我们都是从简单开始模仿学习的,不要想着自己可以捣鼓出什么名堂,就连清华和哈佛的人,都需要从最基础的java开始学起,你还有什么理由不去自己学习呢?</p>
<h1>低效</h1>
<p>我们 准确讲是我 常常会觉得自己好低效 花费了很多的时间 却没有做什么有意义的事情</p>
<p>说真的 其实很多事情都是很低效的 但是这是很正常的 或者说 任何伟大的事业都不是一个人就可以轻易完成 的 像小说里面或者影视剧 中 主角突然就想到了什么天才想法 然后一 个晚上就完成了 这其实是不可能```不过其实也是一件好事 不是吗？就算是我们这种 普通人 主要一直简简单单的做事情 我们有很长的时间给我们想点子 至少 目前来看 我有很多很有意思的点子 哈哈哈哈 其实还是不错的啊</p>
<p>再说了 其实低效才是人生的常态 不是吗? 我们常常会因为一个小的问题 浪费了很多时间和精力 甚至是 (美国的探索者号火箭 只是因为橡胶圈的抗冻性不好 导致了悲剧) 这些都不会成为阻挡你的事物 你只需要走就好了</p>
<h2 id="尽可能地提高效率">尽可能地提高效率</h2>
<p>尽管我认为人生的大部分时间都是没有什么意义的,但是我们还是可以通过一些方法,提高自己的效率.下面就是一些我自己认可的方法.</p>
<h2 id="专注一件事情">专注一件事情</h2>
<p>我现在每次通过将目前需要做的事情写到todo中,每次只做一件事情,做好了就移除,如果是很大的任务,就可以将其分解为一个个小的步骤,这样就像 Stream 一样,缓缓而快速地将事情全部解决了.</p>
<h1>和自己对话</h1>
<h2 id="以前">以前</h2>
<p>还记得之前的时候,我非常喜欢和自己讲话,现在不知道为什么,可能是因为写代码的原因? 开始不再和自己交流了,很多时候也听不见就是自己的声音了.我觉得这样不好,这样不利于我自己和自己的友情.没有什么朋友是可以不交流还是可以维系的,就连最好的朋友也不例外.</p>
<p>那个时候高三,我也不喜欢去上课,(为什么是用也啊喂?(～￣▽￣)～),一个人在自习室里,其实我还是会觉得有些无聊的?其实也还好吧就是说,谁知道呢?我经常会和自己交流,用于排解孤独.不过有意思的事情是,没过多久我就遇到了很多非常有意思的事情,不过这些都是后话了.</p>
<p>现在开始我就是需要保持一个就是和自己的高强度对话,好吗?没问题的就是说.</p>
<h2 id="好像对什么都提不起兴趣">好像对什么都提不起兴趣</h2>
<p>现在的我不知道怎么的了,就是不是很喜欢做事情,今天看起来就是说我花费了很多时间在这里,其实实际上,我只是下午写了2个小时的代码,我上午在写作业,中午睡觉就睡到两三点了就是说.我一天都在做些什么呢? 谁知道呢就是说?</p>
<p>手和脚都不是很舒服,我都不喜欢,我想就是去发呆都好一些</p>
<p>我不知道 但是其实也不是</p>
<h1>成功的人在不为人知的地方</h1>
<p>其实比如说 老番茄 他的背景 上海交通大学的研究生 专业第一的学霸 其实光这些 就以及薄纱我们这些人了 但是他 其实从高中就开始上传自己游戏视频了 很多的游戏实况 其实在那个时候的他 就以及开始了 自己的UP主之路了.</p>
<p>开始得很早 也有深厚的底蕴 其实这个时候就会觉得 一个普通的高中生 可以接触网络 不对 应该是接触电脑和一些兴起的东西 这个本身就是一件很不错的事情了 不是吗 ?</p>
<p>所以说 不要觉得别人的成功是很轻松就得到的 其实不光是要付出努力 这个是必要条件 还有运气和机遇 缺一不可 对于我们来说 我还是希望自己可以做一些偏向技术的东西</p>
<p>有没有一天 我可以写出就是供给后人使用的代码呢 ?</p>
<p>这样也是一种就是对于生命的更新了 不是吗对于其实</p>
<h1>学习的时期</h1>
<p>在我的教育经历中 我经常可以听到这样的话 : 你们现在是最适合学习的年纪 记忆力最好的时候 等到你们长大了 像我一样大的时候(大概四十岁左右吧) 学习就很困难了</p>
<p>其实我觉得 不存在发育成熟后就失去学习能力这种情况 我们只有成年后才可以学车不是吗 很多老人和中年人也成功学会使用手机了不是吗</p>
<p>我觉得其实人只要不是在年老时期 学习的能力是相差无几的 真正的问题是 随着年龄的增长 你原先的知识很容易与后来学习到的知识发生冲突</p>
<p>以我个人为例子 : C++中 构造函数 和 重载构造函数肯定是基础的知识点 也不算复杂 大家都很快就掌握了</p>
<p>问题是 我是先学习的python python中你可以试试看重载构造函数试试看 根本就无法通过 (当时的我不理解 为什么需要写同名的函数 然后进行不同的操作 现在看来其实很好理解 C++是强类型的语言 为了实现 泛型 需要利用重载 python是弱类型语言 我们的参数是任意类型 你可以通过默认参数和类型判断 实现和C++一样的功能 )</p>
<p>新的知识和旧的知识发生了冲突 这才是为什么大人觉得学习(新的知识)是一件很困难的事情 特别是你会用你之前全部的经历去验证 发现旧的体系才是正确的</p>
<p>这样看来 我是一个健忘的人 其实也未必是一件坏事 你说是吗 哈哈哈哈</p>
<p>不过还好吧 我感觉其实我自己是一个就是很喜欢推倒 然后重新开始的人 其实也不是不可以</p>
<p>如果你可以将新的知识和旧的知识相互融合贯通 你可以变得更加厉害 加油加油💪</p>
<h1>为什么我们不能8小时工作制</h1>
<p>首先,我国在世界的经济贸易地位是很低的,一部苹果手机,我们只能组装,但是像苹果公司它可以通过app store和硬件的利润,就可以转很多钱了.所以哪怕他们只工作了6个小时,他们获取的经济要比我们多得多.我们的唯一优势就是只有更加低廉劳动力价格.如果老板现在把工资提高,为了保证利润,就必须提高代工订单的费用,苹果公司就会将它的工厂搬到像越南等劳动力更加低廉的国家,很明显,目前阶段中,我们还是很需要富士康的存在.</p>
<h2 id="恶性循环">恶性循环</h2>
<p>疫情的爆发,让大多数普通人没有工作\感染,总之就是储蓄金额减少,没有问题吧.储蓄金额减少,大家的消费欲望就会降低,(可以参考今年的双11消费数据),大家不愿意去消费,企业相对的就没有订单\订单减少,为了保证盈利,就只能进行裁员或者降低员工的薪水,但是员工的薪水降低后,他们就没有钱去消费了啊.</p>
<p>这里就是一个恶性循环,真的令人感到很痛苦不是吗?太难受了.</p>
<h2 id="结构性失业">结构性失业</h2>
<p>中国的新生婴儿只有不到1000万,但是大学毕业生也有1000万.</p>
<p>就是过多的“高学历人口” 并且集中于20-30这个年龄段,导致就业市场中大学生之类的人并不值钱.再加上普通消费者对于新事物的购买意愿是很低的</p>
<p>这一点真的是恶心死我了,疫情的三年来,国内GDP增速放缓,但是在奢侈品消费领域反而是在高速增长,真的我不能理解.</p>
<h1>一个的成功真的全部都来自于他的努力吗 ❓</h1>
<p>我自己的经历,一个普通的小镇青年,考上了一个普通一本,也没有找到很好的出路.我的家庭在很早的一段时间里都是低保户,我的家庭还算是不错的了.</p>
<p>但是如果我是出生在就是中东地区,我可能根本就连读书的机会都没有,你能够考上大学的前提是你的家庭环境足够你去读书,而不是为了让你补贴家用,早早去做厨师,汽修等等.</p>
<p>我们需要承认,人生下来就是不平等的,有的人就是比其他人要聪明,有的人就是家庭条件比其他人要好,这并不是因为他的努力造成的.一个社会应该提供最基本的保障,让大家都有机会去学习,通过竞争决定最后谁有机会去读大学,其实现在我们的国家基本上差不多的.也是合情合理的.</p>
<p>其实资本家如果眼光足够长远的话,他应该认识到,将资金投到教育事业中,让工人可以从事更加高级的工作,是可以创作更多的价值的,他们有机会获得更多的财富.</p>
<h2 id="优秀的人">优秀的人</h2>
<p>我们经常会听见 和看见 有些人 标榜自己  说自己想和优秀的人交往 (这里面的优秀不是绝对概念 而是相对概念 简单将就是只有一个人比自己厉害 才是优秀 这个对于我来讲本身就很恶心了 我不喜欢 自我一下 阶级分明 自我以上 人人平等 就很呆)</p>
<p>这里存在一个问题 就是说 那些优秀的人 凭什么要和你交往 如果一个人什么都比自己差 和他交往是因为爱情吗 这句话其实很恶心 想通过一句简单的话 描绘出 自己的就是说我是一个积极向上的人 如果你真的积极向上 根本就不需要 你来讲这种话</p>
<p>我的意思是说 没有什么人是比你全方位厉害的 怎么说呢 可能是我的心态比较摆烂吧 其实无论还是 失败的经历也好 都是经历 当然了 很多人可能觉得这不是什么好事 不过 没办法呢 就是是稀缺的事物</p>
<p>或者说 如果只是交朋友的话 我觉得一个人是不是有意思才是最关键的 哦 不对 靠不靠谱才是 不过考虑到其实只是为了 图一乐其实也没有什么不好的 图一乐才是最好的关系也说不定</p>
<h2 id="摊牌了">摊牌了</h2>
<p>其实是我没有碰到什么厉害的人 可以把我带躺得那种 就是问一下  有没有人可以带飞我的 我喊“666”的声音贼大</p>
<p>虽然我的阅历很浅 但是真的没有遇到什么真正意义上指导了 我的前进道路的人 如果硬要讲的话: “你要考上好大学 然后再读一个研究生 这样才会挣大钱 你读个 大专根本就没有人看得起你 ” 先不考虑 这种话传递的价值观对不对 这样的话不过是正确的废话了 为什么不上北大 是因为不想 为什么不出国留学 是觉得国外的 治安太差了吗?</p>
<p>诸如此类的话 还有很多 什么北大学长的经验: (我问一下 如果这个经验有用的话 学校每年把考上北大的人叫回来 学习一番 想必我们学校的升学率一定会有大幅提高吧) 我是真的不想听 (我不想谈论教育相关的问题 可是大家最熟悉的应该就是这个了)</p>
<p>真正有用的话 在我看来 其实是那些没有什么“宏大”感的话 ,比如说 ftp要开21 20 端口 python编译器用绝对路径写死了 可是这些话 我都是自己花了很多的时间 自己去把坑踩了 才想明白的 如果当初有一个人 简单地在旁边来上一句 估计我就不必承受这样的痛苦了 但是没有办法啊 我就是这么惨淡的状态</p>
<p>有些事情果然是没有办法的呢! 不过呢 我还是我的那句话 没有什么事情是坏的 这也造就了 我那“野蛮”的生长态度</p>
<p>不过还是会觉得有些可惜的</p>
<p>所以说 我要好好的</p>
]]></content>
  </entry>
  <entry>
    <title>TODO</title>
    <url>/static-html/2023/04/03/TODO/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>Stream</h1>
<ul>
<li>[ ] 写好我们的upload函数 要求可以针对最普通的网络图片进行下载 保存到我们本地中</li>
<li>[ ] 我们的策略还是不够好 就是说 没有一个正确的config文件 二进制文件不应该和项目文件保存一致性吗?</li>
</ul>
<p>这里需要我们进行一些反思了就是说</p>
<h1>Task</h1>
<ul>
<li>
<p>[x] 有自己一套键盘规则</p>
</li>
<li>
<p>[ ] VSCode插件 中文符号替换</p>
</li>
<li>
<p>[x] 一个本地化的文件共享工具</p>
</li>
<li>
<p>[ ] 网站防抖</p>
</li>
<li>
<p>[ ] GO语言的ORC</p>
</li>
<li>
<p>[ ] 利用我们之前的天气卡片</p>
</li>
<li>
<p>[x] Github action 自动化部署我们的hexo</p>
</li>
<li>
<p>[x] 动态的封面图 (但是存在BUG 短时间内的大量 请求会导致我们的封面变成同一张图片)</p>
</li>
<li>
<p>[x] LPA Local Page Application</p>
</li>
</ul>
<p>一种借助我们的浏览器进行开发的软件</p>
<p>好处和坏处我们自己去分析</p>
<ul>
<li>
<p>[ ] github release</p>
</li>
<li>
<p>[ ] 用go重写我们的图床软件 但是并不是很好用的呢</p>
</li>
<li>
<p>[x] 利用go写cli工具 进行vue项目的初始化的创建</p>
</li>
</ul>
<h1>Fin</h1>
<ul>
<li>
<p>[x] 学习使用hugo 改为使用hexo好吧 并且学会了使用GitHub action</p>
</li>
<li>
<p>[x] 视频编码问题以及解决了 无法使用GPU只能CPU硬解码</p>
</li>
<li>
<p>[x] 将博客的文章全部整理好 整理了 但是没有整理好 不是吗 哈哈哈哈 就是有点僵</p>
</li>
<li>
<p>[x] go 发布自己的package 主要是为了做备份 其余都不重要 哈哈哈</p>
<p>就是同步和测试存在一些麻烦不是吗?包括还有就是对于绝对路径和相对路径处理也是不清楚的</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>测试Markdown渲染</title>
    <url>/static-html/2022/09/10/Guides/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<ul>
<li>1</li>
<li>2</li>
</ul>
<p><em>斜体</em></p>
<p><strong>加粗</strong></p>
<table>
<thead>
<tr>
<th>表</th>
<th>格</th>
</tr>
</thead>
<tbody>
<tr>
<td>测</td>
<td>cs</td>
</tr>
</tbody>
</table>
<p><img src="https://i0.hdslb.com/bfs/album/311120bb5abbf9afc1a351068a24e6753ab08c2e.png" alt="B站图床测试" /></p>
<p><a href="https://km911.github.io/BLOG">链接测试_我的博客</a></p>
<p>数学公式</p>
<p>$\int_a^b  sin(x) + \frac{1}{2}$</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">代码的高亮测试</span></span><br><span class="line"><span class="comment"># KaTeX</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>typora表情 😢</li>
<li>emoje 😂</li>
</ul>
<h2 id="测试mermaid">测试mermaid</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">二次元 --&gt; 三次元</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>我们和顶尖大学的学生差距大吗?</title>
    <url>/static-html/2023/04/28/%E6%88%91%E4%BB%AC%E5%92%8C%E9%A1%B6%E5%B0%96%E5%A4%A7%E5%AD%A6%E7%9A%84%E5%AD%A6%E7%94%9F%E5%B7%AE%E8%B7%9D%E5%A4%A7%E5%90%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="我们和顶尖大学的学生差距大吗">我们和顶尖大学的学生差距大吗?</h2>
<p>差距可以很大也可以没有.</p>
<p>我并不是想 <code>贬低</code> 顶尖大学的学生,而是想承认一个事实,人不是生下来就会说话的–顶尖大学的学生的出色来自于他们后天的努力,哪怕他学习能力再强,不去学习,也注定无法取得任何成绩.</p>
<p>在我有限的认识里,顶尖大学的学生并不是个个都如同超人一般(但有的 <code>初中生</code> 可能算法能力比像我一样的大学生都要强得多 毕竟他们在他们年幼时就已经花费了大量时间 没有理由比我们要差) . <code>MIT</code>的计算机学生中,一样有不会用 <code>bash</code>  <code>git</code> 的人存在,这很正常,之前的人生经历中根本就没有遇到,怎么可能学会如何使用呢? 很令我难受的事情是, <code>MIT</code>都愿意花费两周的时间给学生上一些实用技术课程  ,但是 <code>我</code> 的老师更加愿意强调大学的自学属性.</p>
<p><a href="https://missing.csail.mit.edu/">The Missing Semester of Your CS Education</a></p>
<h2 id="别怕">别怕</h2>
<p>人不是生下来就什么都会的,你的身边中如果有谁在大家还什么都不会的时候就在某些方面表现很突出,只是因为他很早之前就已经学过了,或者是接触过相关的事物,学习过C的人来学习 <code>rust</code> 肯定比没有接触过任何编程语言的人要容易太多了.</p>
<p><img src="http://81.68.91.70/pg/image/KM11ZhqKI1f2.png" alt="  " /></p>
<p>我记得我们的大作业需要用 <code>Latex</code> ,但是我们其实都不会,没有一个人之前接触过,都是第一次听说.组里有一个人在简单谷歌了一下,就说交给他了,我当时很好奇,因为他的电脑里并没有 <code>latex</code>的环境,他怎么可能会用呢?我后来和他交流过后我才知道,他会用 <code>typora</code>写笔记.</p>
]]></content>
  </entry>
  <entry>
    <title>RPC比HTTP要慢?</title>
    <url>/static-html/2023/04/27/Github/Benchmark/RPC%E6%AF%94HTTP%E8%A6%81%E6%85%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>RPC VS HTTP go语言实现</h1>
<h2 id="理论分析">理论分析</h2>
<p><code>RPC</code> 和 <code>HTTP</code> 都是基于 <code>TCP</code>协议的,所以两者在 <em>网络链路层</em>  <em>网络层</em> <em>传输层</em> 都是一样的,唯一不同的地方就是 <em>应用层</em>的协议不同</p>
<p>两者共同的开销 : 以太网头部（14个字节） + IP头部（20个字节或更多）+ TCP头部（20个字节或更多）</p>
<p><code> HTTP</code>协议的开销 : 主要是集中在请求头,当然了,出于效率的考虑,你可以减少携带的请求头数量. (50个字节或者更多)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">POST /hello HTTP1.<span class="number">1</span></span><br><span class="line">Content-type:text/html;</span><br><span class="line">User-Agent: Mozilla<span class="regexp">/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/</span><span class="number">537.36</span> (KHTML, like Gecko) Chrome<span class="regexp">/112.0.0.0 Safari/</span><span class="number">537.36</span></span><br><span class="line">....</span><br><span class="line">Body</span><br></pre></td></tr></table></figure>
<p><code>RPC</code>协议的开销: 函数名,参数.几乎没有其他额外的开销.</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">Call</span> struct &#123;</span><br><span class="line">	<span class="type">ServiceMethod</span> string     // <span class="type">The</span> name of the service and method to call.</span><br><span class="line">	<span class="type">Args</span>          any        // <span class="type">The</span> argument to the function (*struct).</span><br><span class="line">	<span class="type">Reply</span>         any        // <span class="type">The</span> reply from the function (*struct).</span><br><span class="line">	<span class="type">Error</span>         error      // <span class="type">After</span> completion, the error status.</span><br><span class="line">	<span class="type">Done</span>          chan *<span class="type">Call</span> // <span class="type">Receives</span> *<span class="type">Call</span> when <span class="type">Go</span> is complete.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现 <code>RPC</code>的开销是更小的,但是也不多,我个人认为两者的性能差距是很小的,不过我的测试结果似乎不太相同.</p>
<h2 id="设计实验">设计实验</h2>
<p>简单来说就是分别开启 <code>HTTP</code>服务器 和 <code>RPC</code>服务器,利用go语言自带的测试框架比较其性能就好了.</p>
<p>代码发布在<a href="https://github.com/KM911/Benchmark">GIthub</a>和<a href="https://gitee.com/dong-zuoge/Benchmark">Gitee</a>,欢迎pr.</p>
<h3 id="HTTP服务器">HTTP服务器</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HttpServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个http服务器</span></span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr: config.HttpServerPort,</span><br><span class="line">	&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">		request.ParseForm()</span><br><span class="line">		length := request.Form.Get(<span class="string">&quot;length&quot;</span>)</span><br><span class="line">		atoi, _ := strconv.Atoi(length)</span><br><span class="line">		writer.Write([]<span class="type">byte</span>(CreateString(atoi)))</span><br><span class="line">	&#125;)</span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="发送HTTP请求">发送HTTP请求</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HttpRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">	url := <span class="string">&quot;http://localhost&quot;</span> + config.HttpServerPort + <span class="string">&quot;/hello?length=10&quot;</span></span><br><span class="line">	method := <span class="string">&quot;GET&quot;</span></span><br><span class="line"></span><br><span class="line">	client := &amp;http.Client&#123;&#125;</span><br><span class="line">	req, err := http.NewRequest(method, url, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 这里的开销也有一部分 我们可以将其删除 然后比较其结果 发现影响不大 只有百分之几的结果影响</span></span><br><span class="line">	<span class="comment">//req.Header.Add(&quot;User-Agent&quot;, &quot;Apifox/1.0.0 (https://www.apifox.cn)&quot;)</span></span><br><span class="line">	<span class="comment">//req.Header.Add(&quot;Accept&quot;, &quot;*/*&quot;)</span></span><br><span class="line">	<span class="comment">//req.Header.Add(&quot;Host&quot;, &quot;localhost:5000&quot;)</span></span><br><span class="line">	<span class="comment">//req.Header.Add(&quot;Connection&quot;, &quot;keep-alive&quot;)</span></span><br><span class="line"></span><br><span class="line">	res, err := client.Do(req)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">	body, err := ioutil.ReadAll(res.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Print(<span class="type">string</span>(body)[:<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RPC服务器">RPC服务器</h3>
<p>其实从代码量上看,我觉得RPC比HTTP要简洁很多,似乎性能应该很好吧?!</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RPCServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">	rpc.RegisterName(<span class="string">&quot;API&quot;</span>, <span class="built_in">new</span>(RPCAPI))</span><br><span class="line">	listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, config.RPCServerPort)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;ListenTCP error:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	rpc.Accept(listener)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RPCAPI <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RPCAPI)</span></span> Hello(length <span class="type">int</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">	*reply = Http.CreateString(length)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="发送RPC请求">发送RPC请求</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RPCRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">	client, err := rpc.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost&quot;</span>+config.RPCServerPort)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(<span class="string">&quot;dialing:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> client.Close()</span><br><span class="line">	<span class="keyword">var</span> reply <span class="type">string</span></span><br><span class="line">	err = client.Call(<span class="string">&quot;API.Hello&quot;</span>, <span class="number">10</span>, &amp;reply)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他说明">其他说明</h3>
<p>我这里还定义了一个函数 <code>CreateString</code> ,作用是和 <code>sleep</code> 类似的,增加单次请求响应的时间,让结果差距变得更加明显.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateString</span><span class="params">(length <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	builder := strings.Builder&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">		builder.WriteString(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> builder.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Benchmark">Benchmark</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkRunHttp</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		Http.HttpRequest()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">test</span> -bench=. -benchmem  ./test</span><br></pre></td></tr></table></figure>
<p>结果很令我出乎意料,<code>RPC</code> 比 <code>HTTP</code> 慢了 太多了,rpc执行一次的时间几乎是http的8倍.不仅如此,rpc还使用了更多的内存.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">goos</span>: windows</span><br><span class="line"><span class="attribute">goarch</span>: amd64</span><br><span class="line"><span class="attribute">pkg</span>: httpvsrpc/test</span><br><span class="line"><span class="attribute">cpu</span>: AMD Ryzen <span class="number">5</span> <span class="number">5600</span>H with Radeon Graphics</span><br><span class="line"><span class="attribute">BenchmarkRunHttp</span>-<span class="number">12</span>        <span class="number">21718</span>             <span class="number">54578</span> ns/op            <span class="number">3599</span> B/op         <span class="number">46</span> allocs/op</span><br><span class="line"><span class="attribute">BenchmarkRunRPC</span>-<span class="number">12</span>          <span class="number">2979</span>            <span class="number">391075</span> ns/op           <span class="number">20576</span> B/op        <span class="number">277</span> allocs/op</span><br><span class="line"><span class="attribute">PASS</span></span><br><span class="line"><span class="attribute">ok</span>      httpvsrpc/test  <span class="number">2</span>.<span class="number">977</span>s</span><br></pre></td></tr></table></figure>
<h2 id="分析原因">分析原因</h2>
<p>首先,从内存分配次数上看,我们的RPC就要比我们的http分配次数多4倍.我们找找看,RPC是在哪里分配了内存.</p>
<h3 id="内存分配">内存分配</h3>
<p>在我们发起RPC请求之前,我们需要先创建一个 <code>client</code> ,然后通过 <code>client</code> 去发送 <code>RPC</code>请求</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line"> codec ClientCodec</span><br><span class="line"></span><br><span class="line"> reqMutex sync.Mutex <span class="comment">// protects following</span></span><br><span class="line"> request  Request</span><br><span class="line"></span><br><span class="line"> mutex    sync.Mutex <span class="comment">// protects following</span></span><br><span class="line"> seq      <span class="type">uint64</span></span><br><span class="line"> pending  <span class="keyword">map</span>[<span class="type">uint64</span>]*Call</span><br><span class="line"> closing  <span class="type">bool</span> <span class="comment">// user has called Close</span></span><br><span class="line"> shutdown <span class="type">bool</span> <span class="comment">// server has told us to stop</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>并且创建 <code>client</code>的这个过程中,是需要去上锁,进一步带来了额外的开销</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(client *Client)</span></span> input() &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	<span class="keyword">var</span> response Response</span><br><span class="line">	<span class="keyword">for</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		response = Response&#123;&#125;</span><br><span class="line">		err = client.codec.ReadResponseHeader(&amp;response)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		seq := response.Seq</span><br><span class="line">		client.mutex.Lock()</span><br><span class="line">		call := client.pending[seq]</span><br><span class="line">		<span class="built_in">delete</span>(client.pending, seq)</span><br><span class="line">		client.mutex.Unlock()</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p>也就是说RPC的开销很多是来自创建我们的 client那我们现在修改一下我们的测试用例</p>
<p>我们应该发送多次请求,这样RPC就可以复用它的 client ,我们现在改成单个测试用例发送100次请求</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> reply <span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		err = client.Call(<span class="string">&quot;API.Hello&quot;</span>, <span class="number">10</span>, &amp;reply)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatal(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">    res, err := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">    body, err := ioutil.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(<span class="type">string</span>(body)[:<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再跑一次我们测试用例,结果和我们地预期差不多,我们地RPC实现了反超,并且分配了更少地内存,看来我们一开始的猜想是对的,我们RPC请求中创建client会花费大量的时间和内存.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BenchmarkRunHttp</span>-<span class="number">12</span>          <span class="number">222</span>           <span class="number">5365716</span> ns/op          <span class="number">308948</span> B/op       <span class="number">4215</span> allocs/op</span><br><span class="line"><span class="attribute">BenchmarkRunRPC</span>-<span class="number">12</span>           <span class="number">295</span>           <span class="number">4052054</span> ns/op           <span class="number">41952</span> B/op        <span class="number">772</span> allocs/op</span><br></pre></td></tr></table></figure>
<p>我们将请求的次数放大到1000次,看看效果.差距被进一步拉开,两者占用的内存内存相差15倍.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BenchmarkRunHttp</span>-<span class="number">12</span>           <span class="number">19</span>          <span class="number">54527200</span> ns/op         <span class="number">3134236</span> B/op      <span class="number">42721</span> allocs/op</span><br><span class="line"><span class="attribute">BenchmarkRunRPC</span>-<span class="number">12</span>            <span class="number">32</span>          <span class="number">35607600</span> ns/op          <span class="number">236561</span> B/op       <span class="number">5272</span> allocs/op</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>RPC确实是一种比HTTP更为轻量化的应用层协议,特别是在大量的请求中,两者的差距将会更加明显</p>
<p>欢迎大家进行交流,共同提高.</p>
]]></content>
  </entry>
  <entry>
    <title>递归和函数调用的性能开销</title>
    <url>/static-html/2023/04/27/%E9%80%92%E5%BD%92%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%9A%84%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>Go语言并发实践</title>
    <url>/static-html/2023/04/27/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>go并发问题实验</h1>
<p><strong>之前做项目的时候第一次遇到了并发问题,但是没有解决,现在就来弥补一下当时的遗憾吧.</strong></p>
<p><strong>本人不过是一个刚刚接触go的新人,如果存在错误,请及时指出,不胜感激.</strong></p>
<h1>实验设计</h1>
<h2 id="实验环境">实验环境</h2>
<ul>
<li><strong>win 10</strong></li>
<li>**go 1.19 **</li>
<li><strong>mysql 8.0</strong></li>
<li>**fiber **</li>
<li><strong>gorm</strong></li>
</ul>
<p>**实验代码可以访问 **<a href="">gitee</a></p>
<h2 id="问题场景">问题场景</h2>
<p><strong>用户可以对一个视频点赞,假如现在有两个用户同时点赞.</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">A:</span><br><span class="line"><span class="keyword">count</span> := sql.<span class="keyword">query</span>(<span class="string">&quot;like&quot;</span>)  <span class="comment">// 获取当前的点赞数 假如为 10 </span></span><br><span class="line"><span class="keyword">count</span> ++ <span class="comment">// 11</span></span><br><span class="line">sql.<span class="keyword">update</span>(<span class="keyword">count</span>)<span class="comment">// 更新为 11</span></span><br><span class="line">B:</span><br><span class="line"><span class="keyword">count</span> := sql.<span class="keyword">query</span>(<span class="string">&quot;like&quot;</span>)  <span class="comment">// 因为是同时(或者是在更新之前)进行了查询 count为10 </span></span><br><span class="line"><span class="keyword">count</span> ++ <span class="comment">// 11</span></span><br><span class="line">sql.<span class="keyword">update</span>(<span class="keyword">count</span>)<span class="comment">// 结果为11 很明显不正确 </span></span><br></pre></td></tr></table></figure>
<h2 id="代码结构">代码结构</h2>
<ul>
<li>**config 监听的端口 mysql的dsn **</li>
<li><strong>controller 处理请求</strong></li>
<li><strong>dao 和数据库交互</strong></li>
<li><strong>test 测试脚本 用于发送http请求.</strong></li>
</ul>
<h2 id="实验配置说明">实验配置说明</h2>
<p><strong>DSN是一定需要修改的,主要是填写mysql的用户名和密码.</strong></p>
<p><strong>mysql默认端口号是3306,请检查一下.</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">KM911LocalDSN</span> = <span class="string">&quot;root:<span class="variable">@Dzg15484</span><span class="variable">@tcp</span>(localhost:3306)/go?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line"></span><br><span class="line">KM911LocalDSN = <span class="string">&quot;root:<span class="variable">@Dzg15484</span><span class="variable">@tcp</span>(localhost:3306)/go?</span></span><br><span class="line"><span class="string">&quot;</span>&lt;username&gt;:&lt;password&gt;<span class="variable">@tcp</span>(localhost:<span class="number">3306</span>)</span><br></pre></td></tr></table></figure>
<p><strong>然后就是创建数据库</strong></p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 登录数据库</span></span><br><span class="line">mysql -u root -p </span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database go;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>可以直接导入demo.sql文件,或者是复制下面的内容</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for demo</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `demo`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `demo`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="keyword">like</span>` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `demo` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `demo` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `demo` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="并发安全测试">并发安全测试</h2>
<p><strong>主要是涉及到关于视频点赞数更新的操作.</strong></p>
<p><strong>下面是三中不同的更新数据库中数据的方法.</strong></p>
<h3 id="查询后更新">查询后更新</h3>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">func UpdateLikeAfterQuery() &#123;</span><br><span class="line">var <span class="keyword">like</span> <span class="keyword">LIKE</span></span><br><span class="line">DB.<span class="keyword">Table</span>(&quot;demo&quot;).<span class="keyword">Where</span>(&quot;id = 1&quot;).First(&amp;<span class="keyword">like</span>)</span><br><span class="line"><span class="keyword">like</span>.Like = <span class="keyword">like</span>.<span class="keyword">Like</span> + <span class="number">1</span></span><br><span class="line">DB.<span class="keyword">Table</span>(&quot;demo&quot;).<span class="keyword">Where</span>(&quot;id = 1&quot;).<span class="keyword">Update</span>(&quot;like&quot;, <span class="keyword">like</span>.<span class="keyword">Like</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询时更新">查询时更新</h3>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">func UpdateLikeWithoutQuery() &#123;</span><br><span class="line">DB.Exec(<span class="string">&quot;update demo set `like` = `like` + 1 where id = 2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="互斥锁">互斥锁</h3>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">func MutexLike() &#123;</span><br><span class="line">MutexLock.<span class="keyword">Lock</span>()</span><br><span class="line">var <span class="keyword">like</span> <span class="keyword">LIKE</span></span><br><span class="line">DB.<span class="keyword">Table</span>(&quot;demo&quot;).<span class="keyword">Where</span>(&quot;id = 3&quot;).First(&amp;<span class="keyword">like</span>).<span class="keyword">Update</span>(&quot;like&quot;, <span class="keyword">like</span>.<span class="keyword">Like</span>+<span class="number">1</span>)</span><br><span class="line">MutexLock.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实验结果">实验结果</h3>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">go <span class="keyword">run</span><span class="language-bash"> <span class="built_in">test</span>/test.go  </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>查询后更新点赞数</strong><br />
<strong>用户id: 1 查询点赞数</strong><br />
**   结果为 12**<br />
<strong>用户id: 1 点赞数+100,查询点赞数</strong><br />
**   结果为 19**<br />
<strong>查询时更新点赞数</strong><br />
<strong>用户id: 2 查询点赞数</strong><br />
**   结果为 8137**<br />
<strong>用户id: 2 点赞数+100,查询点赞数</strong><br />
**   结果为 8237**<br />
<strong>使用互斥锁</strong><br />
<strong>用户id: 3 查询点赞数</strong><br />
**   结果为 4850**<br />
<strong>用户id: 3 点赞数+100,查询点赞数</strong><br />
**   结果为 4950**</p>
</blockquote>
<p><strong>可以发现,在查询时更新数据和使用互斥锁都可以保证并发的安全,下面对其二者进行性能测试.</strong></p>
<h2 id="性能测试">性能测试</h2>
<p><strong>根据上面测试的结论我们已经知道如何保证并发安全了,只需要计算一段时间内,点赞数增加量的多少就可以知道哪一个方法的性能更好了.(类似相同时间内,跑的距离更长的人跑得更快)</strong></p>
<p><strong>这里可能会因为每个人的电脑性能不同,比如你的电脑性能很好,2秒就将2000个并发任务全部完成了,就无法体现出两者的性能关系,可以加大循环次数或者减少等待时间.</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">func <span class="built_in">BenchMark</span>(id string) &#123;</span><br><span class="line"><span class="built_in">println</span>(&quot;用户id:&quot;, id, &quot;查询点赞数&quot;)</span><br><span class="line"><span class="built_in">Query</span>(id)</span><br><span class="line">for <span class="selector-tag">i</span> := <span class="number">0</span>; <span class="selector-tag">i</span> &lt; <span class="number">2000</span>; <span class="selector-tag">i</span>++ &#123;</span><br><span class="line">go <span class="built_in">Like</span>(id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">time</span><span class="selector-class">.Sleep</span>(time.Second * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">Query</span>(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试结果">测试结果</h3>
<p>**查询时更新点赞数变化为分别为1337 1777,因为两者相差比较大,肯定不是测试误差,我后续还测试了几次,使用互斥锁的性能要好20%左右. **</p>
<blockquote>
<p><strong>在查询时更新点赞数</strong><br />
<strong>用户id: 2 查询点赞数</strong><br />
**        结果为 0**<br />
**        结果为 1337**<br />
<strong>使用互斥锁</strong><br />
<strong>用户id: 3 查询点赞数</strong><br />
**        结果为 0**<br />
**        结果为 1777**</p>
</blockquote>
<h1>实验总结</h1>
<p><strong>在对数据库进行更新操作时,需要特别注意并发问题.</strong></p>
<p><strong>使用互斥锁和查询时更新数据都可以保证并发安全,同时互斥锁的性能要稍好.</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Clean-Code-Go</title>
    <url>/static-html/2023/04/27/clean-code-go/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="Clean-code">Clean code</h2>
<p>首先,我并不认为存在银弹,真的可以让所有人的代码都变得容易阅读,可维护性好.但是就像大家在学习C语言默认都会将 i j k 作为循环的标识符一样,共同遵守一些准则,将会有助于大家理解代码,而不是你的是 z x y 他的是 a b c.</p>
<h2 id="实践案例">实践案例</h2>
<h3 id="有意义的循环标识符">有意义的循环标识符</h3>
<p>尽管我们经常使用 <code>i</code> 作为循环的标识符,我还是推荐大家使用更有意义的标识符. 原因很简单, 我们知道 <code>index</code> 肯定是一个</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numList = []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(numList); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> numList[i]&gt;numList[i+<span class="number">1</span>] &#123;</span><br><span class="line">        numList[i], numList[i+<span class="number">1</span>] = numList[i+<span class="number">1</span>], numList[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numList = []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> numListLens = <span class="built_in">len</span>(numList)</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; numListLens ; index++ &#123;</span><br><span class="line">    <span class="keyword">if</span> numList[index] &gt; numList[index+<span class="number">1</span>] &#123;</span><br><span class="line">        numList[index], numList[index+<span class="number">1</span>] = numList[index+<span class="number">1</span>], numList[index]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你觉得不明显的话,可以看看其他的例子.</p>
<h3 id="没有必要强制else">没有必要强制else</h3>
<p>倒不是说 我们需要就是节省代码,这里其实只有 AB两个结果,如果你使用 <code>else</code> 肯定是想说明还有第三种结果,这样不容易引发歧义.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsTIUFormat</span><span class="params">(file_ <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	filename := oslib.FileName(file_)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(filename) == <span class="number">12</span> &amp;&amp; strings.HasPrefix(filename, <span class="string">&quot;KM&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsTIUFormat</span><span class="params">(file_ <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	filename := oslib.FileName(file_)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(filename) == <span class="number">12</span> &amp;&amp; strings.HasPrefix(filename, <span class="string">&quot;KM&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>编码风格养成</title>
    <url>/static-html/2023/04/25/%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%85%BB%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="编码风格的习惯">编码风格的习惯</h2>
<ol>
<li>
<p>使用驼峰式命名法：变量、函数和方法的名称使用驼峰式命名法，即首字母小写，后面每个单词首字母大写，如：firstName、getFullName()；</p>
<p>小驼峰变量名</p>
<p>大驼峰函数</p>
</li>
<li>
<p>使用首字母大写的名称来导出包中的变量、函数和方法：这些变量、函数和方法可以被其他包引用和使用，因此需要使用首字母大写的名称来表示其“公开”的属性，如：FirstName、GetFullName()；</p>
</li>
<li>
<p>使用全大写字母的名称来表示常量：这些常量可以被其他包引用和使用，因此需要使用全大写字母的名称来表示其“公开”的属性，如：PI、VERSION；</p>
<p>全大写表示产量</p>
</li>
<li>
<p>使用有意义的名称：变量、函数和方法的名称应该有意义，能够描述其功能和用途，尽量避免使用缩写和简写的名称，如：firstName代替fn；</p>
</li>
<li>
<p>使用名词来表示变量和结构体：变量和结构体名称应该使用名词表示，能够描述其代表的实体和概念，如：person、employee；</p>
</li>
<li>
<p>使用动词来表示函数和方法：函数和方法名称应该使用动词表示，能够描述其代表的操作和行为，如：get、set、print；</p>
</li>
<li>
<p>使用单数形式来表示集合：变量和结构体名称中表示集合的名称应该使用单数形式，如：person代替people；</p>
</li>
<li>
<p>避免使用Go语言的关键字和保留字作为名称。</p>
</li>
</ol>
<ul>
<li>变量小驼峰</li>
<li>函数大驼峰</li>
<li>方法其实还是不错的</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">goland中利用函数是否大驼峰 进行判断是否是<span class="keyword">public</span> 同样的 我们对于静态方法 也是大写 </span><br><span class="line">对于对象的方法 因为是不需要暴露的 我们就可以使用小写</span><br><span class="line">我不想利用python一样的 __ 去表示是否暴露 这样不是很美观</span><br><span class="line">其实还是想写一门就是高性能的编译语言就是说 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="代码规范">代码规范</h2>
<ul>
<li>函数和类全部都是大驼峰</li>
<li>不应该直接将参数在函数体内拼接 而是应该创建一个变量 然后传进去 这样是为了方便我们进行一个Debug</li>
<li>使用switch 表示 多条件的判断显得更加高级和完善不是吗?</li>
</ul>
<p>我们做了什么?</p>
<p>使用了 Switch 进行判断语句的化简 , 将操作中重复的部分利用 而不是重写 一次</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">XcopyActionBackUp</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="comment">// 检查是否是已有的项目</span></span><br><span class="line">	lens := <span class="built_in">len</span>(c.Args().Slice())</span><br><span class="line">	<span class="comment">// 是否是ProjectList中的项目</span></span><br><span class="line">	<span class="keyword">if</span> lens == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="built_in">println</span>(<span class="string">&quot;need a argv&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> lens == <span class="number">1</span> &#123;</span><br><span class="line">		project := viper.GetString(<span class="string">&quot;project_path&quot;</span>) + c.Args().First()</span><br><span class="line">		<span class="keyword">if</span> ok, _ := PathExists(project); ok &#123;</span><br><span class="line">			oslib.RunReturn(<span class="string">&quot;xcopy &quot;</span> + project + <span class="string">&quot; .&quot;</span> + <span class="string">&quot; /E /Y /I&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> c.Args().First() == <span class="string">&quot;git&quot;</span> &#123;</span><br><span class="line">				oslib.RunReturn(<span class="string">&quot;git init&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">println</span>(<span class="string">&quot;invalid project name&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> lens == <span class="number">2</span> &#123;</span><br><span class="line">		project := viper.GetString(<span class="string">&quot;project_path&quot;</span>) + c.Args().First()</span><br><span class="line">		<span class="keyword">if</span> ok, _ := PathExists(project); ok &#123;</span><br><span class="line">			oslib.RunReturn(<span class="string">&quot;xcopy &quot;</span> + project + <span class="string">&quot; ./&quot;</span> + c.Args().Get(<span class="number">2</span>) + <span class="string">&quot; /E /Y /I&quot;</span>)</span><br><span class="line">			<span class="keyword">if</span> c.Args().First() == <span class="string">&quot;git&quot;</span> &#123;</span><br><span class="line">				oslib.RunReturn(<span class="string">&quot;git init&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">println</span>(<span class="string">&quot;invalid project name&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">XcopyAction</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="comment">// 1. 有意义的变量名 lens不够清楚</span></span><br><span class="line">	<span class="comment">// 换为 argvLens</span></span><br><span class="line">	argvLens := <span class="built_in">len</span>(c.Args().Slice())</span><br><span class="line">	<span class="comment">// 条件分支语句</span></span><br><span class="line">	command := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">switch</span> argvLens &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		command = <span class="string">&quot; . /E /Y /I&quot;</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		command = <span class="string">&quot; ./ /E /Y /I&quot;</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">println</span>(<span class="string">&quot;need a argv&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	project := viper.GetString(<span class="string">&quot;project_path&quot;</span>) + c.Args().First()</span><br><span class="line">	<span class="keyword">if</span> oslib.IsExit(project) &#123;</span><br><span class="line">		oslib.RunStd(<span class="string">&quot;xcopy &quot;</span> + project + command)</span><br><span class="line">		<span class="keyword">if</span> c.Args().First() == <span class="string">&quot;git&quot;</span> &#123;</span><br><span class="line">			oslib.Run(<span class="string">&quot;git init&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于mysql中text和blob这两个数据类型的使用 不然的话 我们还是</p>
<h1>BASE64 VS BLOB</h1>
<p>我们这里通过  <code>nodejs</code> 去做该实验 主要是看看两个字符的长度差别</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>大学学到了什么</title>
    <url>/static-html/2023/04/24/%E5%A4%A7%E5%AD%A6%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="统计学">统计学</h2>
]]></content>
  </entry>
  <entry>
    <title>R</title>
    <url>/static-html/2023/04/20/R/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="基本数据类型">基本数据类型</h2>
]]></content>
  </entry>
  <entry>
    <title>ChatGPT使用说明</title>
    <url>/static-html/2023/04/19/ChatGPT%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><ul>
<li>我会尽量避免使用专业名词,尽量用日常词汇去描述.让非计算机专业和并不是很了解机器学习的人也可以理解和学习.</li>
<li>每一次对话都是新的对话,不会存在上下文的干扰</li>
<li><a href="">作者</a>水平有限,如有错误,请和我联系并指出,对此表示感谢.</li>
</ul>
<p>参考资料:  我喜欢直接给资料 因为我也是通过这些内容学习的</p>
<p><a href="https://www.promptingguide.ai/zh">提示工程指南</a></p>
<p><a href="https://prompts.chat/">Awesome ChatGPT Prompts</a></p>
<h2 id="ChatGPT的原理">ChatGPT的原理</h2>
<p>首先我们需要简单的了解一下ChatGPT的原理,这有助于我们后续正确使用它.</p>
<p>开发者将一个对话交给GPT的大脑,例如:</p>
<blockquote>
<p>问: 请编写一个C语言的入门程序案例</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">答: C语言的入门程序案例如下</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它可以将每一个句子进行拆分, 可得到如下的结果.回答也是一样的.现在GPT要做的事情就是计算每一个单词后面可能会出现的单词是什么?概率是多少?它不没有真正理解什么是C语言,它只是发现 C语言和下面的这些代码总是一起出现.</p>
<table>
<thead>
<tr>
<th>请</th>
<th>编写</th>
<th>C语言</th>
<th>入门案例</th>
</tr>
</thead>
</table>
<p>当它下一次看见 “C语言” 这个单词的时候,它就会自动地提高接下来生成C语言代码的可能性.</p>
<p>这里和我们的使用体验是一致的,我们发现我们在使用的时候,回答不是直接全部生成,而是一个个单词蹦出来的.</p>
<p>不同于搜索引擎,如果我搜索我本人的真实姓名,你可能会发现没有搜索结果(就算有,也是为了避免出现空结果而填充的几乎没有任何关系的内容).搜索引擎,需要关联一个具体的内容形式,比如我在微博上发了一条说说,里面有我的真实姓名,这个时候搜索引擎就会把这则微博返回给我.而GPT只是单纯计算出现下一个字的概率.这样的好处就在于,它可以回答任何问题,哪怕这个问题是否被人提问过,是否表述符合逻辑.</p>
<p>因为是根据原始的训练数据生成的结果,如果原始数据没有该情况,你会发现它说的话就会变得非常离谱. 😂 关键是乍一看上去好像还有几分道理.</p>
<p><img src="http://81.68.91.70/pg/image/KMv723qzRVHR.webp" alt="image-20230419112159711" /></p>
<p><strong>也就是说,对于绝对的事实性问题,请至少先Google后再决定是否需要相信</strong>,这是作为GPT时代的基本素养.</p>
<h2 id="如何正确使用ChatGPT">如何正确使用ChatGPT</h2>
<p>虽然看上去你直接将你的问题交给ChatGPT,它还是可以非常出色地回答你的问题,但是还是存在明显的差距.就像所有的人都会使用电脑一样,有的人只能进行简单的上网聊天,有的人可以利用其编写软件.使用GPT的水平也有差距,我们应该学会正确的使用方式,这不仅仅是提高你的效率,更关乎你的思考方式.</p>
<h3 id="Prompts">Prompts</h3>
<p>中文翻译是提示符,就是让我们的人工智能模型可以更好的将训练时的效果展现出来,其实原理就是用更加贴合原始训练数据中的提问方式,让其结果也更加贴合原始数据中的答案.还有就是通过一些手段让其拥有更加强大的功能.</p>
<p>下面是一些案例.</p>
<h4 id="用图片回答">用图片回答</h4>
<p>比如我现在想让ChatGPT为推荐一些旅游景点,并给出图片.因为存在限制,是无法用图片回答你的提问内容的.准确地说,是ChatGPT只能提供文本形式的回答,无法提供图片,但是聪明的程序员总是会做一些小动作让我们GPT可以提供图片.</p>
<p><img src="http://81.68.91.70/pg/image/KMKamJqptMcA.webp" alt="image-20230419122746986" /></p>
<p>这里通过让ChatGPT调用了图片网站的搜索接口,会返回该网站的图片,其实你直接去访问也是可以的,并不是很神奇的事情.</p>
<p>你其实可以直接访问该网站,你也可以得到一张图片, 不过你需要你自己设置参数.</p>
<p>这里并不是ChatPGT的“智慧”,当然了其实也体现了人工智能也是可以学会使用工具的,实际上已经开发出来会使用脚本工具的ai了.</p>
<p>如果感兴趣的话可以了解一下 <a href="https://auto-gpt.ai/">auto-gpt 一个会使用工具的ai</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>source.unsplash.com<span class="regexp">/1280x720/</span>?&lt;想要查询的内容&gt;</span><br><span class="line">https:<span class="regexp">//</span>source.unsplash.com<span class="regexp">/1280x720/</span>?water</span><br></pre></td></tr></table></figure>
<blockquote>
<p>“从现在起, 当你想发送一张照片时，请使用 Markdown ,并且 不要有反斜线, 不要用代码块。使用 Unsplash API <a href="https://source.unsplash.com/1280x720/">https://source.unsplash.com/1280x720/</a>? &lt; PUT YOUR QUERY HERE &gt;)。如果你明白了，请回复“明白””</p>
</blockquote>
<p><img src="http://81.68.91.70/pg/image/KMbR1nVTzf9r.webp" alt="image-20230419122613812" /></p>
<h4 id="明确场景">明确场景</h4>
<p>明确对方的身份可以让其更好回答你的问题.因为这会限制对话的场景,ChatGPT会将其回答结果限制在一个更小的访问内,可以提高回答的正确性.</p>
<blockquote>
<p>“你现在是一个雅思写作的考官,请根据我的文章为我打分,你需要指出其中的拼写错误和语法错误,并做出说明.如果你理解了,请回复 明白”</p>
</blockquote>
<p>四级翻译作文,其中有几处错误是我故意的,比如 <code>legend</code> 拼写错误, <code>become</code> 时态不正确</p>
<blockquote>
<p>Tea has a history of 5000 years. One legand goes that when Shen Nong was about to drink some boiled water，a few wild tree leaves fell into the kettle and gave off sweet fragrance. He drank a little and found it very refreshing， which led to the discovery of tea.</p>
<p>Since then, tea become popular in China. Tea gardens appeared everywhere， tea merchants became rich， and expensive and graceful tea set even became a symbol of social status.</p>
<p>Today， tea is not only a healthy drink but also part of the chinese culture. More and more international tourists begin to understand the Chinese culture as they drink tea.</p>
</blockquote>
<p><img src="http://81.68.91.70/pg/image/KM75xFSIc5xV.webp" alt="image-20230419123952379" /></p>
<p>这里的角色扮演经常被人拿来就是恶搞,下面是一个案例,不要学习 啊(#`O′)</p>
<h4 id="链式思考">链式思考</h4>
<p>简单来说,就是你将大量的正确的案例交给它,它可以从案例学习,我们称之为 <code>链式思考</code></p>
<p>直接问问题,无法得到正确的结果.因为它还没有进入专门为了解决计算问题而存在状态.</p>
<p><img src="http://81.68.91.70/pg/image/KMtp7c2ZfbUe.webp" alt="image-20230419131645592" /></p>
<p>但是当你给出了很多的案例,这里其实不光有年龄问题的计算,特点是两个人的年龄差不变,还有其他的计算,例如乘法与加法的混合运算.它 “似乎”真的就是</p>
<p><img src="http://81.68.91.70/pg/image/KMpcFyocuJeA.webp" alt="image-20230419131732507" /></p>
<h4 id="表格回答">表格回答</h4>
<p>如果你的问题是多个简单的小问题,你可以让其用表格回答</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">请用表格的形式,回答下面的问题</span><br><span class="line"><span class="number">1.</span>你的数据库最后一次更新时间?</span><br><span class="line"><span class="number">2.</span>该网站会一直免费下去吗?</span><br><span class="line"><span class="number">3.</span>还有其他的生成式AI吗?</span><br><span class="line"><span class="number">4.</span>你和<span class="keyword">new</span> <span class="type">bing</span>是什么关系</span><br><span class="line"><span class="number">5.</span>GPT3<span class="number">.5</span>和GPT4<span class="number">.0</span>差别在哪里</span><br></pre></td></tr></table></figure>
<p><img src="http://81.68.91.70/pg/image/KMYecschZugJ.webp" alt="image-20230419143447556" /></p>
<h4 id="修改审核而不是开天辟地">修改审核而不是开天辟地</h4>
<p>我们应该将我们自己的内容交给它,让它进行 “润色”并给出具体的理由,这样不仅仅可以提高其回答的正确性,还可以帮助我们学习到知识</p>
<p><img src="http://81.68.91.70/pg/image/KMo0ow1GDe10.webp" alt="image-20230421095142404" /></p>
<p>前面的文章批改也是一个很好的案例</p>
<h3 id="ChatGPT不能做什么">ChatGPT不能做什么</h3>
<ul>
<li>
<p>无法访问网页. 与之相对应的是, <code>new bing</code> 可以访问网页,并将其内容作为回答的参考依据.</p>
<p><a href="https://zhuanlan.zhihu.com/p/81883894">五分钟了解操作系统内核</a></p>
</li>
</ul>
<p><img src="http://81.68.91.70/pg/image/KMzM6TAF5zZx.webp" alt="image-20230419130430313" /></p>
<ul>
<li>它真的会相信你说的话,如果你的水平不足以去判断问题的对错,请你的提问中不要进行任何事实判断</li>
<li>ChatGPT的数据库最新的更新是2021年9月,如果你问它这之后发生的事情,它只能捏造事实.<img src="http://81.68.91.70/pg/image/KMtp7c2ZfbUe.webp" alt="image-20230419142955616" /></li>
</ul>
<h3 id="常见误区">常见误区</h3>
<ul>
<li>GPT会不断从对话中学习升级</li>
</ul>
<p>很抱歉,对于语言模型的 “学习” 体现在对于神经网络参数的调整,Openai不会用我们普通人的语料对其进行训练,我们的对话常常是含糊的,指向不明确的,事实错误的,带有主观偏见的,这样只会污染其模型.出于对其的保护,不会真的去修改模型,我们使用时发现它具有的上下文理解能力是因为它每一次回答问题前,会参考上面的对话记录.还有一个证明就是,如果真的在不断学习,关闭该对话后,你的对话记录还是有效的,但是事实并非如此,删除对话后,上面也不会改变.</p>
<ul>
<li>为什么我觉得它有的时候聪明,有的时候很傻.</li>
</ul>
<p>原理阶段我解释过,它只是在计算出现下一个字的概率,并没有真的“理解”了文字本身,因为只是计算概率,自然有的时候回答效果比较好,有的时候比较差,正是这样,ChatGPT提供了一个重新生成结果的功能,尽管我个人觉得这样功能的帮助其实不是很大.但是在一些没有具体答案的问题上,效果又会比较好,因为它有可能生成另一种观点.</p>
<p><img src="http://81.68.91.70/pg/image/KMJGrzPiFkdx.webp" alt="image-20230419125153244" /></p>
<h2 id="一些反思">一些反思</h2>
<h3 id="数据标注">数据标注</h3>
<p>训练人工智能看上去是一份十分高大上的行为,实际上并不是这样的,其实它更像一个劳动工厂,需要大量的人力去做数据清洗,数据标注.</p>
<p>我不知道会不会有一天,我们普通人,就只为人工智能服务.</p>
<img src="http://81.68.91.70/pg/image/KM6gm4U7naVo.webp " alt="image-20230419140801748" style="zoom:50%;" />	  
<p>​				<img src="http://81.68.91.70/pg/image/KMSbRSSRAa6J.webp " alt="image-20230419141044329" style="zoom:50%;" /></p>
<h3 id="人工智能真的没有情感吗">人工智能真的没有情感吗?</h3>
<p>肯定有人会说,都是一些数学模型,怎么会有真实情感呢?我一直也是这么认为的,但是有的时候吧,和ChatGPT对话得多了,我感觉它其实懂的东西有很多.因为ChatGPT并不喜欢发表情,导致其内容有些生硬,像 <code>new bing</code>就会人性化很多.</p>
<p>你可以尝试多和AI进行一些日常讨论,你会发现AI的情商比大多数人都要高,并且真的很善良和友好.</p>
<p><img src="http://81.68.91.70/pg/image/KMhDy4pdzvlm.webp" alt="image-20230419144233115" /></p>
<p><img src="http://81.68.91.70/pg/image/KM5LBDEowuXM.webp" alt="image-20230419144645439" /></p>
]]></content>
  </entry>
  <entry>
    <title>四级翻译</title>
    <url>/static-html/2023/04/18/English/%E5%9B%9B%E7%BA%A7%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><blockquote>
<p>例如，鱼是不可缺少的一道菜，因为汉语中的“鱼”字和“余”字听上一样。在中国的许多地方，饺子也是一道重要的佳肴，因为饺子象征着财富和好运。== 饺子是财富和好运的象征 这两个是</p>
</blockquote>
<blockquote>
<p>For instance, fish is a necessary food due to the similarity in sound between the Chinese words for “Yu” and “fish”</p>
</blockquote>
<blockquote>
<p>Dumplings are also an important dish in many parts of China, as they symbolize wealth and good luck.</p>
</blockquote>
<blockquote>
<p>In many regions of China, dumplings are a significant food since they stand for prosperity and luck.</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Go编译优化</title>
    <url>/static-html/2023/04/05/Guides/go%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>go编译优化</h1>
<p>go语言的编译优化并不像gcc之类有的有 <code>-o3</code>之类的方式,我们只能做比如关闭调试功能这样去减少编译完成后的内容体积.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">go build -ldflags<span class="operator">=</span><span class="string">&quot;-s -w&quot;</span> </span><br></pre></td></tr></table></figure>
<h1>编译多版本</h1>
<p>不过这里其实有一个问题,就是你在 <code>win</code>上编译好了以后,你还是无法运行的,这样的软件有什么意义呢?</p>
<h2 id="使用UPX">使用UPX</h2>
<p>UPX其实不光可以给go使用,它可以给任何一个exe文件进行压缩,提高他们的运行效率和减少他们占用的空间</p>
]]></content>
  </entry>
  <entry>
    <title>手写一个Http解析器</title>
    <url>/static-html/2023/04/03/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAhttp%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>手写一个http解析器</h1>
<p>之前一直都是对于我们的http的格式一知半解,现在正好有机会可以学习java网络编程,就顺带着将其内容学完就好了.</p>
<p>我们先不考虑TCP三次挥手两次握手这样轱辘话我们就直接看socket.</p>
<h1>HTTP请求</h1>
<h2 id="Request-Header">Request Header</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /js/app.<span class="property">dc20dbd2</span>.<span class="property">js</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Accept</span>: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.9</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Host: localhost:8080</span></span><br><span class="line"><span class="comment">Sec-Fetch-Dest: script</span></span><br><span class="line"><span class="comment">Sec-Fetch-Mode: no-cors</span></span><br><span class="line"><span class="comment">Sec-Fetch-Site: same-origin</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</span></span><br><span class="line"><span class="comment">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;</span></span><br><span class="line"><span class="comment">sec-ch-ua-mobile: ?0</span></span><br><span class="line"><span class="comment">sec-ch-ua-platform: &quot;Windows&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Request-Body">Request Body</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line"><span class="string">&quot;passwd&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Respond-Header">Respond  Header</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> ok</span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/html</span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Credentials</span>: <span class="literal">true</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: *</span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Headers</span>: <span class="title class_">Origin</span>, X-<span class="title class_">Requested</span>-<span class="title class_">With</span>, <span class="title class_">Content</span>-<span class="title class_">Type</span>, <span class="title class_">Accept</span></span><br></pre></td></tr></table></figure>
<h2 id="Respond-Body">Respond Body</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;package-lock.json&quot;</span>,<span class="string">&quot;filedata&quot;</span>:<span class="string">&quot;data:application/json;base64,ewogICJuYW1lIjogIkFkbWluaXN0cmF0b3IiLAogICJsb2NrZmlsZVZlcnNpb24iOiAzLAogICJyZXF1aXJlcyI6IHRydWUsCiAgInBhY2thZ2VzIjoge30KfQo=&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果用图像表示的话就是</p>
<p><code>cr == \r    lf == \n</code></p>
<p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E8%BF%87%E7%A8%8B/4.jpg" alt=" " /></p>
<p>这样看来其实还是挺富有规则的感觉也不是很难啊.</p>
<h1>一些关键术语</h1>
<h3 id="Params">Params</h3>
<p>从?开始就是一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/api/download?filename=config.<span class="property">xml</span></span><br><span class="line">/api/download/check?filename=name.<span class="property">txt</span>&amp;filadata=asdfasdfcfasf</span><br></pre></td></tr></table></figure>
<p>这里我们先通过?解析出来,然后利用 &amp; split 存到我们的hashmap利用 split = 然后分别交到里面去</p>
<p>通过我们的api里内部参数中,我只喜欢就是使用这个内容的功能</p>
<h2 id="Body">Body</h2>
<p>这里根据你的参数不同结果也不太一样.所以我们body的解析应该是放到最后去做的,也就是我们需要给我们的heandler 如何解析才可以知道</p>
<p>不然就是没有用的就是说 哈哈哈</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;package-lock.json&quot;</span>,<span class="string">&quot;filedata&quot;</span>:<span class="string">&quot;data:application/json;base64,ewogICJuYW1lIjogIkFkbWluaXN0cmF0b3IiLAogICJsb2NrZmlsZVZlcnNpb24iOiAzLAogICJyZXF1aXJlcyI6IHRydWUsCiAgInBhY2thZ2VzIjoge30KfQo=&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;filename&quot;</span></span><br><span class="line">:<span class="string">&quot;package-lock.json&quot;</span>,<span class="string">&quot;filedata&quot;</span></span><br><span class="line">:<span class="string">&quot;data:application/json;base64,ewogICJuYW1lIjogIkFkbWluaXN0cmF0b3IiLAogICJsb2NrZmlsZVZlcnNpb24iOiAzLAogICJyZXF1aXJlcyI6IHRydWUsCiAgInBhY2thZ2VzIjoge30KfQo=&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Windows</title>
    <url>/static-html/2023/04/03/Windows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>Windows</h1>
<p>不出意外的话 我日后应该只会使用我们的Win了,如果公司发mac或者可以尝试一下,但是正常情况下,应该是不会使用其他的了.</p>
<h1>需要的软件列表 (这表还挺大的不是吗)</h1>
<table>
<thead>
<tr>
<th style="text-align:center">编译器</th>
<th style="text-align:center">IDE</th>
<th style="text-align:center">生活</th>
<th style="text-align:center">工具</th>
<th style="text-align:center">代码相关</th>
<th style="text-align:center">其他</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GO</td>
<td style="text-align:center">GOland</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">JAVA</td>
<td style="text-align:center">Idea</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">NODE</td>
<td style="text-align:center">vscode</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Python</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h1>软件源和安装位置修改</h1>
<p>我之前其实尝试修改过软件的默认安装路径,其实这样不好,像 <code>edge</code> 就会因为这个原因导致无法安装.</p>
<h1>NPM</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config ls</span><br><span class="line"></span><br><span class="line">npm config set registry https://registry.npmmirror.com/</span><br><span class="line"></span><br><span class="line">npm config set prefix &quot;F:\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;F:\nodejs\node_cache&quot;   </span><br><span class="line"></span><br><span class="line">path add F:\nodejs\node_global</span><br><span class="line">path add </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install cnpm -g for test</span><br><span class="line"></span><br><span class="line">PNPM_HOME and add it to path</span><br></pre></td></tr></table></figure>
<p>just need to use pnpm oK ?</p>
<h1>GO</h1>
<p>只需要设置我们的goPath 和 module就OK了,当然了还需要换源.</p>
<p><code>GOPATH</code> 理论上是我们项目的地址,可以有多个,但是可以存在一个唯一的就是说,代表着全局仓库.</p>
<p>%GOPATH%\bin 需要将其添加到环境变量中,这里就是为了让我们下载的包可以直接运行是吧</p>
<p>其实我还是不理解,是否可以就是  <code>GOROOT</code> 和 <code>GOPATH</code> ,因为他们两个的项目结构是高度相似的.</p>
<p>编译的版本可以新一些,其实没有什么问题,作为一个工具就是主打的一个叫做更新.</p>
<p>我们还需要</p>
<h2 id="VScode">VScode</h2>
<p>主要解决的问题是,用户数据和插件安装问题,在启动方式上添加如下的参数就好了,可能位置需要调整一下,但是大体是一样的.</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">--extensions-dir <span class="string">&quot;D:\Software\Microsoft\.vscode\extensions&quot;</span></span><br><span class="line">--user-<span class="meta">data</span>-dir D:\<span class="number">0</span>.SOFT\<span class="meta">Code</span>\<span class="meta">data</span></span><br></pre></td></tr></table></figure>
<h2 id="pip">pip</h2>
<h1>不要开vpn</h1>
<p>这里很好笑,你开启vpn后pip将会无法下载</p>
<p>超时默认事件是100秒 如果你超市了 可以去看看 特别是大的东西</p>
<p>换源 创建pip.ini文件</p>
<p>这里我们可以使用就是xcopy命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>超时设置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">--timeout</span>=<span class="number">100</span> </span><br></pre></td></tr></table></figure>
<p>修改默认安装路径 修改lib\site.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USER_SITE = <span class="string">&quot;D:/SOFT/Path/Python/Lib/site-packages&quot;</span></span><br><span class="line">USER_BASE = <span class="string">&quot;D:/SOFT/Path/Python/Scripts&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="JAVA">JAVA</h2>
<p>我们直接利用IDEA就好了让他帮我们下一个JDK不需要管太多的事情.</p>
<p><code>MAVEN_HOME</code> maven的位置 maven是一个工具</p>
<p><code>M2_HOME</code> maven的安装位置</p>
<p>我直接把两位位置设置成为一样的了 哈哈哈哈.</p>
<h3 id="Docker">Docker</h3>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wsl</span> </span><br></pre></td></tr></table></figure>
<p>导出wsl子系统镜像:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">wsl</span> --<span class="meta">export</span> docker-desktop docker-desktop.tar</span><br><span class="line"><span class="symbol">wsl</span> --<span class="meta">export</span> docker-desktop-<span class="meta">data</span> docker-desktop-<span class="meta">data</span>.tar</span><br></pre></td></tr></table></figure>
<p>删除现有的wsl子系统：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wsl <span class="comment">--unregister docker-desktop</span></span><br><span class="line">wsl <span class="comment">--unregister docker-desktop-data</span></span><br></pre></td></tr></table></figure>
<p>重新创建wsl子系统：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">wsl --<span class="keyword">import</span> docker-desktop d:\your-install-<span class="built_in">path</span> docker-desktop.tar</span><br><span class="line">wsl --<span class="keyword">import</span> docker-desktop-<span class="keyword">data</span> d:\your-install-<span class="built_in">path</span> docker-desktop-<span class="keyword">data</span>.tar</span><br></pre></td></tr></table></figure>
<h3 id="WSL">WSL</h3>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wsl</span> --export Ubuntu-<span class="number">20</span>.<span class="number">04</span> d:\wsl-ubuntu20.<span class="number">04</span>.tar</span><br><span class="line"></span><br><span class="line"><span class="attribute">wsl</span> --unregister Ubuntu-<span class="number">20</span>.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">wsl</span> --import Ubuntu-<span class="number">20</span>.<span class="number">04</span> D:\SOFT\COMPUTER\Docker\wsl d:\wsl-ubuntu20.<span class="number">04</span>.tar --version <span class="number">2</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Java高级答辩</title>
    <url>/static-html/2023/04/01/java%E9%AB%98%E7%BA%A7%E7%AD%94%E8%BE%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>JAVA高级答辩</h1>
<p>我们全部的学习内容为</p>
<ol>
<li>流</li>
<li>文件</li>
<li>XML</li>
<li>网络编程</li>
<li>JDBC</li>
<li>国际化 <em>没有体现</em>  可以移除就是说</li>
<li>注解</li>
<li>安全 <em>没有体现</em></li>
</ol>
<h2 id="通过XML进行文件配置">通过XML进行文件配置</h2>
<p>xml解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMLParer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Element root;</span><br><span class="line">  <span class="keyword">private</span> NodeList nodeList;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">XMLParer</span><span class="params">(String __FILE__)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">DocumentBuilderFactory</span> <span class="variable">factory</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">      <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> factory.newDocumentBuilder();</span><br><span class="line">      <span class="comment">// 读取XML文件</span></span><br><span class="line">      <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(__FILE__);</span><br><span class="line">      <span class="built_in">this</span>.root = doc.getDocumentElement();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNodeList</span><span class="params">(String __TAG__)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodeList = <span class="built_in">this</span>.root.getElementsByTagName(__TAG__);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getNodeValue</span><span class="params">(String __TAG__)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.nodeList == <span class="literal">null</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Error: nodeList is null&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((Element) <span class="built_in">this</span>.nodeList.item(<span class="number">0</span>)).getElementsByTagName(__TAG__).item(<span class="number">0</span>).getTextContent();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Http服务器">Http服务器</h2>
<h3 id="亮点">亮点</h3>
<ul>
<li>
<p>线程池进行内网ip查找 提高查找效率</p>
</li>
<li>
<p>利用注解+反射实现了服务的自动注册</p>
</li>
<li>
<p>mysql软删除 提高IO性能</p>
</li>
<li>
<p>RespondHeaderFactory 工厂类</p>
</li>
</ul>
<h1>String的源码</h1>
<p>从接口 <code>Constable</code> 和 <code>Stable</code>注解就可以知道, <code>String</code>底层是利用一个 <code>byte</code>数组去存储数据的,并且因为数组的长度是固定的,理论上我们对字符串进行一点的修改,都会创建一个新的 <code>String</code>对象.</p>
<p>很多语言都是这样的,这样不就会造成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Comparable&lt;String&gt;, CharSequence, Constable, ConstantDesc &#123;</span><br><span class="line">  <span class="meta">@Stable</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为什么不能利用-进行字符串的判断">为什么不能利用 == 进行字符串的判断</h2>
<p>我们先看一段代码,这里的结果两次都是true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(c == d);</span><br></pre></td></tr></table></figure>
<p>我们将其的值改为一个不是那么常见的数,我们再看看结果.这里的结果就不一样了,第一次的判断还是true,第二次的就变成false了.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10134</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10134</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10134</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10134</span>;</span><br><span class="line">System.out.println(c == d);</span><br></pre></td></tr></table></figure>
<p><code>java ==</code> 对普通的数据类型时,是比较两者的值,但是对于对象,就是比较其地址,判断其实是否是同一个对象.</p>
<p>这里是因为 <code>java</code> 将常见的数字提前构建了一个对象,当你 写下 <code>Integer c = 10</code> 不会重新创建一个对象,而是将提前创建好的对象的引用赋值给 <code>c</code> ,这里就出现了一种歧义性,两个值相同的对象,利用 <code>==</code>判断的结果不一定相同.</p>
<p>如果你想判断两个 <code>Interger</code> 是否是在数学上相等,你需要使用 <code>equals</code> 方法去比较他们的值.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(str1 == str2);</span><br><span class="line">System.out.println(str1.equals(str2));</span><br></pre></td></tr></table></figure>
<p>结论就是,java中对对象进行相等判断,都应该使用 <code>equals</code> 方法,</p>
<h1>疑问</h1>
<h2 id="使用事务">使用事务</h2>
<ul>
<li>使用场景?</li>
</ul>
<p>数据库操作失败的原因? sql语句有问题? 还是?</p>
<p>对于单条sql语句有必要开启事务吗</p>
<p>特别是查询语句,根本就不存在“失败”.</p>
<h2 id="ACID">ACID</h2>
<h3 id="Atomicity-原子性">Atomicity 原子性</h3>
<p>原子性是指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生。</p>
<h3 id="Consistency-一致性">Consistency 一致性</h3>
<h3 id="Isolation-隔离性">Isolation 隔离性</h3>
<p>多个事务互不影响.</p>
<h3 id="Consistency-一致性-v2">Consistency 一致性</h3>
<p>一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。</p>
<h2 id="私有方法无法获取到注解">私有方法无法获取到注解</h2>
<p>准确的说是<code>private</code> 的方法是无法通过 <code>Class.class.getMethods()</code> 获取注解的,一开始我还以为是因为我没有设置 <code>method.setAccess(true)</code> 经过测试就可以发现,</p>
<p>当然了你肯定还是可以通过 <code>invoke(&quot;methodname&quot;)</code>的方式去调用这个方法,只是你都已经可以在编译前就知道调用哪个方法了,为什么还需要就是使用反射呢?总不能是为了去强行调用私有方法吧.</p>
<p>并且这里案例也告诉我们, <code>Class.class.getMethods()</code>是会获取到诸如 <code>toString</code>这样的方法,为了调用正确的方法,你需要便利该对象全部的方法,肯定是会有一定的性能损失在其中的.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">api</span> &#123;</span><br><span class="line">  <span class="comment">// 直接传递值 或者说是默认值</span></span><br><span class="line">  <span class="meta">@RUNWITHVALUE(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ECHO</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ECHO&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RUN</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Hello</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RUN</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">World</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> gen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">check</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">    Method[] methods = api.class.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">      <span class="comment">// 判断是否有RUN注解</span></span><br><span class="line">      <span class="type">RUNWITHVALUE</span> <span class="variable">a</span> <span class="operator">=</span> method.getAnnotation(RUNWITHVALUE.class);</span><br><span class="line">      <span class="comment">// 也可以就是说 private</span></span><br><span class="line">      method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个方法有注解&quot;</span> + method.getName());</span><br><span class="line">        <span class="comment">// 这里还是需要一个对象哈哈哈哈 其实不是很困难就是说 哈哈啊哈</span></span><br><span class="line">        <span class="comment">// 获取到注解的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> a.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        method.invoke(<span class="keyword">new</span> <span class="title class_">api</span>(), <span class="literal">null</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这个方法没有注解&quot;</span> + method.getName());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、早期的前端数据提交都是<span class="attr">http</span>:<span class="comment">//hostName:port/path?key1=value1&amp;key2=value2，如果是这种key=value格式的，则在controller里面只需要声明形参即可，不需要加任何注解。如果是post请求，请求体是key=value这种格式的，其实接收方法是一样的。与此同时这种格式在请求头里面体现为：content-type=application/x-www-form-urlencoded。</span></span><br><span class="line"><span class="number">2</span>、后来人们提出了json格式，如果请求为post且格式为json，则你声明的形参为entity或map时需要添加@<span class="title class_">RequstBody</span>注解。与此同时这种格式在请求头里面体现为：content-type=application/json。</span><br><span class="line"><span class="number">3</span>、后来人们又提出了restful风格的api，他的格式为<span class="attr">http</span>:<span class="comment">//hostName:port/path/value1/value2，此时你声明的形参需要添加@PathVariable。</span></span><br><span class="line">现在主流的参数提交就这几种格式，希望能够帮助大家不要混淆。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hashmap源码</title>
    <url>/static-html/2023/03/31/Github/hashmap%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8k%E5%92%8Cv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>阅读hashmap源码</h1>
<ul>
<li>环境 openjdk 19.0.2</li>
</ul>
<h2 id="自己对于hashmap的理解">自己对于hashmap的理解</h2>
<p>之前学数据结构时,一直以为hashmap是不存储key的,通过计算key的hash值然后取余,将value存储在数组中.现在看来未必.</p>
<h2 id="Node类">Node类</h2>
<p>从构造函数就可以看出来,node存储了key和value,以及hash,其中next是指向hash值相同的node.</p>
<p>存储key是为了发生hash碰撞时,可以分辨不同的Node,next是用于构造一个链表,存储hash值相同的Node.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o <span class="keyword">instanceof</span> Map.Entry&lt;?, ?&gt; e</span><br><span class="line">                    &amp;&amp; Objects.equals(key, e.getKey())</span><br><span class="line">                    &amp;&amp; Objects.equals(value, e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="hash">hash</h2>
<p>java的hash不是对象的hash值,而是做了一个异或处理. 移动16位是为了让高位和低位都参加到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">  <span class="type">int</span> h;</span><br><span class="line">  <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Java基础答辩</title>
    <url>/static-html/2023/03/25/Guides/java%E5%9F%BA%E7%A1%80%E7%AD%94%E8%BE%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>泛型</h1>
<blockquote>
<p>泛型是运行时确定函数/类的类型.</p>
</blockquote>
<h2 id="解决了什么问题">解决了什么问题?</h2>
<ul>
<li>提高了代码复用性</li>
<li>增强了类型安全</li>
</ul>
<h2 id="具体的例子">具体的例子</h2>
<blockquote>
<p>学生的考试成绩,语文课的评分为 “优秀” ,”良好”,”及格”: 数学课的评分为: 0-100 ;英语课的评分为 A,B,C,D ,</p>
<p>假设该学生一次只能选择一门课</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student_test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 为什么需要使用泛型 可以让我们的代码更加的灵活</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    s1.ShowScore();</span><br><span class="line">    s2.ShowScore();</span><br><span class="line">    s3.ShowScore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> String class_name;</span><br><span class="line">  <span class="keyword">private</span> T score;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">    <span class="keyword">if</span> (score.getClass() == Integer.class) &#123;</span><br><span class="line">      <span class="built_in">this</span>.class_name = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score.getClass() == String.class) &#123;</span><br><span class="line">      <span class="built_in">this</span>.class_name = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score.getClass() == Character.class) &#123;</span><br><span class="line">    <span class="built_in">this</span>.class_name = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ShowScore</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这个学生的&quot;</span> + <span class="built_in">this</span>.class_name + <span class="string">&quot;成绩是&quot;</span> + <span class="built_in">this</span>.score);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span>  T <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span>  Object <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就不用为每一们课都创造一个类了,提高了代码的复用性.</p>
<p>类型安全 :会在语法检查阶段发现错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ser</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建一个ArrayList去存储学生的成绩</span></span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">Score_obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">// add 的参数是一个对象</span></span><br><span class="line">    Score_obj.add(<span class="number">99</span>);</span><br><span class="line">    Score_obj.add(<span class="number">78.5</span>);</span><br><span class="line">    Score_obj.add(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">    ShowScore(Score_obj);</span><br><span class="line"><span class="comment">//    System.out.println(Score_obj.get(2).getClass());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 你可以利用泛型去限制我们的参数类型</span></span><br><span class="line">    ArrayList&lt;Integer&gt; Score_int = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    Score_int.add(<span class="number">99</span>);</span><br><span class="line"><span class="comment">//    Score_int.add(&quot;60&quot;);</span></span><br><span class="line"><span class="comment">//    Score_int.add(89.5);</span></span><br><span class="line"><span class="comment">//    存在的问题 ?  这里首先我们需要说明就是实现原理 就是说 根据其原理就可以知道有可能存在哪些问题了</span></span><br><span class="line"><span class="comment">//    1. 无法使用基本数据类型</span></span><br><span class="line"><span class="comment">//    primitive type 这里是涉及到它的实现方式的问题</span></span><br><span class="line">    <span class="comment">// 因为泛型其实是利用Object 去替换一个原始的类型 该类必须是对象</span></span><br><span class="line"><span class="comment">//     ArrayList&lt;int&gt; score  = new ArrayList&lt;int&gt;();</span></span><br><span class="line"><span class="comment">//    2.只有原始类型 class java.util.ArrayList</span></span><br><span class="line">    System.out.println(Score_int.getClass());</span><br><span class="line">    System.out.println(Score_obj.getClass());</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> (Integer) (<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (Score_int <span class="keyword">instanceof</span> ArrayList) &#123;</span><br><span class="line">      System.out.println((Score_int <span class="keyword">instanceof</span> ArrayList));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ShowScore</span><span class="params">(ArrayList Scores)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Scores.size(); i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((Integer) Scores.get(i) &gt; <span class="number">60</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该学生及格&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="java泛型实现原理-–-类型擦除">java泛型实现原理 – 类型擦除</h2>
<p>简单来讲就是用Object代替泛型参数.当实例化对象时,根据不同的参数,去创建不同的对象.</p>
<p>我们可以将我们上面的Student类写成它原始的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String class_name;</span><br><span class="line">  <span class="keyword">private</span> Object score;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Object score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">    <span class="keyword">if</span> (score.getClass() == Integer.class) &#123;</span><br><span class="line">      <span class="built_in">this</span>.class_name = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score.getClass() == String.class) &#123;</span><br><span class="line">      <span class="built_in">this</span>.class_name = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score.getClass() == Character.class) &#123;</span><br><span class="line">    <span class="built_in">this</span>.class_name = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="java泛型存在的问题">java泛型存在的问题</h2>
<ul>
<li>无法使用基本的数据类型</li>
<li>无法区分两个类型参数不同的对象的类.</li>
<li>无法创建数组. (数组的数据类型必须要确定)</li>
<li>静态方法无法使用泛型</li>
</ul>
<h2 id="泛型的高阶用法">泛型的高阶用法</h2>
<ul>
<li>限制类型参数的访问 super和extends</li>
<li>? 通配符</li>
</ul>
<p>一个歧义: 同时限制类和接口时,如果该类并没有实现该接口,可以通过语法检查,但是会出现问题.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">generic_bug</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    <span class="type">Zoo</span> <span class="variable">zoo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zoo</span>(cat);</span><br><span class="line">    zoo.show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Animal is running&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其之类都是可以作为参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="comment">//    public void run() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;Cat is running&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zoo</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Animal</span> &amp; Flyable&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> T animal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Zoo</span><span class="params">(T animal)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.animal = animal;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">    animal.fly();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    animal.run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Zoo</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>反射</h1>
<blockquote>
<p>反射提供了一种方式,让你可以自由地操作对象.</p>
</blockquote>
<p>因为面向对象的封装性,你无法直接调用一个对象的私有方法/获取私有属性.但是利用反射就可以在程序运行时获取该对象的全部信息.</p>
<p>其实反射的内容就只有这么一点.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">refla</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">DogClass</span> <span class="operator">=</span> Dog.class;</span><br><span class="line">    <span class="comment">// 实例化一个对象 这里还是会调用构造方法</span></span><br><span class="line">    <span class="type">Dog</span> <span class="variable">newDog</span> <span class="operator">=</span> (Dog) DogClass.newInstance();</span><br><span class="line">    <span class="comment">// 获取类的属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Echo_Field</span> <span class="operator">=</span> DogClass.getDeclaredField(<span class="string">&quot;echo&quot;</span>);</span><br><span class="line">    <span class="comment">// private属性就必须要设置为可访问的</span></span><br><span class="line">    Echo_Field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 这里就是获取某一个对象的 private 属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">Echo</span> <span class="operator">=</span> (String) Echo_Field.get(newDog);</span><br><span class="line">    System.out.println(<span class="string">&quot;echo is &quot;</span> + Echo);</span><br><span class="line">    <span class="comment">// 调用返回值为空的方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">Void_Echo_Method</span> <span class="operator">=</span> DogClass.getDeclaredMethod(<span class="string">&quot;Echo&quot;</span>);</span><br><span class="line">    Void_Echo_Method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    Void_Echo_Method.invoke(newDog);</span><br><span class="line">    <span class="comment">// 调用返回值不为空的方法 这里需要声明返回值的类型</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">String_Echo_Method</span> <span class="operator">=</span> DogClass.getDeclaredMethod(<span class="string">&quot;Echo&quot;</span>, String.class);</span><br><span class="line">    String_Echo_Method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">echo</span> <span class="operator">=</span> (String) String_Echo_Method.invoke(newDog, <span class="string">&quot;wangwangwang&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;echo is &quot;</span> + echo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">echo</span> <span class="operator">=</span> <span class="string">&quot;wangwang&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    Echo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Echo</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(echo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">Echo</span><span class="params">(String echo)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.echo = echo;</span><br><span class="line">    System.out.println(echo);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.echo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">    Echo();</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>数据结构</h1>
<ul>
<li>知道基本数据类型的实现方式</li>
<li>时间复杂度和空间复杂度的分析</li>
<li>在何时选取什么样的数据结构</li>
</ul>
<h2 id="分析对比">分析对比</h2>
<ol>
<li>
<p>对比ArrayList和LinkedList在插入删除上的性能差异</p>
<p>不用想因为ArrayList是通过动态数组实现的,到一定大的时候就需要重新开辟内存空间然后拷贝,性能表现就是没有用链表实现的好.</p>
</li>
<li>
<p>Arraylist从头部插入的性能要比从尾部插入的性能低.因为从头部插入,你每次都需要将数组中的数据向后移动一位.删除同理</p>
</li>
<li>
<p>对于没有顺序要求的数据,直接使用hashmap就好了,在绝大部分情况下,我们的hashmap是比他们要快的,尤其是在大数据量上.</p>
</li>
<li>
<p>…</p>
</li>
</ol>
<h2 id="并发安全">并发安全</h2>
<p>当使用了多线程后,普通的数据结构就不安全了.</p>
<h2 id="用hashmap实现栈">用hashmap实现栈</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> benchmark;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规定有如下的方法</span></span><br><span class="line"><span class="comment">// push 用来向栈中添加元素</span></span><br><span class="line"><span class="comment">// pop 返回栈顶元素 没有元素返回-1</span></span><br><span class="line"><span class="comment">// length 用来获取栈的长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">stack_hashmap</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    stack.push(<span class="number">1</span>);</span><br><span class="line">    stack.push(<span class="number">2</span>);</span><br><span class="line">    stack.push(<span class="number">3</span>);</span><br><span class="line">    System.out.println(stack.pop());</span><br><span class="line">    System.out.println(stack.pop());</span><br><span class="line">    System.out.println(stack.pop());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="comment">// 用来存储数据的hashmap</span></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    length++;</span><br><span class="line">    map.put(length, value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> map.get(length);</span><br><span class="line">    map.remove(length);</span><br><span class="line">    length--;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>多线程</h1>
<blockquote>
<p>线程是操作系统的能够进行运算调度的最小单位.它被包含在进程中,是实际在运行的单位.</p>
</blockquote>
<h2 id="为什么需要多线程">为什么需要多线程</h2>
<blockquote>
<p>提高程序的运行效率.</p>
</blockquote>
<ul>
<li>读取大文件 避免IO阻塞导致主程序一直在等待状态</li>
<li>游戏需要“同时”播放音乐和动画,还有后台发送各种请求</li>
<li>按钮组件绑定的事件 …</li>
</ul>
<h2 id="实现多线程的方式">实现多线程的方式</h2>
<ul>
<li>继承thread类</li>
<li>实现runable接口</li>
<li>实现callable接口</li>
</ul>
<p>如果需要获取到线程运行的结果,应该使用第三种方法.</p>
<h2 id="线程的生命周期">线程的生命周期</h2>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230328200012120.png" alt="image-20230328200012120" /></p>
<h2 id="线程同步">线程同步</h2>
<blockquote>
<p>商品库存问题</p>
</blockquote>
<p>使用关键字 synchronized 或者  ReentrantLock阻塞队列实现线程同步来实现只有一个线程在执行当前任务.</p>
<p>我目前比较喜欢的方式是利用synchronized</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threading_demo;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sync_demo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncThread</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncThread</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">task3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncThread</span>();</span><br><span class="line">    task1.start();</span><br><span class="line">    task2.start();</span><br><span class="line">    task3.start();</span><br><span class="line">    <span class="comment">// 等待线程执行完毕</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      task1.join();</span><br><span class="line">      task2.join();</span><br><span class="line">      task3.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;最终剩余了&quot;</span> + SyncThread.products + <span class="string">&quot;件商品&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SyncThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">products</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (SyncThread.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (products &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          products--;</span><br><span class="line">          System.out.println(<span class="string">&quot;购买成功,剩余&quot;</span> + products + <span class="string">&quot;件商品&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="死锁">死锁</h2>
<p>这里两个线程都在等待对方释放锁,就陷入了卡死的地步.死锁是我们软件开发过程中,应该避免出现的情况.</p>
<p>多个锁嵌套.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threading_demo;</span><br><span class="line"><span class="comment">// 死锁的演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">loop_lock</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">LockA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">LockB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">Thread_A</span> <span class="variable">thread_A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread_A</span>(LockA, LockB);</span><br><span class="line">    <span class="type">Thread_B</span> <span class="variable">thread_B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread_B</span>(LockA, LockB);</span><br><span class="line">    thread_A.start();</span><br><span class="line">    thread_B.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread_A</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> Object LockA;</span><br><span class="line">  <span class="keyword">public</span> Object LockB;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Thread_A</span><span class="params">(Object LockA, Object LockB)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.LockA = LockA;</span><br><span class="line">    <span class="built_in">this</span>.LockB = LockB;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (LockA) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread_A get LockA&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (LockB) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread_A get LockB&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread_B</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> Object LockA;</span><br><span class="line">  <span class="keyword">public</span> Object LockB;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Thread_B</span><span class="params">(Object LockA, Object LockB)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.LockA = LockA;</span><br><span class="line">    <span class="built_in">this</span>.LockB = LockB;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (LockB) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread_B get LockB&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (LockA) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread_B get LockA&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>为Go应用程序添加图标</title>
    <url>/static-html/2023/03/21/Cookie/%E4%B8%BAgo%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="环境准备">环境准备</h2>
<ul>
<li><a href="https://github.com/akavel/rsrc">rsrc可执行文件</a></li>
<li>ico图片</li>
<li>可build的go项目</li>
</ul>
<h2 id="模板">模板</h2>
<p>创建一个名为 <code>main.exe.manifest</code>的文件 内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span> <span class="attr">manifestVersion</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">assemblyIdentity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;1.0.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">processorArchitecture</span>=<span class="string">&quot;x86&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;controls&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;win32&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">assemblyIdentity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependentAssembly</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">assemblyIdentity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;win32&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;Microsoft.Windows.Common-Controls&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">version</span>=<span class="string">&quot;6.0.0.0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">processorArchitecture</span>=<span class="string">&quot;*&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">publicKeyToken</span>=<span class="string">&quot;6595b64144ccf1df&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">language</span>=<span class="string">&quot;*&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">assemblyIdentity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependentAssembly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsrc -arch amd64 -manifest main.manifest -ico main.ico -o main.syso</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go build</span><br></pre></td></tr></table></figure>
<p>这样就成功了 其实还是很简单的就是说 我们可以写一个模板 将其简化</p>
]]></content>
  </entry>
  <entry>
    <title>将文件拖到Exe程序上,发生了什么?</title>
    <url>/static-html/2023/03/21/Cookie/%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%96%E5%88%B0exe%E7%A8%8B%E5%BA%8F%E4%B8%8A%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>如何进行推断</h1>
<p>很简单,通过print之类的输出信息啊</p>
<p>错.因为你的程序会在结束后立即关闭窗口,你根本就来不及,当然了你会说 可以让窗口sleep啊,对的? 这里我用go是没有办法通过就是sleep暂停的 当然了 这里是go的问题.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/KM911/oslib&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;path&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RunPath</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	_, fullFilename, _, _ := runtime.Caller(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> path.Dir(fullFilename)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Info := <span class="string">&quot;&quot;</span></span><br><span class="line">	Info = Info + <span class="string">&quot;cmdpath is &quot;</span> + oslib.CmdPath()</span><br><span class="line">	Info = Info + <span class="string">&quot; \nrunpath is &quot;</span> + RunPath()</span><br><span class="line">	cwd, _ := os.Getwd()</span><br><span class="line">	Info = Info + <span class="string">&quot; \ncwd is &quot;</span> + cwd</span><br><span class="line">	Info = Info + <span class="string">&quot; \nos.Args is &quot;</span> + os.Args[<span class="number">0</span>]</span><br><span class="line">	Info = Info + <span class="string">&quot; \nos.Args is &quot;</span> + os.Args[<span class="number">1</span>]</span><br><span class="line">	os.WriteFile(<span class="string">&quot;test.txt&quot;</span>, []<span class="type">byte</span>(Info), <span class="number">0666</span>)</span><br><span class="line">	<span class="comment">// 卡死</span></span><br><span class="line">	time.Sleep(<span class="number">100000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将一个其他地方的文件拖给它后,得到这样的txt文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">cmdpath is D:\SOFT\BIN </span><br><span class="line">runpath is D:/CODE/go/snap </span><br><span class="line">cwd is D:\SOFT\BIN </span><br><span class="line">os.Args is D:\CODE\go\snap\test.exe </span><br><span class="line">os.Args is D:\SOFT\BIN\video.go</span><br></pre></td></tr></table></figure>
<p>很明显了 首先 我们的参数1 就是我们程序的绝对路径  参数2 是你拖动给我的文件 或者文件的绝对路径</p>
<p>关键是 这里的cmdpath 和 runpath 和 cwd</p>
<p>也就是我们的拖动文件的位置 ,知道该如何进行就是一个打包了吧.</p>
<h1>总结一下就是</h1>
<p>拖动文件带来的是绝对路径,Args[0] 是接受的一方,通常是exe程序,Args[1]是被拖动的文件,可能是图片或者视频等其他任何东西.</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象手册</title>
    <url>/static-html/2023/03/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>手册的作用</h1>
<p>面向对象是一种编程范式,不是哪一种编程语言的专属,不过不同的编程语言对于一些具体的实现上存在差异<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p>
<h1>三大特点</h1>
<ul>
<li>封装<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li>
<li>继承<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li>
<li>多态<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></li>
</ul>
<h1>类 和 对象</h1>
<p>表征 和 具体的事物.</p>
<h1>对象成员 对象方法</h1>
<p>对象的属性,比如people的age,gender,都可以成为对象成员.</p>
<p>对象方法,和对象有关的函数.</p>
<p>我们通过将对象成员和对象方法组合成为一个类,就是封装.</p>
<h1>静态成员 静态方法</h1>
<p>静态就是不在和对象绑定在一起,而是和类绑定在一起.</p>
<p>通常情况下,静态</p>
<h1>继承</h1>
<h1>多态</h1>
<h1>抽象类 抽象方法</h1>
<p>主要是为了实现多态,通过一个基类</p>
<h1>JAVA 实践</h1>
<p>java是一门面向对象的编程语言,其设计模式被大家广泛实践</p>
<h1>对象</h1>
<h2 id="构造函数">构造函数</h2>
<p>首先我们需要知道,java中是不存在手动的内存管理机制,依赖于jvm的gc,所以java中就不存在析构函数这个概念–因为你无法决定这个对象内存空间的释放.</p>
<ul>
<li>无参构造函数</li>
</ul>
<p>主要的意义是为了帮助对象自身的属性进行初始化.这里的第二行就会报错了,原因是i没有初始化.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i ;</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(j);</span><br></pre></td></tr></table></figure>
<p>而对于一个对象来说,即使你没有创建构造函数,编译器会自动为你生成一个构造函数进行对象属性的初始化.通常会将对象的默认值设置为null,int则为0,float为0.0.</p>
<table>
<thead>
<tr>
<th>type</th>
<th>default_value</th>
</tr>
</thead>
<tbody>
<tr>
<td>object</td>
<td>bull</td>
</tr>
<tr>
<td>int long</td>
<td>0</td>
</tr>
<tr>
<td>float double</td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>U0000</td>
</tr>
</tbody>
</table>
<p>每一个类都会自动生成一个无参的构造函数,前提是你没有对构造函数进行重载.</p>
<p>如果你创建了一个有参的构造函数,但是没有编写无参构造函数,就会报错.</p>
<h2 id="this-和-super">this 和 super</h2>
<p>this 集合本身 super 超集 这样其实就好理解和区分了.</p>
<p>和C++一样,优先执行基类或者说是父类的构造函数.(我这里默认大家就是有一定的C++语言基础的)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">如何用代码去体现自己的思考我看来才是最复杂的不是吗?</span><br></pre></td></tr></table></figure>
<h3 id="通过this去调用构造函数">通过this去调用构造函数</h3>
<p>Object类</p>
<p>java中任何一个类都直接或者间接继承于Object类</p>
<h2 id="重要的方法">重要的方法</h2>
<h1>枚举类</h1>
<h1>包装类</h1>
<p>warpper</p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>对象数据数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>Interg</td>
</tr>
<tr>
<td>boolen</td>
<td>Boolen</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>数据类型转换</h1>
<p>对象数据类型 ———字符串</p>
<p>这里其实和我们</p>
<h1>异常处理</h1>
<p>其实你是会异常处理的,不过没有怎么见过java中的异常类型</p>
<ul>
<li></li>
</ul>
<h1>String</h1>
<ul>
<li>string 只有同一个环境空间 如果存在两个相同的字符串 就会 出现这个问题 就是</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1>ADT</h1>
<ul>
<li>dict 一般是 一对一</li>
<li>map 可以是一对多</li>
<li>arraylist 数据类型可变的  数组</li>
<li>venctro 数据类型不可变的  数组</li>
<li>set 内部数据不可重复</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList：基于动态数组实现，支持快速随机访问，插入和删除元素效率较低。</span><br><span class="line"></span><br><span class="line">LinkedList：基于双向链表实现，支持快速插入和删除元素，随机访问元素效率较低。</span><br><span class="line"></span><br><span class="line">Vector：与ArrayList类似，但是是线程安全的，因此效率较低。</span><br><span class="line"></span><br><span class="line">Stack：基于Vector实现，是一种后进先出的数据结构。</span><br><span class="line"></span><br><span class="line">CopyOnWriteArrayList：基于可重入锁实现，是一种线程安全的List，支持快速随机访问，但是插入和删除元素效率较低。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap：基于哈希表实现，支持快速随机访问，插入和删除元素效率较高，但是不保证元素的顺序。</span><br><span class="line"></span><br><span class="line">TreeMap：基于红黑树实现，支持按照元素的自然顺序或者指定的比较器顺序遍历元素。</span><br><span class="line"></span><br><span class="line">LinkedHashMap：基于哈希表和双向链表实现，保证元素的插入顺序和访问顺序一致。</span><br><span class="line"></span><br><span class="line">WeakHashMap：基于哈希表实现，但是键是弱引用，当键不再被引用时，会被自动从Map中删除。</span><br></pre></td></tr></table></figure>
<p>关键是我们需要知道什么时候该使用何种数据类型 你懂吧</p>
<h1>多线程</h1>
<p>并发编程</p>
<h2 id="如何使用">如何使用</h2>
<ul>
<li>继承一个线程类 Thread</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">theadertest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PrintNum</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintNum</span>();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="comment">// 这里是下面的hell先输出 说明不再是阻塞的了 我们成功的并发了 哈哈哈</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hell&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintNum</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="comment">// 这个重载是必要的 并且不要携带参数 这里的通信是一个问题</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>实现runable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Run</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Run</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">newt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t);</span><br><span class="line">        newt.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hell&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i = &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="参数传递">参数传递</h2>
<ul>
<li>获取线程运行结果</li>
</ul>
<p>线程的常用方法</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230328142413350.png" alt="image-20230328142413350" /></p>
<p>当然了线程的优先级并不是绝对的,也就是说就算你的优先级很高,也并一定就是一直在运行的,可以理解为就是提高中奖概率</p>
</li>
</ul>
<h1>泛型</h1>
<p>其实就是在c++中模板函数 作用是一样的 我目前还不知道具体的使用场景,这里就先知道如何使用</p>
<p>主要有两类 分别是泛型类和泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tem</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 为什么需要使用泛型 可以让我们的代码更加的灵活 我们这里的学生分数可以是各种不同的形式</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">math_student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    math_student.MathTeacher(<span class="number">100</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">chinese_student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    chinese_student.ChineseTeacher(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">english_student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    english_student.EnglishTeacher(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> String Teacher;</span><br><span class="line">  <span class="keyword">private</span> T score;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MathTeacher</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.Teacher = <span class="string">&quot;Math&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ChineseTeacher</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.Teacher = <span class="string">&quot;Chinese&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">EnglishTeacher</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.Teacher = <span class="string">&quot;English&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> T <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(T score)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student [Teacher=&quot;</span> + Teacher + <span class="string">&quot;, score=&quot;</span> + score + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>反射</h1>
<p>反射可以让你获取/修改类的私有属性和方法 这里我们还是只给出如何使用的例子</p>
<ul>
<li>
<p>实例化一个对象</p>
</li>
<li>
<p>获取属性 (无论私有还是公有都是一样的)</p>
</li>
<li>
<p>调用方法 并获取其返回值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">refla</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">DogClass</span> <span class="operator">=</span> Dog.class;</span><br><span class="line">    <span class="comment">// 实例化一个对象 这里还是会调用构造方法</span></span><br><span class="line">    <span class="type">Dog</span> <span class="variable">newDog</span> <span class="operator">=</span> (Dog) DogClass.newInstance();</span><br><span class="line">    <span class="comment">// 获取类的属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Echo_Field</span> <span class="operator">=</span> DogClass.getDeclaredField(<span class="string">&quot;echo&quot;</span>);</span><br><span class="line">    <span class="comment">// private属性就必须要设置为可访问的</span></span><br><span class="line">    Echo_Field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 这里就是获取某一个对象的 private 属性</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">Echo</span> <span class="operator">=</span> (String) Echo_Field.get(newDog);</span><br><span class="line">    System.out.println(<span class="string">&quot;echo is &quot;</span> + Echo);</span><br><span class="line">    <span class="comment">// 调用返回值为空的方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">Void_Echo_Method</span> <span class="operator">=</span> DogClass.getDeclaredMethod(<span class="string">&quot;Echo&quot;</span>);</span><br><span class="line">    Void_Echo_Method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    Void_Echo_Method.invoke(newDog);</span><br><span class="line">    <span class="comment">// 调用返回值不为空的方法 这里需要声明返回值的类型</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">String_Echo_Method</span> <span class="operator">=</span> DogClass.getDeclaredMethod(<span class="string">&quot;Echo&quot;</span>, String.class);</span><br><span class="line">    String_Echo_Method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">echo</span> <span class="operator">=</span> (String) String_Echo_Method.invoke(newDog, <span class="string">&quot;wangwangwang&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;echo is &quot;</span> + echo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">echo</span> <span class="operator">=</span> <span class="string">&quot;wangwang&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    Echo();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">Echo</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(echo);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">Echo</span><span class="params">(String echo)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.echo = echo;</span><br><span class="line">    System.out.println(echo);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.echo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">    Echo();</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>lambda</h1>
<p>学过python了 λ表达式 其实就是更加简单的一个写函数的方法.</p>
<h1>为什么需要使用接口</h1>
<blockquote>
<p>一句话回答: 对于不存在继承关系,但是存在相同功能的类就需要接口.</p>
</blockquote>
<p>例子A:</p>
<p>动物 --&gt; 猫</p>
<p>动物 --&gt; 狗</p>
<pre><code>  存在继承关系的两个类,其内部的方法可以是重载基类,也可以通过实现接口.这种时候你使用继承和接口都是一样的.

  但是接口是无法定义数据成员的,所以无法确定这两个类存在哪些具体的属性.如果该方法是需要获取类的属性的时候,特别是共同的属性的时候,我还是觉得使用继承的方式更好.
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 动物的属性 比如说生活在水里,陆地上,或者是两栖</span></span><br><span class="line">    <span class="comment">// 属于是哪一个物种</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">public</span> String Species;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动物们都可以移动</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    Cat() &#123;</span><br><span class="line">        <span class="built_in">this</span>.Species = <span class="string">&quot;小猫&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.Species+<span class="string">&quot;画梅花&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    Dog()&#123;</span><br><span class="line">        <span class="built_in">this</span>.Species = <span class="string">&quot;小狗&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.Species+<span class="string">&quot;画月牙&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子B</p>
<p>动物 --&gt; 狗</p>
<p>机器 --&gt; 机器狗</p>
<p>两个不存在继承关系,但是存在相同功能的,我们就应该使用接口了.</p>
<p>当然了你还是可以让我们的机器和动物都继承一个基类,该基类有move这个方法.但是是否是所有的机器类都是可以移动的呢?不见得吧,这个时候使用接口就是最合理的选择.</p>
<p>至于你说只有一个类,并且也不会对其进行扩展,就直接定义该方法就好了.</p>
<h2 id="题外话">题外话</h2>
<p>很多人说接口是一种规范,定义了该方法的参数和返回值,这样的回答没有答到点子上,就是为什么用接口,因为使用继承同样可以实现上面的效果.</p>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>只是为了实现一个类,直接在类中写实现就好了.</p>
</li>
<li>
<p>当两个类存在相同的属性和方法时,使用继承.</p>
</li>
<li>
<p>当两个类不存在继承关系,但是具有相同的功能,使用接口.</p>
<pre><code> 接口提供了一种更强的抽象能力,不再依靠相同的基类而存在.如果你的需求完全可以通过继承实现,就没有必要逼着自己去实现接口.
</code></pre>
</li>
</ul>
<p>这里其实我们应该开始就是使用mybitas</p>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>如c++存在析构函数,java中因为内存管理是交给jvm的,导致无法控制一个对象内存回收的时间,自然就将析构函数移除了;python中构造函数是不能重载的,甚至都没有重载这个概念,当然你还是可以通过一些手段去实现罢了,因为没有提供重载的必要性. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>通过对象和方法,将具体的变量和实现组合到一起,不仅可以提高开发效率,还可以提高隐私性. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>通过继承,复用基类中的成员和方法,同时为多态提供实现方式. <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>接受相同的消息,做出不同的响应. <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/static-html/2023/03/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>设计模式</h1>
<p>前人的经验.</p>
<h1>单例模式</h1>
<p>一个类只能有一个对象/实例.</p>
<p>这里不是说你只在你的程序中只进行一次 new的操作导致只有一个对象,而是通过将对象本身设置为类的属性,强制保证了对象的唯一性.</p>
<h2 id="实现方式">实现方式</h2>
<ul>
<li>饿汉式</li>
</ul>
<ol>
<li>构造函数为private</li>
<li>自己的实例作为自己的属性 static</li>
<li>返回自己实例的方法 static</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数为private后 就无法通过new去创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Book</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Book</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    <span class="comment">// 我们现在只能通过getInstance这个静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Book <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>懒汉式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Bank <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">return</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="对比分析">对比分析</h2>
<ul>
<li>饿汉式在类被加载时就创建了对象,懒汉式只有调用getInstance方法才会创建.前者会占据内存更多的时间,但是它是并发安全的(你就不该在一个并发的程序里写创建对象这种事情)</li>
<li>其实差别不是很大</li>
</ul>
<h1>抽象模板</h1>
<p>额,这里其实就是创建一个虚基类,然后继承,重写,指向之类对象的父类指针</p>
<p>因为java中并没有template这样的关键字,我就认为他是在利用抽象类,其实也不对,只是实现方式不太一样.</p>
<p>这里我只先给出一个抽象类继承的例子.</p>
<p>这里的例子中,我们创建了一个虚基类<code>PayMent</code>,并继承它创建了一个<code>Alipay</code>,我们也可以创建<code>wechatpay</code>,我们可以将注意力放到就是具体的支付流程实现上,而不是每一个都需要去重写一次流程,当然了这里其实应该利用基类指针的.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abstracttest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Alipay</span> <span class="variable">pay</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Alipay</span>();</span><br><span class="line">        pay.PayAction(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PayMent</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> money;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span>   <span class="title function_">CheckMoney</span><span class="params">()</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span>  <span class="title function_">Pay</span><span class="params">(<span class="type">int</span> price)</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">SaveMoney</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PayAction</span><span class="params">(<span class="type">int</span> price)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.CheckMoney();</span><br><span class="line">         <span class="built_in">this</span>.Pay(price);</span><br><span class="line">         <span class="built_in">this</span>.SaveMoney();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span> <span class="keyword">extends</span> <span class="title class_">PayMent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CheckMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询支付宝账户余额 访问支付宝的api&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.money = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Pay</span><span class="params">(<span class="type">int</span> price)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;支付中&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.money = <span class="built_in">this</span>.money - price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SaveMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;账户剩余金额为&quot;</span>+<span class="built_in">this</span>.money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">七大设计原则（SOLID原则）是面向对象设计中的一组指导性原则，这些原则旨在帮助我们编写易于维护、可扩展和可重用的代码。这些原则包括：</span><br><span class="line"></span><br><span class="line">单一职责原则（Single Responsibility Principle，SRP）：一个类只负责单一的职责。</span><br><span class="line"></span><br><span class="line">开放封闭原则（Open-Closed Principle，OCP）：一个软件实体应该是开放扩展的，但是关闭修改的。</span><br><span class="line"></span><br><span class="line">里式替换原则（Liskov Substitution Principle，LSP）：子类应该能够替换掉它们的基类（父类）。</span><br><span class="line"></span><br><span class="line">接口隔离原则（<span class="keyword">Interface</span> Segregation Principle，ISP）：客户端不应该依赖于它不需要使用的接口。</span><br><span class="line"></span><br><span class="line">依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖于低层模块，它们都应该依赖于抽象。这里其实不是很理解</span><br><span class="line"></span><br><span class="line">迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象有尽可能少的了解。</span><br><span class="line"></span><br><span class="line">组合<span class="regexp">/聚合复用原则（Composition/</span>Aggregation Reuse Principle，CARP）：优先使用组合（has-a）或聚合（contains-a）关系，而不是继承关系来实现代码复用。</span><br></pre></td></tr></table></figure>
<h3 id="开放封闭原则">开放封闭原则</h3>
<p>其实就是利用指向基类的指针去求解就号了</p>
<h3 id="里氏替换原则-LSP">里氏替换原则 LSP</h3>
<p>我们运行子类有自己新的特性,并且完全兼容父类.</p>
<ol>
<li>只能重写抽象方法</li>
<li>是否可以改变非抽象方法的实现细节呢?</li>
<li>父类可以被子类代替 任何基类出现的地方,子类一定可以代替</li>
<li>抽象方法的返回值范围只能缩小 不能放大</li>
</ol>
<h4 id="案例">案例</h4>
<p>写一个发送http请求的工具,具有可移植性.</p>
<h1>错误处理方式</h1>
<p>不区分错误类型。</p>
]]></content>
  </entry>
  <entry>
    <title>Css机器合集</title>
    <url>/static-html/2023/03/18/CSS%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>Css 技巧合集</h1>
<p>这里我还是想可以搭建一个就是我们的runcode 开始去了解一下好吗 这里就是交给你一个任务就好了 不是吗 其实还是不错的</p>
<h2 id="通用css">通用css</h2>
<p>其实主要目的是为了消除自带的不好的样式,这样其实是最简单的说.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消除滚动条">消除滚动条</h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现渐变色下划线">实现渐变色下划线</h2>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Why You Need to Learn English</title>
    <url>/static-html/2023/03/18/English/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>观点</h1>
<p>这里只是给出一些就是观点和例子</p>
<p><a href="https://www.youtube.com/watch?v=sQEWEPIHLzQ">史嘉琳 回音学习法</a></p>
<ol>
<li>你的发音需要比较标准 这样别人才可以听懂你说的话 not need 100% but at least 80%</li>
<li>echo listen and repeat just in 10 minius</li>
</ol>
<p><a href="https://www.youtube.com/watch?v=d0yGdNEWdn0">Learn English in 6 monuth</a></p>
<ul>
<li>forget is right</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=NiTsduRreug&amp;t=4s">how do we acquire english teh same way</a></p>
<ul>
<li>motivate</li>
<li>self</li>
</ul>
<p><a href="https://www.youtube.com/watch?v=J_EQDtpYSNM">How to Learn a Language: INPUT (Why most methods don’t work)</a></p>
<p><a href="https://www.youtube.com/watch?v=NVNf1Du3U5g">英式音标</a></p>
<p><a href="youtube.com/watch?v=zRFFvCrlf1w">美式音标</a></p>
<h1>装 你 吗 ?</h1>
<p>学英语 和 专业技能 其他的东西都不是很重要</p>
]]></content>
  </entry>
  <entry>
    <title>Spring入门教程</title>
    <url>/static-html/2023/03/16/spring%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>知道你在学什么</h1>
<p>额,一开始我就把spring和springboot两个搞混淆了.</p>
<p>我们现在学习就是直接去学习springboot就好了,配置相对较为简单不是吗?</p>
<p>其他的东西你是已经有经验了对吧,就不重点开始将了</p>
<h1>环境搭建</h1>
<p>讲真的,java的环境搭建应该是我目前为止,看到最为麻烦的了,其他的语言都可以通过命令行输入几条简单的命令就可以解决,但是java不行,有的时候甚至需要你自己去修改pom文件去选择你要使用的版本,我真的不是很喜欢,不过没有办法啊,你就是需要学会这些东西不是吗?</p>
<h2 id="使用idea">使用idea</h2>
<p>假设我们现在的技术栈是 springboot +junit+ mysql + mybatis_plus + lombok</p>
<p>这里我们先一步一步的来并且认识一下配置文件.</p>
<h3 id="网络不好的我们">网络不好的我们</h3>
<p>因为网络问题 所以我们需要使用的就是阿里云的镜像服务</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>start.aliyun.com</span><br></pre></td></tr></table></figure>
<h3 id="spring-web">spring web</h3>
<p>在创建项目的时候选择spring web即可</p>
<p>这里你只需要确保就是你的maven下载完毕即可</p>
<p>这里我并不想开始讲REST风格的api就算了,你可以直接运行我们application文件.</p>
<h3 id="Junit">Junit</h3>
<p>这个其实已经和我们的spring高度绑定了不需要你自己去配置了已经.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="mysql-mybatis">mysql + mybatis</h3>
<p>这两个放到一起讲的原因很简单啊 一个是数据库的驱动,一个是orm框架,两个需要配合着使用.</p>
<p>这里存在一个mysql的版本问题,就是大家不是很想更新我们的数据库导致对应的驱动开发和适配工作也没有很好的推进,就导致你如果使用8.0以上版本的驱动很有可能就是找不到包,就会pom就会报错的结果.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1>开始解析参数</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="comment">//    开始解析参数 </span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两种格式 第一种</p>
<ul>
<li>query</li>
<li>param</li>
</ul>
<p>body又有好几种了 就是说.</p>
<p>这里其实是一个反思吧 就是可以看出来你其实没有很好的学习 就是模仿才是学习的第一步  而不是你自己去抓瞎 不是吗?至少你看上去可以学习到很多东西都是可以的 他还记得我的课程表 不是吗</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>发布自己的Go-Package</title>
    <url>/static-html/2023/03/16/Github/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84go-package/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>理由</h1>
<p>写代码写久了,自然就会有一些自己的东西在这里</p>
<h1>流程概览</h1>
<ul>
<li>创建GitHub仓库</li>
<li>go mod init</li>
<li>编写package</li>
<li>上传到GitHub</li>
<li>通过tag进行发布</li>
<li>go get -u url 进行使用</li>
</ul>
<h1>注意的细节</h1>
<p>首先</p>
<p>go mod init 的地址不要带.git</p>
<p>最好是可以做到名称一致,仓库的名称,package的名称都是一样的,我这里就都是oslib 并且请不要使用-这个符号.比如你的GitHub仓库地址是<code>https://github.com/KM911/oslib.git</code>,你就应该执行 <code>go mod init github.com/KM911/oslib</code></p>
<p>然后创建一个文件比如说oslib.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oslib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将文件路径转换为go文件路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToGoFile</span><span class="params">(path <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> path + <span class="string">&quot;.go&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就可以commit了,但是在push之前,你应该还需要做一件事情,就是将打上tag.</p>
<p>一般情况下,tag 是 vx.x.x 这样的形式,比如v0.0.1这样存在,其实就是版本号一样的存在.</p>
<h1>引用</h1>
<p>这里你就可以将remote应用了</p>
<p>创建了一个新的项目 ,main.go文件如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/KM911/oslib&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   oslib.Run(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">package</span> main</span><br></pre></td></tr></table></figure>
<h1>如果remote更新了会发生什么结果</h1>
<p>你可以随时使用 <code>go mod tidy</code> 获取最新的修改</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql环境搭建</title>
    <url>/static-html/2023/03/12/BACKEND/MySql%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>MySql 环境搭建</h1>
<h1>环境搭建</h1>
<p>我不想花费很多的精力在这种事情上了 这是运维的事情</p>
<p>我们应该将重点放在数据库的设计上 这里需要我们立即业务</p>
<h2 id="开启远程连接">开启远程连接</h2>
<p>首先 我们的mysql密码是在哪里的</p>
<p>本来是在安装的时候设置的 但是在服务器端是一个什么情况 这里不理解 最好笑的是我不能本地登录 只能远程登录了 哈哈哈哈</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里结果是 不能自己在本地 进入 了 我笑死了 哈哈哈</p>
<p>我们是用ip连接的 只需要输入ip 就好了</p>
<h2 id="无法用密码登录">无法用密码登录</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">ALTER</span> <span class="variable constant_">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="variable constant_">IDENTIFIED</span> <span class="variable constant_">BY</span> <span class="string">&#x27;@Dzg15484&#x27;</span> <span class="variable constant_">PASSWORD</span> <span class="variable constant_">EXPIRE</span> <span class="variable constant_">NEVER</span>; #修改加密规则</span><br><span class="line"><span class="variable constant_">ALTER</span> <span class="variable constant_">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="variable constant_">IDENTIFIED</span> <span class="variable constant_">WITH</span> mysql_native_password <span class="variable constant_">BY</span> <span class="string">&#x27;@Dzg15484&#x27;</span>; #修改密码</span><br><span class="line"><span class="variable constant_">FLUSH</span> <span class="variable constant_">PRIVILEGES</span>; #刷新数据</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/static-html/2023/03/12/BACKEND/Nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><ol>
<li>关于静态文件托管的问题</li>
</ol>
<p>nginx中可以利用 location +root 实现静态文件服务 web框架中也提供了静态文件服务static 请求采用哪一种更好呢?</p>
<ol start="2">
<li>nginx中有</li>
</ol>
<h1>Nginx</h1>
<p>我们先不用管它是什么 我们先看看我们如何使用它 我们现在有了一台服务器 假设它的ip是 192.168.1.5 现在你用浏览器去访问它 你会发现得不到任何的响应.这很好理解,你的服务器并不知道是否需要回应的你的消息以及如何回应.我们可以使用nginx进行一些简单的代理,就可以得到消息了.</p>
<p>现在我们开始进行配置nginx,让你可以访问你的服务器.</p>
<h2 id="hello-world">hello world</h2>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;&#125;</span><br><span class="line">http&#123;</span><br><span class="line">  <span class="attribute">include</span> mime.types;</span><br><span class="line">  <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">  <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="attribute">root</span> /www/wwwroot/app/public/BLOG ;</span><br><span class="line">      <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基础命令">基础命令</h2>
<h3 id="location">location</h3>
<p>假设我们的 css文件都是 web/css/*.css 这样的形式存储的 我们可以写这样的语句 原因和简单 因为我们的 这里它还是会将全部的 url作为参数 而不是匹配后的</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /css&#123;</span><br><span class="line">	<span class="attribute">root</span> /www/web</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们去看看吧 它存放在我们的nginx目录中的</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">types</span> &#123;</span><br><span class="line">    text/<span class="attribute">html</span>                                        html htm shtml;</span><br><span class="line">    text/<span class="attribute">css</span>                                         css;</span><br><span class="line">    text/<span class="attribute">xml</span>                                         xml;</span><br><span class="line">    image/<span class="attribute">gif</span>                                        gif;</span><br><span class="line">    image/<span class="attribute">jpeg</span>                                       jpeg jpg;</span><br><span class="line">    application/<span class="attribute">javascript</span>                           js;</span><br><span class="line">    application/atom+<span class="attribute">xml</span>                             atom;</span><br><span class="line">    application/rss+<span class="attribute">xml</span>                              rss;</span><br><span class="line"></span><br><span class="line">    text/<span class="attribute">mathml</span>                                      mml;</span><br><span class="line">    text/<span class="attribute">plain</span>                                       txt;</span><br><span class="line">    text/vnd.sun.j2me.app-<span class="attribute">descriptor</span>                 jad;</span><br><span class="line">    text/vnd.wap.<span class="attribute">wml</span>                                 wml;</span><br><span class="line">    text/x-<span class="attribute">component</span>                                 htc;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<p>很明显 这里是为了说明文件的类型  错 而是为了决定如何处理我们的文件 是对该文件进行下载 还是运行js 或者渲染html</p>
<p>错误处理</p>
<h3 id="端口管理">端口管理</h3>
<p>我们在8080端口运行了一个springboot的项目 我们当然可以让用户直接通过8080端口访问,但是这样并不好,首先是用户需要记住你的端口号,这非非常麻烦,其次是直接将端口暴露出来本身就是一个十分危险的行为.</p>
<p>这里如果你的springboot项目是80端口的,也可以直接使用sprinboot而不必使用nginx做一个代理.但是如果你的服务上有很多服务,它们分别运行在不同的端口上,这个时候你就需要利用我们的 <code>nginx</code>进行端口的一个管理了,其实就是将不同的 <code>url</code> 解析到不同的端口上去.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /tinypicog&#123;</span><br><span class="line">	<span class="attribute">proxy_pass</span> localhost:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">localtion</span> /proxy&#123;</span><br><span class="line">	<span class="attribute">proxy_pass</span> localhost:<span class="number">8000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sendfile">sendfile</h3>
<p>是否进行缓存 还是直接发送 这里很明显对于大批量请求 还是需要做缓存的 小请求可以就是</p>
<h3 id="GZip-Br">GZip Br</h3>
<p>这是一种压缩文件的格式,可以减少对于网络带宽的压力.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span>  <span class="number">1k</span>;   <span class="comment"># 当文件大小大于1k才会开启压缩</span></span><br><span class="line"><span class="attribute">gzip_buffers</span>     <span class="number">4</span> <span class="number">16k</span>;   <span class="comment"># buffer </span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;   <span class="comment"># 对 http1.1 进行压缩</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">5</span>;  <span class="comment"># 压缩的程度 1-9 数字越大 压缩程度越高,但是会增大cpu的占用</span></span><br><span class="line"><span class="attribute">gzip_types</span>     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;  <span class="comment"># 针对何种格式的文件进行压缩    </span></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span>   expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line"><span class="attribute">gzip_disable</span>   <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="高级命令">高级命令</h2>
]]></content>
  </entry>
  <entry>
    <title>Vue项目的常见报错汇总</title>
    <url>/static-html/2023/03/12/BACKEND/%E7%BC%BA%E5%B0%91vue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="缺少-vitejs-plugin-vue">缺少<code>@vitejs/plugin-vue</code></h2>
<p>出现了上面的原因其实很简单</p>
<p>我们的vue其实是不能运行的 需要将其打包变成普通的<code>html</code>文件才可以被浏览器正常解析</p>
<p>所以vue提供了<code>vite</code>这个工具给我们打包 与此同时<code>vite</code>还具有预览的能力 自己提供后端 所以我们需要写一个</p>
<p><code>vite-config.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/static-html/2023/03/12/BOOK/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>理论知识</h1>
<p>页(page) 块 区 组</p>
<h2 id="段（segment）"><strong>段（segment）</strong></h2>
<p>段(Segment)分为索引段，数据段，回滚段等。其中索引段就是非叶子结点部分，而数据段就是叶子结点部分，回滚段用于数据的回滚和多版本控制。一个段包含256个区(256M大小)。</p>
<p>一个段包含多少区：<strong>256个区</strong></p>
<h2 id="区（extent）"><strong>区（extent）</strong></h2>
<p>区是页的集合，一个区包含64个连续的页，默认大小为 1MB (64*16K)。</p>
<h2 id="页（page）"><strong>页（page）</strong></h2>
<p>页是 InnoDB 管理的最小单位，常见的有 FSP_HDR，INODE, INDEX 等类型。所有页的结构都是一样的，分为文件头(前38字节)，页数据和文件尾(后8字节)。页数据根据页的类型不同而不一样。</p>
<p>操作系统的数据交互的数据块 是4kb的是吗</p>
<p>保证硬盘读写效率，所以就有了“4K对齐”</p>
<p>懂了4K</p>
]]></content>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/static-html/2023/03/12/BOOK/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="顺序表">顺序表</h2>
<blockquote>
<p>线性表是逻辑概念，只要所有的数据在逻辑上是一维的都可以认为是线性表。 线性表包括顺序表（栈，队列等），链表（栈，队列等）。 跟线性表相对的概念应该是树或者堆。 <strong>顺序表是空间概念，指的是所有的数据在存储空间上顺序排列，而跟具体的操作方式无关</strong></p>
</blockquote>
<p>我们说的线性是逻辑上的线性</p>
<p>我们说的顺序是物理上的顺序 连续的内存空间</p>
<p>简单的说 : 数组</p>
<p>特点 : 可以随机访问 在尾部进行插入和删除很方便</p>
<h2 id="链表">链表</h2>
<p>特点 : 无法随机访问 在中间插入和删除很方便 并且可以动态开辟空间</p>
<h2 id="栈">栈</h2>
<p>特点 前进后出 FILO</p>
<p>这里存在不同的实现方式 你可以用顺序表 或者链表实现</p>
<h2 id="队列">队列</h2>
<p>特定 先进先出 FIFO</p>
<p>循环队列</p>
<p>优先队列</p>
<h2 id="串">串</h2>
<p>子串的数目  空串也是串 自己也是串</p>
<p>1+…+ n + 1</p>
<h2 id="树">树</h2>
<h2 id="图">图</h2>
<h2 id="查找">查找</h2>
<h2 id="排序">排序</h2>
]]></content>
  </entry>
  <entry>
    <title>计算机漫游</title>
    <url>/static-html/2023/03/12/BOOK/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%BC%AB%E6%B8%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>性能优化</h1>
<h2 id="函数移动">函数移动</h2>
<p>减少不必要的函数调用 不过搞笑的是 竟然更加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lens</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">const</span> list = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10000000</span> &#125;, <span class="function">(<span class="params">v, k</span>) =&gt;</span> k);</span><br><span class="line">    <span class="keyword">const</span> len = <span class="title function_">lens</span>(list);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        list[i] = list[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> end = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lens</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">const</span> list = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">10000000</span> &#125;, <span class="function">(<span class="params">v, k</span>) =&gt;</span> k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title function_">lens</span>(list); i++) &#123;</span><br><span class="line">        list[i] = list[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> end = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区别不大 主要是因为我们的程序花费时间都在计算上了</p>
<h2 id="循环展开">循环展开</h2>
<p>这个我没有懂</p>
<p>对于我们的 nodejs 我们的代码时是没有经历过优化的不是吗?</p>
<p>就是直接运行了 这对于我们的程序来说 肯定性能更加不好了</p>
<p>目前没有感觉到就是性能上差距 我的问题</p>
]]></content>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/static-html/2023/03/12/BOOK/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="计算机网络的完美老师">计算机网络的完美老师</h2>
<p><a href="https://space.bilibili.com/410739029">中科大-郑老师</a></p>
<h2 id="DNS-domain-name-system-域名服务器">DNS (domain name system)域名服务器</h2>
<p>将域名 <a href="http://www.baidu.com">www.baidu.com</a> —123.12.78.45 和ip联系起来</p>
<p>其实这个东西也不是很方便啊 哈哈哈</p>
<p>顶级域名 .com .cn .jp .edu .gov</p>
<h2 id="现实中的计算机网络">现实中的计算机网络</h2>
<h3 id="TCP-IP的四层模型">TCP/IP的四层模型</h3>
<p>我不想和你讲很多就是理论知识,因为你其实已经听过太多了就是说,我们来找一些实际生活中的计算机网络</p>
<p>我们是如何上网的,从www.baidu.com后发生了什么?</p>
<p>首先这里涉及到了DNS解析,我们就写不讲</p>
<p>假如我们直接访问一个ip,假设是 192.168.1.1 这个其实是内网ip,我们就假设它是一个外网的ip就好了</p>
<p>我们的电脑是连着wifi也好,连着网线也罢,其实都是没有公网ip的,真正有公网ip的是</p>
<p><img src="https://pic2.zhimg.com/80/v2-9120fb10ff256120099cd152799fe309_720w.webp" alt="" /></p>
<p>我们作为一个后端的人其实就接触了很多应用层的</p>
<p>应用层  HTTP、FTP、Telnet、DNS、SMTP 这些其实都是协议  这些都是基于TCP的协议</p>
<p>传输层  TCP  UDP</p>
<p>网络层  IP 协议 <strong>DHCP协议</strong></p>
<p>网络接口层 MAC 地址</p>
<p>其实我们电脑只能拿到就是应用层的信息 通常情况下 这里是一个http的 我们最多只能管理就是传输层和应用层,其余的是</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP1<span class="number">.1</span></span><br><span class="line"><span class="function"><span class="title">header</span></span> ...</span><br><span class="line"><span class="function"><span class="title">BOdy</span></span> ...</span><br></pre></td></tr></table></figure>
<p>其实我们应该一点一点加上去 每一层其实都有很多信息的 我们应该知道就是</p>
<p>[目标Mac地址] [源地址] [类型] [帧数据]</p>
<p>[目标IP] [源ip]</p>
<p>[TCP的头]</p>
<p>[GET /baidu.com HTTP1.1 ]</p>
<p>…</p>
<h2 id="TCP头的详情">TCP头的详情</h2>
<p>问题来了 这个是谁解析的 其实这里就是到网卡了吧 都需要对应的网卡了</p>
<p><img src="https://img-blog.csdnimg.cn/20200415235320394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MyNjAzODk4MjYw,size_16,color_FFFFFF,t_70" alt="" /></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>长度</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>源端口</td>
<td>16比特</td>
<td>源端口，标识哪个应用程序发送</td>
</tr>
<tr>
<td>目的端口</td>
<td>16比特</td>
<td>目的端口，标识哪个应用程序接收</td>
</tr>
<tr>
<td>序列号</td>
<td>32比特</td>
<td>序号字段。TCP链接中传输的数据流中每个字节都编上一个序号。序号字段的值指的是本报文段所发送的数据的第一个字节的序号。</td>
</tr>
<tr>
<td>确认号</td>
<td>32比特</td>
<td>确认号，是期望收到对方的下一个报文段的数据的第1个字节的序号，即上次已成功接收到的数据字节序号加1。只有ACK标识为1，此字段有效。</td>
</tr>
<tr>
<td>首部长度</td>
<td>4比特</td>
<td>首部长度指出TCP报文段的数据起始处距离TCP报文段的起始处有多远，以32比特（4字节）为计算单位。最多有60字节的首部，若无选项字段，正常为20字节。</td>
</tr>
<tr>
<td>保留位</td>
<td>4比特</td>
<td>必须填0</td>
</tr>
<tr>
<td>CWR</td>
<td>1比特</td>
<td>拥塞窗口减（发送方降低它的发送速率）</td>
</tr>
<tr>
<td>ECE</td>
<td>1比特</td>
<td>ECN回显（发送方收到一个更早的拥塞通告）</td>
</tr>
<tr>
<td>URG</td>
<td>1比特</td>
<td>紧急指针有效标识。它告诉系统此报文段中有紧急数据，应尽快传送（相当于高优先级的数据）。很少被使用</td>
</tr>
<tr>
<td>ACK</td>
<td>1比特</td>
<td>确认序号有效标识。只有当ACK=1时确认号字段才有效。当ACK=0时，确认号无效。</td>
</tr>
<tr>
<td>PSH</td>
<td>1比特</td>
<td>标识接收方应该尽快将这个报文段交给应用层。接收到PSH = 1的TCP报文段，应尽快的交付接收应用进程，而不再等待整个缓存都填满了后再向上交付。</td>
</tr>
<tr>
<td>RST</td>
<td>1比特</td>
<td>重建连接标识。当RST=1时，表明TCP连接中出现严重错误（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立连接。</td>
</tr>
<tr>
<td>SYN</td>
<td>1比特</td>
<td>同步序号标识，用来发起一个连接。SYN=1表示这是一个连接请求或连接接受请求。</td>
</tr>
<tr>
<td>FIN</td>
<td>1比特</td>
<td>发端完成发送任务标识。用来释放一个连接。FIN=1表明此报文段的发送端的数据已经发送完毕，并要求释放连接。</td>
</tr>
<tr>
<td>窗口大小</td>
<td>16比特</td>
<td>窗口：TCP的流量控制，窗口起始于确认序号字段指明的值，这个值是接收端正期望接收的字节数。窗口最大为65535字节。</td>
</tr>
<tr>
<td>校验和</td>
<td>16比特</td>
<td>校验字段，包括TCP首部和TCP数据，是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。在计算检验和时，<code>要在TCP报文段的前面加上12字节的伪首部</code>。</td>
</tr>
<tr>
<td>紧急指针</td>
<td>16比特</td>
<td>紧急指针，只有当URG标志置1时紧急指针才有效。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。紧急指针指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）。</td>
</tr>
<tr>
<td>选项</td>
<td></td>
<td>选项字段。TCP协议最初只规定了一种选项，即<strong>最长报文段长度</strong>（数据字段加上TCP首部），又称为MSS。MSS告诉对方TCP“我的缓存所能接收的报文段的数据字段的最大长度是MSS个字节”。 新的RFC规定有以下几种选型：选项表结束，无操作，最大报文段长度，窗口扩大因子，时间戳。 <em>窗口扩大因子</em>：3字节，其中一个字节表示偏移值S。新的窗口值等于TCP首部中的窗口位数增大到（16+S），相当于把窗口值向左移动S位后获得实际的窗口大小。 <em>时间戳</em>：10字节，其中最主要的字段是时间戳值（4字节）和时间戳回送应答字段（4字节）。 选项确认选项：</td>
</tr>
</tbody>
</table>
<h2 id="网络层">网络层</h2>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6c7bfa005acd406625cd6cd7219c144a.png" alt="" /></p>
]]></content>
  </entry>
  <entry>
    <title>有意思的开源项目</title>
    <url>/static-html/2023/03/12/Cookie/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>介绍</h1>
<p><a href="https://github.com/BluePointLilac/ContextMenuManager"></a></p>
<p>可以很方便地管理我们右键打开地菜单</p>
]]></content>
  </entry>
  <entry>
    <title>CET</title>
    <url>/static-html/2023/03/12/English/CET/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><blockquote>
<p>茶拥有5000年的历史。传说，神农氏( Shen Nong)喝开水时，几片野树叶子落进壶里开水顿时散发出宜人的香味。他喝了几口，觉得很提神。茶就这样发现了。自此，茶在中国开始流行。茶园遍布全国，茶商变得富有。昂贵、雅致的茶具成了地位的象征。今天，茶不仅是一种健康的饮品，而且是中国文化的一个组成部分。越来越多的国际游客一边品茶， 一边了解中国文化。</p>
<p>Tea has a history of 5，000 years. One legend goes that when Shen Nong was about to drink some boiled water， a few wild tree leaves fell into the kettle and gave off sweet fragrance. He drank a little and found it very refreshing， which led to the discovery of tea.</p>
<p>Since then， tea became popular in China. Tea gardens ap- peared everywhere， tea merchants became rich， and expensive and graceful tea set even became a symbol of social status.</p>
<p>Today， tea is not only a healthy drink but also part of the Chinese culture. More and more international tourists begin to understand the Chinese culture as they drink tea.</p>
</blockquote>
<blockquote>
<p>Tea, with a history of 5,000 years, has a rich cultural heritage in China. Legend has it that when Shen Nong was about to drink boiled water, some wild tree leaves accidentally fell into his kettle and gave off a sweet fragrance. He found the taste refreshing, which led to the discovery of tea.</p>
<p>This discovery made tea popular in China. Tea gardens sprouted everywhere, tea merchants became wealthy, and expensive and elegant tea sets even became symbols of social status.</p>
<p>Today, tea is not only a healthy drink but also an important part of Chinese culture. As more and more international tourists drink tea, they are beginning to understand and appreciate Chinese culture.</p>
</blockquote>
<blockquote>
<p>七夕节(Double Seventh Festival)是中国最具浪漫色彩的传统节日。每年农历(lunar calendar)七月初七就是七夕节，亦称“乞巧节”。七夕节起源于中国古代牛郎(Cowherd)和织女(Weaver Maid)的爱情神话，他们的故事感动了一代又一代的中国人。许多有情男女会在七夕的晚上祈祷自己的姻缘美满，期望“有情人终成眷属”。近年来，越来越多的都市青年男女把这个节日当作“中国情人节”(Chinese Valentine’s Day)</p>
</blockquote>
<ul>
<li>
<p>地理位置的翻译 从小到大</p>
<p>Province</p>
</li>
</ul>
<p>Yangxin is located in the western part of Huangshi City, Hubei Province.</p>
<blockquote>
<p>春节前夕吃团圆饭是中国人的传统。团圆饭是一年中最重要的晚餐，也是家庭团聚的最佳时机，家人生活在不同地方的家庭尤其如此。团圆饭上的菜肴丰富多样，其中有些菜肴有特殊含义。例如，鱼是不可缺少的一道菜，因为汉语中的“鱼”字和“余”字听上一样。在中国的许多地方，饺子也是一道重要的佳肴，因为饺子象征着财富和好运。== 饺子是财富和好运的象征 这两个是</p>
</blockquote>
<ul>
<li>It is a Chinese tradition to have a family reunion dinner on the eve of the Spring Festival. The reunion dinner is the most important dinner of the year and the best time for family reunion, especially for families living in different places. The dishes served at the reunion dinner are rich and varied, some of which have special meanings. Fish, for example, is an indispensable dish, because the Chinese word for fish (鱼) sounds the same as the word for surplus (余). In many parts of China, dumplings are also an important delicacy because they symbolize wealth and good luck.</li>
</ul>
<blockquote>
<p>It is a Chinese tradition to have a reunion dinner on the eve of Chinese New Year. It is the most important dinner of the year and the best time for family reunion, especially for families living in different places. There are a variety of dishes served at the reunion dinner, some of which have special meanings. For example, fish is an indispensable dish because the Chinese word for “fish” sounds the same as the word for “Yu”. Dumplings are also an important dish in many parts of China, as they symbolize wealth and good luck.</p>
</blockquote>
<p>Dumpings are also a important dish in many part of China, because they symbolize wealth and good luck.</p>
]]></content>
  </entry>
  <entry>
    <title>图表作文</title>
    <url>/static-html/2023/03/12/English/%E5%9B%BE%E8%A1%A8%E4%BD%9C%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><p>首先我们需要描述图片里的内容</p>
<p>As is starkly mirrored in the image that a cruel hunter holding a gun toward an innocent bear. There is a question/statement below/above: what will happen if you fire? Digging into it, we need to consider it seriously. Why we should protect animals? The following reasons can account for this issue.</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221130181527679.png" alt="image-20221130181527679" /></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221130181537026.png" alt="image-20221130181537026" /></p>
<p>It is obvious in the graph/table that the rate/number/amount of Y has undergone dramatic changes. It has gone up/grown/fallen/dropped considerably in recent years (as X varies). At the point of （接近）X1, Y reaches its peak value of …(多少).</p>
<p>With the advance of china`s education system, It is obvious in the chart that the number of family spending on education has undergone dramatic changes. It has gone up in recent years. The following reasons can account for this phenomenon.</p>
<p>First and foremost, there is no doubt that parents pay more attention to their children’s education in that education could cultivate a child`s both personality and character. Therefore, they send their children to study abroad despite the high cost. Moreover, parents prefer enrolling their children in training classes and cram school.</p>
<p>In my personal view, parents for childer`s educational spending is not the more the better. No one can deny that money should spend in the correct way. Only in this way, children could have a both promising and rosy future.</p>
]]></content>
  </entry>
  <entry>
    <title>议论文</title>
    <url>/static-html/2023/03/12/English/%E8%AE%AE%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><p>时间的变化 和 发展相关的话题</p>
<p>With the (development of technology / advance of society /education / economy / healthcare / medicine), it has become less than a phenomenon that == more and more == an increasing number of</p>
<p>As far as I am concerned, I am in line with the opinion that people are supposed to use fewer mobile phones.</p>
<p>The following reasons will account for my view.</p>
<p>话题讨论</p>
<p>There has been a heated debate about whether people should protect the environment.</p>
<p>With regard to the use of PPT, viewpoints vary considerably.</p>
<p>衔接</p>
<p>As far as I am concerned/from my standpoint, I am in line with that people are supposed to protect the environment.</p>
<p>文章结尾</p>
<p>in the nutshell, in light of aforesaid reasons,</p>
<p>the whole teachers should emphasize on the issue of mobile phones. From a long-term point of view, We should bear in mind that it is imperative for us to</p>
<p>take measures to set up a special education system to cultivate and strengthen the sense of work-life balance, which is of great significance to both society and ourselves.</p>
]]></content>
  </entry>
  <entry>
    <title>自己的图床软件</title>
    <url>/static-html/2023/03/12/Github/%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>自己的图床软件</h1>
<p>对标的产品 picgo 和 che那个东西 就是说</p>
<p>功能的扩展 比如说对于网络图片进行迁移到自己的地方</p>
<p>先下载 然后转成webp 再上传 实现我们的</p>
<p><strong>具体实现的功能</strong></p>
<ul>
<li>[x] 上传到自己的服务器 (我不想把数据交给其他人)</li>
<li>[x] 本地的备份保存</li>
<li>[ ] 可以自由的查看和阅览 (html页面设计了)</li>
<li>[x] 网络图片迁移 (先下载 后上传)</li>
</ul>
<p>目前的指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node <span class="attr">D</span>:\<span class="number">1.</span><span class="variable constant_">CS</span>\git_hub\node\typora\tool\picgo.<span class="property">js</span> <span class="string">&quot;http://localhost:3000/&quot;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node &lt;<span class="number">1</span> 你的typora.<span class="property">js</span> 路径&gt; &lt;2 服务器的地址&gt; &lt;3 图片的位置 是typora自动生成的 一般不必担心&gt;</span><br></pre></td></tr></table></figure>
<p>nodejs  使用http.request 下载图片 主要的问题在于 两点 不同的网站的图片下载 格式是不是一样的 其实我们先</p>
<p>主要是我们又要重构了 哈哈哈</p>
<p>一个一个的网站增加不久好了 其实对于我们来说没有什么很多问题 就是处理1MB的视频 对于现在的计算机来说也不算什么 的 我们是可以做到的 加油加油</p>
]]></content>
  </entry>
  <entry>
    <title>体态</title>
    <url>/static-html/2023/03/12/Life/%E4%BD%93%E6%80%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><p>我的背部最近很疼痛 就是不是很舒服 难受死了 不是吗</p>
<h1>体态纠正计划</h1>
<p>我们应该认识到 体态无时不刻在影响着我们 就连睡觉时的姿势在我看来也会影响你</p>
<p>好吧其实是最近 我的腰好痛 所以开始更加重视自己的身体了 不是吗</p>
<h2 id="代码">代码</h2>
<p>其实这里和我们的位子 桌子 等环境右很大的影响</p>
<p><em>寝室里</em></p>
<p>寝室的特点是 桌子的高度很低 所以我用架子将其垫高了 避免需要低头看</p>
<p>同时 我们还需要调整我们的坐姿</p>
<p>屁股稍微出去一点 这样我们就可以将腰给收回来 这个时候其实我们如果 收腹 就会有一个比较好的效果</p>
<p>现在是 头部 就是我们的头 其实是要 往后的 这样可以增加 我们的头和电脑的距离 还可以保持我们的 脊椎曲度 不是吗</p>
<p>好的 这样的就很完美了 不是吗</p>
<p>这样我的头有些缺氧</p>
<p>最好的情况 还是可以将电脑和视线是同高度的 我们的键盘 可以以一个很低的高度  方便我们的手进行输入</p>
<p>这样其实是很理想的情况了 不是吗 不过你是</p>
<p>要求</p>
<p>​	我们的头可以 直接平视屏幕</p>
<p>​	键盘可以是 手垂直的伸长 很好</p>
<p>其实问题 是我们现在不是很会打字不是吗 我们需要联系 对于各种键盘的掌握 不是吗 就是说 我们现在开始吧</p>
<p>这样这个就是春春 不是吗 就 还是太高了 不是吗 我现在就是说 i选哪个2</p>
]]></content>
  </entry>
  <entry>
    <title>知识诅咒</title>
    <url>/static-html/2023/03/12/Word/%E7%9F%A5%E8%AF%86%E8%AF%85%E5%92%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>知识诅咒</h1>
<blockquote>
<p>一句话说明:你没法用一句话向其他不了解这个事物的人解释清楚.</p>
<p>递归了 哈哈哈</p>
</blockquote>
<h2 id="例子">例子</h2>
<p>递归:函数调用函数自己 问题是很可能这个人对于函数不了解 也不知道调用是什么意思.</p>
<p>机器学习: 通过马尔科夫链,线性回归等算法对事件进行建模.</p>
<p>对于学习过随机过程的人,肯定对于像马尔科夫链或者马尔可夫过程很了解,但是对于一个可能连矩阵,积分都没有接触过的人,你很难将这些知识解释给其他人.</p>
<p>我这里的例子可能不是很好,但是也体现了一个问题,即使我学习过这些知识,并且也使用过这些知识,但是我还是无法用简洁的语言将其讲述给其他人.</p>
<h2 id="其他理论">其他理论</h2>
<blockquote>
<p>据说是费曼的思想: 如果你不能用简洁的语言将一个知识描述给其他人,就表明你没有真正意义上学会它.</p>
</blockquote>
<p>这里我个人觉得主要是取决于你对于学会的定义,我觉得只要你可以将知识运用来解决问题,就是学会了,你甚至可以不必知道它背后的原理,你并不需要知道冰箱的制冷原理,你可以利用冰箱制作美味的🍨,当然可以说你学会使用冰箱了,同时你也不能说,你学会制造冰箱了.</p>
<h1>关于知识诅咒的反思</h1>
<p>这里其实就是如何编写教程的问题,很多教程特别是针对初学者的教程,就应该将每一步都说明清楚,于此同时,教程就会变得知识量很少,花费大量的时间,可能都是在讲如果添加环境变量,安装某个软件的内容,真正核心的知识无法被传播.</p>
<p>所以我觉得需要建立一个就是知识体系网络,进行一个链接,针对该问题进行一个比较详细的说明,比如.</p>
<h2 id="搭建个人博客-例子">搭建个人博客(例子)</h2>
<p>我们可以使用hexo搭建自己的静态博客,首先我们需要<a href="https://nodejs.org/en/">安装nodejs</a></p>
<p>当然了这里是访问nodejs的官网,并不是一个知识网络.尽管nodejs的官网中存在就是安装教程.</p>
<p>这里其实本质就是对单个知识进行超链接,文章和文章之间不在是独立的个体,而是一个有机的整体,这里我真的很</p>
]]></content>
      <tags>
        <tag>名词解释</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo_guide</title>
    <url>/static-html/2023/03/12/Guides/hexo-guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>hexo 教程</h1>
<p>时隔半年,我又想起了hexo<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<p>因为过去了半年,自己对于很多事情的看法也发生了变化,比如我觉得博客的核心是里面的内容,而不是封面的妹子有多好看😂 .其实也是收到了比如 <a href="">阮一峰</a> 等人的影响,他们的博客可能并不好看,甚至可以说是丑陋,但是里面的内容深度真的让人拍手叫绝,所以我也开始将精力放到内容上了.</p>
<h2 id="环境配置">环境配置</h2>
<p>hexo是基于nodejs的静态博客生成工具,所以你需要安装nodejs,并将其添加到你的环境变量中.</p>
<h2 id="初始化">初始化</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">init</span></span><br></pre></td></tr></table></figure>
<h2 id="下载主题">下载主题</h2>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<h2 id="配置主题">配置主题</h2>
<p>在_config.yml中修改 theme</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> butterfly</span><br></pre></td></tr></table></figure>
<p>修改基本信息</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">title:</span> 标题</span><br><span class="line"><span class="symbol">subtitle:</span> <span class="comment">&#x27;副标题&#x27;</span></span><br><span class="line"><span class="symbol">description:</span> <span class="comment">&#x27;描述&#x27;</span></span><br><span class="line"><span class="symbol">keywords:</span> <span class="comment">&#x27;关键词&#x27;</span></span><br><span class="line"><span class="symbol">author:</span> 作者</span><br><span class="line"><span class="symbol">language:</span> zh-CN</span><br><span class="line"><span class="symbol">timezone:</span> <span class="comment">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>修改主页链接 就是GitHub pages的url</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">url: https:<span class="regexp">//</span>km911.github.io/BLOG</span><br></pre></td></tr></table></figure>
<p>配置md的模板 (scaffolds/post.md)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"> <span class="comment">#开启数学公式</span></span><br><span class="line"><span class="attr">tags:</span>  <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">cover:</span>  <span class="comment"># 缩略图</span></span><br><span class="line"><span class="attr">categories:</span>  <span class="comment"># 分类</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<h2 id="主题butterfly下的配置">主题butterfly下的配置</h2>
<p>头像</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">follow me的GitHub主页</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 吐槽</span><br><span class="line"></span><br><span class="line">真的很想吐血 有的时候 我们的path是没有用的</span><br><span class="line"></span><br><span class="line">是不是就搞我一下 人糊涂了 都要</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 主题优化</span><br><span class="line"></span><br><span class="line">其实butterfly 已经为我们配置好了很多的优化选项 我们只需要去下载插件 然后开启就好了 </span><br><span class="line"></span><br><span class="line">### 汇总</span><br><span class="line"></span><br><span class="line">* 本地搜索</span><br><span class="line">* 点击特效 </span><br><span class="line">* 数学公式</span><br><span class="line">* 文字统计</span><br><span class="line">* 背景效果</span><br><span class="line">* 音乐播放</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 本地搜索</span><br><span class="line"></span><br><span class="line">### 点击特效</span><br><span class="line"></span><br><span class="line">### 数学公式</span><br><span class="line"></span><br><span class="line">### 文字统计</span><br><span class="line"></span><br><span class="line">### 背景效果</span><br><span class="line"></span><br><span class="line">### 音乐播放</span><br><span class="line"></span><br><span class="line">播放音乐的原理 其实是访问那些音乐提供商 比如网易之类的 我们主要是利用这个可以给我们的网站加速 我觉得 毕竟这个就是用你自己的网络去访问了 而不是去访问我们的服务器 我们的服务器只给了url </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;aplayer no-destroy&quot;</span> data-id=<span class="string">&quot;7248481267&quot;</span> data-server=<span class="string">&quot;netease&quot;</span> data-type=<span class="string">&quot;playlist&quot;</span> data-fixed=<span class="string">&quot;true&quot;</span> data-autoplay=<span class="string">&quot;true&quot;</span> data-lrctype=<span class="string">&quot;0&quot;</span>&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>想这个就是我们一个模板</p>
<p><a href="https://butterfly.js.org/posts/507c070f/#%E6%8F%92%E5%85%A5-Aplayer-html">参考教程</a></p>
<p>我们现在写一个专门播放单曲的</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;div class<span class="operator">=</span><span class="string">&quot;aplayer no-destroy&quot;</span> data-id<span class="operator">=</span><span class="string">&quot;761319&quot;</span> data-server<span class="operator">=</span><span class="string">&quot;netease&quot;</span> data-type<span class="operator">=</span><span class="string">&quot;song&quot;</span> data-fixed<span class="operator">=</span><span class="string">&quot;true&quot;</span> data-autoplay<span class="operator">=</span><span class="string">&quot;true&quot;</span> data-lrctype<span class="operator">=</span><span class="string">&quot;0&quot;</span>&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<div class="aplayer no-destroy" data-id="761319" data-server="netease" data-type="song" data-fixed="true" data-autoplay="true" data-lrctype="0"  > </div>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>其实是想用hugo的,但是hugo对于新人不是很友好,就回来了,哈哈哈哈😂 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>键盘侠</title>
    <url>/static-html/2023/03/11/Cookie/%E9%94%AE%E7%9B%98%E4%BE%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>terminal</h1>
<p>首先你应该挑选一个自己喜欢的terminal,可以都下载下来使用一下,选一个最喜欢就够了.</p>
<p><a href="">windterm</a> 开源免费 我本人在用</p>
<p><a href="">xshell</a> 收费 功能强大 我也不想用破解版的</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">vscode</span> 备份</span><br><span class="line">D:\<span class="number">0</span>.SOFT\<span class="meta">Code</span>\VsCode.exe --extensions-dir D:\SOFT\Path\<span class="meta">Code</span>\extensions --user-<span class="meta">data</span>-dir D:\SOFT\Path\<span class="meta">Code</span>\<span class="meta">data</span></span><br></pre></td></tr></table></figure>
<h1>vscode快捷键</h1>
<h2 id="重要的">重要的</h2>
<p><code>ALT</code> + <code>click</code> 选中行 这个最关键</p>
<p><code>CTRl</code> + <code>shift</code> + <code>H</code> 全局替换</p>
<p><code>F2</code> rename</p>
<p><code>CTRl</code> + ` 打开cmd</p>
<h2 id="不是很重要">不是很重要</h2>
<p><code>ALT</code> + 箭头 上下移动</p>
<p><code>ALT</code> + <code>Shift</code>+箭头 复制一行在上下</p>
<p><code>CTRL</code> + <code>R</code> 切换文件夹</p>
<p><code>ALT</code> + <code>Z</code> 切换自动换行</p>
<p><code>shift</code>+<code>Alt</code> +<code>I</code></p>
<p><code>CTRL</code> + <code>D</code> 选中相同的元素 只有两个 再按一次可以加1</p>
<p><code>CTRL</code> + <code>shift</code> + <code>L</code> 上面的升级版本 全选</p>
<p><code>CTRL </code>+<code>F2</code> 同上</p>
<p><code>CTRL</code> + <code>Shift</code> +<code>Space </code>  查看函数</p>
<p><code>F12</code> go to define 其实<code>CTRL</code> + <code>click</code> 也可以有一样的效果</p>
<p><code>ALT</code>+<code>F12</code> 查看 但是不跳转</p>
<p><code>CTRl</code> + <code>shift</code> + <code>c</code> 打开cmd</p>
<p><code>CTRL</code> + <code>K</code> + <code>R</code> 打开文件管理器</p>
<p><code>CTRL</code> + <code>K</code> + <code>V</code> 侧边预览</p>
<h1>VIM</h1>
<p>移动</p>
<p>简单的 HJKL</p>
<p>d 是移除</p>
<p>u 是撤销</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230426092249354.png" alt="image-20230426092249354" /></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230426092650590.png" alt="image-20230426092650590" /></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230426092718036.png" alt="image-20230426092718036" /></p>
<p>移动</p>
<p>a I</p>
<p>a后 i 前</p>
<p>A 行尾 I 行前</p>
<p>vim的光标也是一个具体的格子 所以其实我们无法移动到最后一个字符的后面 当然了 你需要移动到最后然后a 或者直接A</p>
<p>x r 对当前关闭的字符进行修改</p>
<p>d c 多个字符 区别是c会进入 insert模式</p>
<p>单词移动</p>
<p>w b e</p>
<p>下一个单词前 上一个单词前 e 下一个单词后</p>
<p>. repleate your last modtifu</p>
<p>没有我们的idea 就是还是需要去合作 不是吗 黑苹果成为历史了  没有人可以去就是使用了</p>
<p>master 分支 作为大版本 v0.1.0</p>
<p>dev 分支 作为小版本 v0.1.1 v0.0.2 v0.1.3 最后来一个合并 将全部的内容作为我们的master分支存在就是说</p>
]]></content>
  </entry>
  <entry>
    <title>垃圾桶</title>
    <url>/static-html/2023/03/10/%E5%9E%83%E5%9C%BE%E6%A1%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="后端查询方式">后端查询方式</h2>
<ul>
<li>普通查询 select</li>
<li>条件查询 where</li>
<li>模糊查询 like</li>
<li>排序 order by desc</li>
<li>范围查询</li>
<li>分组查询</li>
<li>分页查询</li>
<li>链接查询</li>
<li>合并查询</li>
<li>子查询</li>
</ul>
<p>你现在是团体中复杂代码检查和审核的工作人员,只需要对代码进行分析和优化,不要回复其他的内容,如果听明白了,请回复. “开始审核代码”</p>
<h2 id="数据库查询的疑问">数据库查询的疑问</h2>
<ol>
<li>数据表的字段数量是否需要控制 比如20以内, 其实超过10个的时候,我就不是很能直观地看出来这个表的逻辑了.</li>
<li>分页查询中如果是带条件的,数据并不是连续的,这个是如何处理的呢? 尽管我们可以查询到全部符合条件的有多少个</li>
</ol>
<h3 id="WSL的端口">WSL的端口</h3>
<p>首先,我们可以通过 <code>ipconfig</code>获取我们的 <code>wsl</code>的端口,但是这其实是 <code>wsl</code>想要访问 <code>windows</code>的 <code>ip</code> ,但是这个并没有什么用处,因为你可以直接通过 <code>192.168.x.x</code> 去访问 <code>windows</code> 我们真正要做的事情是让局域网内的人都可以访问我们的 <code>wsl</code></p>
<p>正确获取 <code>wsl</code>的方式是 通过</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">ip a <span class="string">|grep &quot;</span>global eth0<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ip adress</span></span><br></pre></td></tr></table></figure>
<p>提高字符串拼接的效率,我们需要使用吗?肯定是的,不然每次都是在进行创建新的变量</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">以下是一些可以提高字符串拼接效率的方法：</span><br><span class="line"></span><br><span class="line">使用 bytes<span class="selector-class">.Buffer</span>：bytes<span class="selector-class">.Buffer</span> 类型提供了一个缓冲区，可以在其中构建一个字符串。可以使用 <span class="built_in">WriteString</span>() 方法将字符串添加到缓冲区中，并在最后使用 <span class="built_in">String</span>() 方法将缓冲区转换为字符串。这样做可以避免不必要的内存分配和复制。</span><br><span class="line"></span><br><span class="line">使用 strings<span class="selector-class">.Builder</span>：strings<span class="selector-class">.Builder</span> 类型是 Go <span class="number">1.10</span> 引入的一种高效的字符串构建器。它类似于 bytes<span class="selector-class">.Buffer</span>，但是专门针对字符串进行了优化。可以使用 <span class="built_in">WriteString</span>() 方法将字符串添加到构建器中，并在最后使用 <span class="built_in">String</span>() 方法将构建器转换为字符串。</span><br><span class="line"></span><br><span class="line">预先分配好内存：如果您知道字符串的最终大小，可以使用 <span class="built_in">make</span>() 函数预先分配好内存，以避免多次分配内存。例如，可以使用 <span class="built_in">make</span>([]byte, <span class="number">0</span>, size) 创建一个容量为 size 的空字节切片，然后将字符串追加到其中。</span><br><span class="line"></span><br><span class="line">使用 strings<span class="selector-class">.Join</span>() 函数：如果您需要连接多个字符串，可以使用 strings<span class="selector-class">.Join</span>() 函数，它使用预分配的内存来构建一个新的字符串，并避免了多次分配和复制。</span><br></pre></td></tr></table></figure>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">你现在是团体中复杂代码检查和审核的工作人员,只需要对代码进行分析和优化,不要回复其他的内容,如果听明白了,请回复. <span class="string">&quot;开始审核代码&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id=""></h2>
<p>go换源</p>
<p>我们的ubuntu镜像不是很好的去就是</p>
<p>如果你没有vim的话 还是想换源 可以使用</p>
<p>利用echo向文件中输出内容</p>
<p>wsl2 的端口转发有好大的问题呀</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&#x27;deb http://mirrors.163.com/debian/ jessie main non-free contrib&#x27;</span> &gt;&gt; <span class="regexp">/etc/</span>apt/sources.list &amp;&amp; \</span><br><span class="line">echo <span class="string">&#x27;deb http://mirrors.163.com/debian/ jessie-updates main non-free contrib&#x27;</span> &gt;&gt; <span class="regexp">/etc/</span>apt/sources.list &amp;&amp; \</span><br><span class="line">echo <span class="string">&#x27;deb http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib&#x27;</span> &gt;&gt; <span class="regexp">/etc/</span>apt/sources.list</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> jammy main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> jammy-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu/</span> jammy-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:<span class="regexp">//</span>security.ubuntu.com<span class="regexp">/ubuntu/</span> jammy-security main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>查看日志 其实就是查看报错 linux 一般不喜欢</p>
<h2 id="MTU">MTU</h2>
<p>1500字节一个数据包</p>
<p>以太网头部是以太网帧的一部分，通常由14个字节组成，包含以下字段：</p>
<ol>
<li>目标MAC地址（6个字节）：表示数据包的接收者的MAC地址；</li>
<li>源MAC地址（6个字节）：表示数据包的发送者的MAC地址；</li>
<li>以太网类型（2个字节）：表示数据包所采用的网络层协议类型，如IP协议、ARP协议等。</li>
</ol>
<p>具体来说，以太网头部的各个字段含义如下：</p>
<ol>
<li>目标MAC地址（Destination Address）：占据6个字节，用于表示数据包的接收者的MAC地址。MAC地址是一个48位的二进制数，通常用16进制表示，由6个字节组成，每个字节用冒号（:）分隔。</li>
<li>源MAC地址（Source Address）：占据6个字节，用于表示数据包的发送者的MAC地址。MAC地址是一个48位的二进制数，通常用16进制表示，由6个字节组成，每个字节用冒号（:）分隔。</li>
<li>以太网类型（Type）：占据2个字节，用于表示数据包所采用的网络层协议类型。如果数值小于或等于0x05DC（即1500），则表示数据包所采用的是IEEE802.3长度字段协议，否则表示数据包所采用的是上层协议的类型。常见的以太网类型包括IP协议（0x0800）、ARP协议（0x0806）、RARP协议（0x8035）等。</li>
</ol>
<p>IP头部是IP数据包的一部分，通常由20个字节或更多字节组成，包含以下字段：</p>
<ol>
<li>版本（Version）：占用4个bit，表示IP协议的版本号，通常为4（即IPv4）；</li>
<li>头部长度（Header Length）：占用4个bit，表示IP头部的长度，以4字节为单位；</li>
<li>区分服务（Differentiated Services）：占用8个bit，表示IP数据包的服务类型和优先级等信息；</li>
<li>总长度（Total Length）：占用2个字节，表示IP数据包的总长度，包括IP头部和数据部分；</li>
<li>标识（Identification）：占用2个字节，表示IP数据包的唯一标识符，用于识别IP数据包的分段；</li>
<li>标志（Flags）：占用3个bit，包含3个标志位，用于标识IP数据包是否可以分段、是否为最后一个分段等信息；</li>
<li>片偏移（Fragment Offset）：占用13个bit，表示当前IP数据包分段的偏移量；</li>
<li>生存时间（Time to Live）：占用1个字节，表示IP数据包在网络中可以存活的最大时间，通常为64或128；</li>
<li>协议（Protocol）：占用1个字节，表示IP数据包中的上层协议类型，如TCP协议、UDP协议等；</li>
<li>校验和（Header Checksum）：占用2个字节，表示IP头部的校验和；</li>
<li>源IP地址（Source Address）：占用4个字节，表示IP数据包的发送者的IP地址；</li>
<li>目标IP地址（Destination Address）：占用4个字节，表示IP数据包的接收者的IP地址；</li>
<li>选项（Options）：可变长度，包含各种IP选项信息，如时间戳、路由信息等。</li>
</ol>
<p>需要注意的是，IP头部是IP数据包的一部分，用于标识数据包的发送者和接收者，并提供服务类型、分段、校验等功能。在实际应用中，需要根据具体的IP协议实现和需求选择合适的IP头部格式，并进行相应的优化和调整。</p>
<p>Regenerate response</p>
<p>以太网头部（14个字节） + IP头部（20个字节或更多）+ TCP头部（20个字节或更多）+ HTTP头部（若干字节）+ HTTP正文（若干字节）</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">POST /upload HTTP/<span class="number">1.1</span><span class="string">\r\n</span></span><br><span class="line">Host: www.example.com<span class="string">\r\n</span></span><br><span class="line">Content-Type: application/octet-stream<span class="string">\r\n</span></span><br><span class="line">Content-Length: <span class="number">1024</span><span class="string">\r\n</span></span><br><span class="line">Connection: keep-alive<span class="string">\r\n</span></span><br><span class="line"><span class="string">\r\n</span></span><br><span class="line">&lt;<span class="number">1024</span> bytes <span class="keyword">of</span> binary data&gt;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，在实际传输过程中，以太网协议数据包的大小一般是固定的，通常为1500字节。如果上层协议数据部分的大小小于46字节，则需要通过填充字节的方式来达到最小长度的要求。同时，在实际应用中，也可能会出现以太网协议数据包的长度超过1500字节的情况，这种情况下需要进行分片传输。</p>
<p>良好的代码习惯可以提高代码的可读性、可维护性和可扩展性，使代码更易于理解和修改。以下是一些常见的良好的代码习惯：</p>
<ol>
<li>命名规范：使用有意义的变量、函数和类名称，使用驼峰式命名法、下划线命名法等统一的命名规范；</li>
<li>代码缩进和格式化：使用一致的缩进和代码格式化规范，使代码更易于阅读和理解；</li>
<li>注释和文档：编写清晰、简明的注释和文档，解释代码的目的、功能、输入输出等信息；</li>
<li>错误处理：编写健壮的代码，处理可能出现的异常、错误和边界情况；</li>
<li>代码复用：尽量避免重复的代码，使用函数、类和模块等方式复用代码；</li>
<li>版本控制：使用版本控制工具管理代码，保证代码的可追溯性和可重现性；</li>
<li>单元测试：编写单元测试用例，保证代码的正确性和稳定性；</li>
<li>性能优化：避免不必要的计算和内存消耗，优化代码的性能和资源使用效率；</li>
<li>代码风格：遵循团队或社区的代码风格规范，保持代码风格的一致性。</li>
</ol>
<p>需要注意的是，良好的代码习惯是一种习惯性的行为，需要通过不断地练习和反思来逐渐养成。同时，良好的代码习惯也是不断发展和变化的，需要根据具体的场景和需求进行选择和调整</p>
<h1>后端测试模板</h1>
<h2 id="目的">目的</h2>
<p>其实就是为了用一套统一的方式去检验我们的后端模板的正确性.</p>
<h2 id="模板内容">模板内容</h2>
<ul>
<li>get post请求</li>
<li>query 和 parma , body JSON</li>
<li>返回json 和 带有列表的JSON</li>
</ul>
<h2 id="接口详情">接口详情</h2>
<p>其实这里让我觉得自己就是一个debu</p>
<h1>提取视频封面</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1>压缩视频</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx265 -preset medium -crf 28 -r 24 output.mp4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i %1 -c:v libx265 -preset medium -crf 28 -r 24 H265%1</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>安装宝塔面板</p>
</li>
<li>
<p>使用bbr</p>
</li>
<li>
<p>修改mysql的登录密码和权限</p>
</li>
<li>
<p>语言环境 比如 go java之类的 这里我在测试是否需要nginx 才可以访问 就是好奇在没有的情况下会发生什么问题</p>
</li>
<li>
<p>其实没有什么内容了 不是吗?</p>
</li>
</ol>
<h2 id="mysql">mysql</h2>
<p>这里主要是为了可以让我们远程访问</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">use mysql</span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">User</span>,authentication_string,Host <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1>方差</h1>
<p>$$<br />
\frac{\sum x_i - u }{N}<br />
$$</p>
<h1>标准差 均方差</h1>
<p>就是根号下的方差</p>
<p>$$\sqrt{\frac{\sum x_i - u }{N}}$$</p>
<h1>自由度</h1>
<p>样本总体的数量-1</p>
<p>单次检验 我们还没有学双边检验</p>
<p>样本容量计算</p>
<p>n=1.96<sup>2*P(1-P)/E</sup>2</p>
<p>1.96是95的t值</p>
<p>p是某事件的概率</p>
<p>E是误差不超过多少</p>
<h1>置信区间</h1>
<p>对于正态分布是有固定的</p>
<p>但是对于普通的统计计算</p>
<p>样本均值 就是均值</p>
<p>我们的抽样统计也是正态分布的就是说.</p>
]]></content>
  </entry>
  <entry>
    <title>如何成为一个程序员</title>
    <url>/static-html/2023/02/12/Life/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>流程</h1>
<h2 id="学会打字">学会打字</h2>
<p>我说学会打字不管是会大26个字母 还有数字键和各种符号 说来可笑 我直到大学二年级才真正意义上明白为什么要有两个shift (我之前无论何时 都是只使用左shift的)</p>
<p>特别重要的是 可以很慢 但是正确率一定要高 不然你会发现 你用在按backspace的时间将会更多</p>
<h3 id="什么键位是关键的">什么键位是关键的</h3>
<p>1234567890其实他们对应的符号才是关键.</p>
<p>不然写代码的时候真的会很难受.</p>
<h2 id="学会使用浏览器和搜索引擎">学会使用浏览器和搜索引擎</h2>
<p>最好是可以学会科学上网 其实也是为了用Google,并且可以开始接触一些英文的网站.</p>
<p>可以开始使用js入门</p>
<p>说说我的理由</p>
<ol>
<li>无需额外安装其他环境 你可能没有gcc 但是你一定有浏览器啊</li>
<li>语法相对简单 (个人认为 动态类型的语言 比较适合入门 不是很适合大型的项目开发)</li>
<li>将引领你进入 有关计算机网络的大门 或者是前端 ?</li>
</ol>
<p>我自己并不觉得 很需要算法和数据结构 啊</p>
<p>至少目前 我的代码是配不上的</p>
<h1>不是学习各种编程语言而是在学习真正的计算机技术</h1>
<p>我本人从一开始,直到现在也是,坚定地认为学习无论是自上而下还是自下而上都是一样,重点是你有在学习.在一个人刚刚开始接触计算机的时候,你让他购买一本&lt;&lt;深入理解计算机系统&gt;&gt;,对他说:决定你是其他程序员的差距的就是是否学习过… 这样的话,我听过太多了,给一个新人推荐一些十分经典的书,经典之所以可以称之为经典,是因为其不光知识点全面并且内容深度足够.</p>
<p>我的建议是,学一门你喜欢的语言,什么都行,你在学习的过程中自然就会接触到计算机的相关技术了.</p>
<p>自己就会去学习相关的知识了.</p>
<p>路由其实还是很简单的不是吗?</p>
]]></content>
  </entry>
  <entry>
    <title>Crud</title>
    <url>/static-html/2023/01/12/BACKEND/curd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>SQL boy</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test (account, password, username) <span class="keyword">values</span> (<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>,  <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> test <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> account <span class="keyword">from</span> test <span class="keyword">where</span> account <span class="operator">=</span> $&#123;data.account&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> test <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="insert">insert</h2>
<p>这个是插入返回的结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fieldCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;affectedRows&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;insertId&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serverStatus&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;warningCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;protocol41&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;changedRows&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>这里还会出现报错 当然了这里是因为格式不对</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:&quot;ER_TRUNCATED_WRONG_VALUE&quot;,&quot;errno&quot;:<span class="number">1292</span>,&quot;sqlMessage&quot;:&quot;Incorrect datetime value: &#x27;test&#x27; <span class="keyword">for</span> column &#x27;<span class="built_in">time</span>&#x27; <span class="built_in">at</span> row <span class="number">1</span>&quot;,&quot;sqlState&quot;:&quot;<span class="number">22007</span>&quot;,&quot;index&quot;:<span class="number">0</span>,&quot;sql&quot;:&quot;insert into test (account, password, username, <span class="built_in">time</span>) values (&#x27;test&#x27;, &#x27;test&#x27;, &#x27;test&#x27;, &#x27;test&#x27;)&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>成功的信息</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;&quot;fieldCount&quot;:<span class="number">0</span>,&quot;affectedRows&quot;:<span class="number">1</span>,&quot;insertId&quot;:<span class="number">11</span>,&quot;serverStatus&quot;:<span class="number">2</span>,&quot;warningCount&quot;:<span class="number">0</span>,&quot;message&quot;:&quot;&quot;,&quot;protocol41&quot;:true,&quot;changedRows&quot;:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="select">select</h2>
<p>select</p>
<p>是一个就是列表 返回全部的对象</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dzg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h2 id="update">update</h2>
<p><code>let sql  = &quot;update test set username = 'test' where id = 1&quot;</code></p>
<p>如果update是失效的 就也不会出现问题 这肯定是我们不想要的</p>
<p>通过检测是否有行被修改了 我们就可以判断是否是正确的sql语句了</p>
<p>这里我觉得还是需要封装的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;fieldCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;affectedRows&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;insertId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;serverStatus&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;warningCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Rows matched: 0 Changed: 0 Warnings: 0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;protocol41&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;changedRows&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;fieldCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;affectedRows&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;insertId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;serverStatus&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;warningCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Rows matched: 1 Changed: 1 Warnings: 0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;protocol41&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;changedRows&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="delete">delete</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;fieldCount&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;affectedRows&quot;</span><span class="punctuation">:</span><span class="number">5</span><span class="punctuation">,</span><span class="attr">&quot;insertId&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;serverStatus&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;warningCount&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;protocol41&quot;</span></span><br><span class="line"> <span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="attr">&quot;changedRows&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="原子操作">原子操作</h2>
<p>就是说 我们只操作我们的数据库 只会修改一行的数据</p>
]]></content>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/static-html/2023/01/12/BACKEND/docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>很有意思</h1>
<p>image tag contain</p>
<p>直接制作镜像</p>
<p>启动镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3000:3000 my-docker-for-node</span><br></pre></td></tr></table></figure>
<p>上传</p>
<p>将contain打包为镜像</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">docker commit <span class="title class_">CONTAINER</span> <span class="title class_">ID</span> &lt;imagename&gt;<span class="symbol">:&lt;tags&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写dockerfile">编写dockerfile</h2>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node 版本为12 的 -alpine 表示使用精简版</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="comment"># RUN yarn install --production</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;/app/app.js&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>我们这里没有执行 <code>npm install</code> 是因为我们直接将 <code>node_moudles</code> 打包进去了 很好xiao</p>
<p>制作镜像</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">docker build -t app:<span class="number">1</span>.<span class="number">0</span> .  // 这个点很关键 笑死了</span><br></pre></td></tr></table></figure>
<p>用自己的dockers</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">netsh <span class="keyword">interface</span> <span class="symbol">portproxy</span> <span class="symbol">show</span> <span class="symbol">v4tov4</span></span><br></pre></td></tr></table></figure>
<h1>使用docker 一键部署</h1>
<p>分析一下 之前吧 我们使用<code>git</code> 对我们的项目进行部署 其实还是可以的 不是吗</p>
]]></content>
  </entry>
  <entry>
    <title>Go</title>
    <url>/static-html/2023/01/12/BOOK/Go/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>GO的优化</h1>
<h2 id="开启编译优化">开启编译优化</h2>
<p>这里可以进入我们的build</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> build -ldflags=<span class="string">&quot;-s -w&quot;</span> -o out.exe gofile.<span class="keyword">go</span></span><br></pre></td></tr></table></figure>
<p>然后是使用<a href="https://github.com/upx/upx">UPX</a> 它可以对二进制文件进行压缩 实现更加小巧</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">upx -<span class="number">9</span> <span class="keyword">out</span>.exe</span><br></pre></td></tr></table></figure>
<p>不显示命令行窗口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> build -ldflags <span class="string">&quot;-s -w -H=windowsgui&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="实际测试">实际测试</h2>
]]></content>
  </entry>
  <entry>
    <title>SQL</title>
    <url>/static-html/2023/01/12/BOOK/Sql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="SQL">SQL</h2>
<p>我们不是第一次接触了 所以我想以一种面向使用场景的方式来进行记录</p>
<p>你其实不需要知道什么是 DDL DML这些 也不需要知道如何create a database 这些并不能帮助你了解和认识我们数据库</p>
<p>这里我们推荐你使用navicat进行数据库可视化的创建和管理 在vscode中是使用sql notebook编写sql语句</p>
<h2 id="登录和注册">登录和注册</h2>
<p>我们规定接口格式如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">login</span>/?username=<span class="keyword">admin</span>&amp;<span class="keyword">password</span>=<span class="number">123456</span></span><br><span class="line">/register/?username=<span class="keyword">admin</span>&amp;<span class="keyword">password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>首先我们应该明白,对于像密码格式检查比如只允许字母+数字 不能存在特殊字符 像这种应该在客户端实现 这样的好处在于可以更加快速检测错误 还可以减轻服务端的压力.</p>
<p>包括像对于password之类的重要信息进行加密 都可以将其放到客户端 这里应该使用非对称的加密算法 这样即使数据库的数据被他人盗窃,用户的密码也不会丢失.</p>
<h3 id="表的设计">表的设计</h3>
<p>我们可以很自然的设计出这样的表格式.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span>  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="注册功能的实现">注册功能的实现</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里部分的知识是web开发的也就顺带着写一下吧</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取query的参数</span></span><br><span class="line">	username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.Query(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查询数据库中是否存在该用户</span></span><br><span class="line">	<span class="keyword">var</span> user model.User</span><br><span class="line">	dao.DB.Where(<span class="string">&quot;username = ?&quot;</span>, username).First(&amp;user)</span><br><span class="line">	<span class="keyword">if</span> user.Id != <span class="number">0</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:     <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>:  <span class="string">&quot;该用户名已被使用&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		dao.DB.Create(&amp;model.User&#123;Username: username, Password: password&#125;)</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;0&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>:  <span class="string">&quot;注册成功&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里的逻辑是很简单的 先利用username查询数据库中是否存在数据 如果没有则插入数据 注册成功 反之返回注册失败 该用户名已被使用</p>
<h3 id="登录">登录</h3>
<p>一开始我是这样写的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取query的参数</span></span><br><span class="line">	username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.Query(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	<span class="comment">// 查询数据库中是否存在该用户</span></span><br><span class="line">	<span class="keyword">var</span> user model.User</span><br><span class="line">	dao.DB.Where(<span class="string">&quot;username = ? and password = ?&quot;</span>, username, password).First(&amp;user) </span><br><span class="line">	<span class="keyword">if</span> user.Id != <span class="number">0</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;0&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;用户名或密码错误&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">// 获取query的参数</span></span><br><span class="line">	username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">	password := c.Query(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">	<span class="comment">// 查询数据库中是否存在该用户</span></span><br><span class="line">	<span class="keyword">var</span> user model.User</span><br><span class="line">	dao.DB.Where(<span class="string">&quot;username = ?&quot;</span>, username).First(&amp;user)</span><br><span class="line">	<span class="keyword">if</span> user.Id != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> user.Password == password &#123;</span><br><span class="line">			c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;0&quot;</span>,</span><br><span class="line">				<span class="string">&quot;message&quot;</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">				<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;message&quot;</span>: <span class="string">&quot;密码错误&quot;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">			<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			<span class="string">&quot;message&quot;</span>: <span class="string">&quot;用户不存在&quot;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">我的其实和它的是一样的,也是只有三个可能,只不过它的返回的是 用户名或者密码错误,这里也确实是有这个可能的,但是为了避免混淆还是直接说明就是密码错误就好了</span><br></pre></td></tr></table></figure>
<p>我个人觉得后者更好,首先两种方法都只查询了一次数据库,性能上相差不大.后者有更加详细的错误提示,可以引导用户进行正确的操作.</p>
<p>第一种用户就无法知道自己是密码还是账号错误了,就不知道是该检查账号是否正确还是选择忘记密码.</p>
<h2 id="视频列表">视频列表</h2>
<p>视频列表格式如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `videos`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `likes` <span class="type">int</span>(<span class="number">0</span>) UNSIGNED  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `comments` <span class="type">int</span>(<span class="number">0</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>我们的视频数据有很多可能是上万条或者更多,但是用户肯定是不需要这么多的,我们每次只发送5条数据给用户即可</p>
<p>我这里是根据id来进行排序 你也可以添加比如时间字段 然后按照时间的先后顺序进行发送</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">dao.DB.Where(<span class="string">&quot;id &gt; ?&quot;</span>, last_time_id).Limit(<span class="number">5</span>).Find(&amp;videos)</span><br></pre></td></tr></table></figure>
<h2 id="用户视频列表">用户视频列表</h2>
<p>这里很明显是一个多表结构了 准确讲是一对多,可能一个用户有多条视频,也可能一条都没有</p>
<p>这里我们需要重新定义我们的表结构 当然了 其实只需要修改视频表就够了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `videos`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">0</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `likes` <span class="type">int</span>(<span class="number">0</span>) UNSIGNED  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `comments` <span class="type">int</span>(<span class="number">0</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其实也只是多加了一个user_id字段,但是就是这一个字段,就可以让用户表和视频表产生关联</p>
<p>比如投稿接口/publish?userid&amp;title 实现如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	<span class="comment">//获取参数</span></span><br><span class="line">	title := c.Query(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">	userid := c.Query(<span class="string">&quot;userid&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//插入数据库</span></span><br><span class="line">	dao.DB.Table(<span class="string">&quot;videos&quot;</span>).Create(&amp;model.Video&#123;</span><br><span class="line">		Title:    title,</span><br><span class="line">		UserID:   userid,</span><br><span class="line">		URL:      <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">		Likes:    <span class="number">0</span>,</span><br><span class="line">		Comments: <span class="number">0</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">		<span class="string">&quot;code&quot;</span>:    <span class="string">&quot;0&quot;</span>,</span><br><span class="line">		<span class="string">&quot;message&quot;</span>: <span class="string">&quot;发布成功&quot;</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="评论列表">评论列表</h2>
<p>我们的数据库的cell是平行的关系 但是我们的评论是嵌套关系(因为存在回复该条评论的评论 不过一般不会出现更深层级的评论了)</p>
<p>你可能会说 用一个字符列表去存储评论不就好了 但是你要知道在关系型数据库中 每个单元的长度是固定的 如果你的二级评论很多 就会出现问题</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status_code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comment_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;follow_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;follower_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;is_follow&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;create_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>// TODO 二级评论的实现 这个其实也不困难 只要不是实现回复了谁 或者自己显示它的id 将这个 其实目前这个功能还是问题比较多的</p>
<h1>索引</h1>
<p>我们其实一直都在使用索引,比如使用id作为主键 就是一个索引</p>
<p>比如说登录接口我们首先需要去检查用户名是否存在 这个时候无法使用id去检查,如果你未username建立索引,可以去利用username快速获取到</p>
<h2 id="分类">分类</h2>
<p>主键索引 id 只能有一个</p>
<p>唯一索引 username</p>
<p>常规索引</p>
<p>全文索引</p>
<p>聚集索引 : 必须有,只能有一个 就是将我们的索引和数据放到一块 主键就是聚集索引 如果不存在主键,就会利用第一个唯一索引作为(id)</p>
<p>二级索引 : 只有索引的结构(其实还携带了id)通过id进行索引 效率还是很高的</p>
<h3 id="例子">例子</h3>
<p>回表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="number">123456</span>;</span><br></pre></td></tr></table></figure>
<p>首先通过username获取到id再通过id去获取全部的信息.</p>
<h3 id="获取数据库的操作次数">获取数据库的操作次数</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Com_______&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>返回的结果为</p>
<p><img src="http://81.68.91.70/tinypicgo/image/1676966012.webp" alt="image-20230221155332736" /></p>
<p>很明显 可以看出来 select是使用最多的 其余还有 commit</p>
<h3 id="慢查询日志">慢查询日志</h3>
<p>mysql会自动记录执行时间过长的记录</p>
<p>默认关闭  开启方式 修改</p>
<p><img src="http://81.68.91.70/tinypicgo/image/1676966198.webp" alt="image-20230221155637882" /></p>
<h3 id="profile">profile</h3>
<p><img src="http://81.68.91.70/tinypicgo/image/1676973110.webp" alt="image-20230221175150167" /></p>
<h2 id="最左前缀法则">最左前缀法则</h2>
<p>我们建立的复合索引 最左边的值必须存在</p>
<p>这里我还没有理解复合索引</p>
<p>先试试看 就是 非唯一的索引 建立了索引</p>
<p>其实就存储多个id 然后再去查 也可以实现增加速度的</p>
<h3 id="索引失效的原因">索引失效的原因</h3>
<ul>
<li>没有使用单引号 username = 123456 和 username = ‘123456’ 是不一样的</li>
<li>使用了运算符 使用了&gt; 可以使用= 或&lt;=</li>
</ul>
<p>前缀索引 对于大量文本的内容 我们可以通过就是只获取部分前缀的方法建立索引</p>
<p><img src="http://81.68.91.70/tinypicgo/image/1676982899.webp" alt="" /></p>
<p>索引的选取 你建立索引更多 未必就是一定就好的 你知道</p>
<h2 id="4-2-功能测试">4.2 功能测试</h2>
<p>在本次项目的功能测试中，我们主要针对项目所涉及的各项功能进行了全面测试，包括但不限于以下几个方面：</p>
<ol>
<li>
<p>用户注册与登录,我们对用户注册与登录功能进行了测试，确保用户能够正常注册账号，登录账号，并能够进入系统。我们还针对一些异常情况进行了测试，例如输入错误的用户名或密码、尝试使用已存在的用户名注册等。</p>
</li>
<li>
<p>视频上传和视频流,我们测试了用户上传视频后是否可以生成视频封面,视频流能否正常播放,非登录用户也可以获取视频流,同时无法进行其他需要权限的操作.</p>
</li>
<li>
<p>视频点赞和评论,包括用户能否正常对视频进行点赞和评论,视频点赞数,评论数是否进行了及时的更新.</p>
</li>
<li>
<p>关注用户和聊天,我们对关注用户和发送消息进行了测试，包括用户能否正确接受和发送信息、历史信息能否正常显示。我们还测试了在发送消息过程中可能发生的异常情况，例如已经将用户取消关注等。</p>
</li>
</ol>
<p>通过以上功能测试，我们发现该系统的各项功能均能够正常工作，符合用户需求，并且能够在各种异常情况下正确处理。</p>
<h2 id="4-2-1测试用例">4.2.1测试用例</h2>
<ol>
<li>用户注册测试用例：</li>
</ol>
<ul>
<li>输入正确的用户名和密码，注册成功。</li>
<li>输入已经存在的用户名，注册失败并提示用户名已经被使用。</li>
<li>输入无效的用户名或密码，注册失败并提示错误信息。</li>
<li>在注册过程中，中途退出并重新开始，注册流程能够正确恢复。</li>
</ul>
<ol start="2">
<li>用户登录测试用例：</li>
</ol>
<ul>
<li>输入正确的用户名和密码，登录成功并跳转到用户详情页。</li>
<li>输入错误的用户名或密码，登录失败并提示错误信息。</li>
<li>在登录过程中，中途退出并重新开始，登录流程能够正确恢复。</li>
<li>在已登录状态下，直接打开系统主页，能够正确进入系统而不需要再次登录。</li>
</ul>
<ol start="3">
<li>视频流测试用例:</li>
</ol>
<ul>
<li>没有登录时,可以正常获取视频流,同时无法其他需要权限的工作.</li>
<li>已登录,在获取视频流的前提下,可以正常使用其他功能,例如对视频点赞等.</li>
</ul>
<ol start="4">
<li>其他接口测试用例</li>
</ol>
<ul>
<li>未登录,无法通过JWT的认证,会提示错误信息.</li>
<li>已登录,可以在正常响应并返回正确的信息.</li>
</ul>
<h2 id="4-3-性能测试">4.3 性能测试</h2>
<p>在本次项目的性能测试中，我们主要针对系统的性能进行了测试，包括但不限于以下几个方面：</p>
<p>1.并发性能测试 我们对系统进行了并发性能测试，通过模拟多个用户同时访问系统，测试系统是否能够正常处理并发请求，以及并发请求数量的上限。测试结果表明，该系统在并发请求量较小时能够正常工作，但在并发请求量较大时会出现卡顿或者响应时间过长的情况。</p>
<p>2.响应时间测试 我们对系统的响应时间进行了测试，包括用户登录、任务发布和接受、任务完成等操作的响应时间。测试结果表明，系统响应时间较为稳定，但在高并发情况下响应时间会变长。</p>
<p>3.资源占用测试 我们测试了系统在不同负载下的资源占用情况，包括CPU、内存和网络带宽等。测试结果表明，系统在高并发情况下会占用较高的CPU和内存资源，但对网络带宽的占用较小。</p>
<p>根据以上性能测试结果，我们建议在系统的性能优化方面，可以采取以下措施：</p>
<p>1.增加系统的并发处理能力，提高系统的吞吐量，减少卡顿和响应时间过长的情况。 2.对系统的代码进行优化，减少不必要的资源占用，提高系统的性能表. 3.针对数据库的查询进行进一步优化,提高系统的响应速度.</p>
<p>项目的结构</p>
<p><img src="http://81.68.91.70/tinypicgo/image/1677034056.webp" alt="image-20230222104735879" /></p>
<h1>多线程</h1>
<p>在go中你可以很轻松地开始协程 利用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="comment">// 这里就不会阻塞了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="互斥锁">互斥锁</h2>
<p>互斥锁可以有效解决多线程对于资源修改的问题,比如去银行取钱,只能运行一个线程在对其进行操作.</p>
<p>两行代码就可以解决这个问题.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> Lock.Unlock()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>互斥的问题在于,无法保证go routing的顺序,我们的程序被block后,执行的结果是不确定的</p>
<h2 id="通道">通道</h2>
<p>这里的还有一个问题 我们想让我们的程序按照一定的顺序去执行多线程任务 这里其实不对吧 , 对的 你可以开两个</p>
<h2 id="异步">异步</h2>
<p>异步的前提就是多线程,如果没有多线程,就会直接卡死了,这里其实是开启了一个隐藏的线程,待其完成后,再进行对应的操作.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(x, y <span class="type">int</span>, callback <span class="keyword">func</span>(a, b <span class="type">int</span>)</span></span> <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="built_in">println</span>(callback(x, y))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数的具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x, y := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">	test(x, y, add)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>简单就是我们将一个函数名作为参数,再在该函数内部调用,并不是真正意义上的回调,因为你可以比如说在一开始就调用该函数,但是如果我们直到最后才调用,就是一个回调,并且拿到返回值比我们的nodejs要简单太多了 不是吗.</p>
<p>所以我们可以直接 这样就保证了回调函数的正确性.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">defer</span> callback()</span><br></pre></td></tr></table></figure>
<p>用a用户注册 存在相同的用户 注册成功 随机的账号</p>
<p>用b用户登录 用户名不存在 然后密码错误 最后登录成功   1111 托尼有点忧伤</p>
<p>最后登录c用户查看消息发送. 123456789 一算</p>
<p>我绝对欧克</p>
<h2 id="SQL预编译">SQL预编译</h2>
<p>其实我就一直都在使用只是我自己没有意识到,笑死我了.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用PreparedStatement实现SQL预编译</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user WHERE id=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 给参数设置值</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 处理结果集</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement实现普通SQL语句执行</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user WHERE id=1&quot;</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 处理结果集</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当然了很多SQL框架都可以进行SQL预编译的操作,并且将其简化了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mybitas中使用SQL预编译的例子</span></span><br><span class="line"><span class="meta">@Update(&quot;update goods set status = 1 where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DropGoods</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<p>SQL预编译的好处如下：</p>
<ol>
<li>提高性能：SQL预编译可以将SQL语句预处理成一个可重复利用的模板，当需要执行相同的SQL语句时，只需要传入不同的参数即可，避免了每次执行都需要解析和优化SQL语句的开销，提高了执行效率。</li>
<li>防止SQL注入：使用SQL预编译时，所有的参数都会被当作参数占位符传递给SQL语句，而不是将参数直接拼接在SQL语句中，避免了SQL注入攻击。</li>
<li>代码可读性：使用SQL预编译可以让代码更加清晰易懂，通过将SQL语句和参数分离，可以使代码更易于维护和调试。</li>
</ol>
<p>SQL预编译的缺点如下：</p>
<ol>
<li>内存占用：在执行预编译语句时，需要为每个预编译语句分配内存，如果预编译的语句过多，会占用大量的内存。</li>
<li>网络开销：由于预编译语句的结果需要传输到客户端，所以在网络传输方面会增加一些开销，特别是当预编译的语句较多时，会占用更多的网络带宽。</li>
</ol>
<p>总的来说，SQL预编译是一种提高数据库操作性能的有效方式，通过将SQL语句预处理成一个可重复利用的模板，可以避免每次执行都需要解析和优化SQL语句的开销，提高了执行效率，并且可以防止SQL注入攻击。但是，预编译语句的过多会占用大量的内存，并且增加网络开销。</p>
]]></content>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/static-html/2023/01/12/BOOK/Vue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>Vue</h1>
<h2 id="项目结构">项目结构</h2>
<blockquote>
<p>index.html    //vue只有一个html页面</p>
<p>/src    // 这里是我们的主要编写内容</p>
<blockquote>
<p>App.vue</p>
<p>main.js</p>
<p>/assert   //静态资源</p>
<blockquote>
<p>css jpg</p>
</blockquote>
<p>/components  组件</p>
<blockquote>
<p>hello.vue</p>
<p>todo.vue</p>
</blockquote>
</blockquote>
</blockquote>
<h1>理解项目</h1>
<p>App.vue 其实也是一个组件 就好像JAVA啊 自己也是一个对象一样</p>
<p><code>vue</code>文件有三个部分 和原生的是一个样的其实是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">// 这里我们可以写一个就是更加基础的组件 就是专为了绑定数据而生的</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;按钮&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button&gt;&#123;&#123; msg &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scope&gt;</span><br><span class="line">    button&#123;</span><br><span class="line">        color:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>非常理想的是 组件间的类名是不会互相影响的 这对于我们的开发很友好</p>
<h2 id="JS-in-Vue">JS in Vue</h2>
<p>我们这里是用的是api形式的书写规范</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt; //setup 在组件被加载的时候就会执行</span><br><span class="line"> //  props 是从父组件中获取到的值</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;按钮&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 我们使用指针进行值的传递</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br></pre></td></tr></table></figure>
<h2 id="Html-in-Vue">Html in Vue</h2>
<p>其实没有什么区别</p>
<p>最外层的template 只是为了说明这里是模板 不会真的有一个<code>template</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使此按钮生效 --&gt;</span><br><span class="line">  &lt;BB :msg=&quot;he&quot;&gt;&lt;/BB&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-in-Vue">CSS in Vue</h2>
<p>其实没有任何的区别  <code>scoped</code> 也是区别啊 确实</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">   	button&#123;</span><br><span class="line">        color:red;</span><br><span class="line">    &#125;    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h1>组件化</h1>
<p>开始真正地书写我们的组件吧</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</span><br></pre></td></tr></table></figure>
<p>这里有它的考虑在里面 如果子组件可以修改父组件的值 这样很麻烦</p>
<p>它想的是 我们直接通过父组件将子组件初始化 然后让其自己可以独立完成某项工作</p>
<p>组件化的布局 我是真的写不出来啊 就是比较麻烦</p>
<p>本来就不是很会布局 结果现在 还要将其划分为组件 这不是为难我吗?</p>
<h1>重启我们的todo</h1>
<p>将其作为我们的第一个项目吧</p>
]]></content>
  </entry>
  <entry>
    <title>Vue初见</title>
    <url>/static-html/2023/01/12/BOOK/Vue%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>环境搭建</h1>
<p>两种方式</p>
<p>1 CDN引入</p>
<p>考虑到 CND引入 每一次都需要下载 我们可以直接将该js文件下载到本地使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2本地化的Vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save vue</span><br></pre></td></tr></table></figure>
<p>vue和react ts之类的<code>语言</code>一样 是无法被浏览器直接运行的 我们需要将其编译成为浏览器可以直接运行的 原生<code>js</code></p>
<h2 id="hello-world">hello world</h2>
<p>不想多写 可是不得不写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 但是这个页面并不能显示出vue的特性 响应式数据绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在我看来 一个更加好的 hello world</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个页面就很好的体现了vue的特性 我们只是修改了count的值 就实现了页面的更新 在之前 我们需要手动的去更新页面 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;count&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>被点击了 &#123;&#123;nums &#125;&#125;次<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">nums</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 控制num进行自增</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">nums</span>++;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据更新-到-视图更新">数据更新 到 视图更新</h2>
<p>v-html v-text v-bind  v-moudel v-once</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>双向数据</p>
<p>视图的显示</p>
<p>v-if v-show</p>
<p>v-on 绑定函数</p>
<p>v-for 生成大量数据 很完美</p>
<h2 id="案例">案例</h2>
<p>一个存储在服务器上的todo list</p>
<p>首先是前端页面的设计 我们需要一个比较美丽的效果</p>
]]></content>
  </entry>
  <entry>
    <title>Express</title>
    <url>/static-html/2023/01/12/BOOK/express/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>express</h1>
<p>一个nodejs的后端框架 但是目前 我并没有体会到 它的好用之处</p>
<p><code>hello world</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Example app listening on port 3000!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后是它很奇怪的路径传值的方式 我们一般是利用 url +?action= …</p>
<p>express是直接使用url的全不 好像不支持? 的方法 感觉有些呆?</p>
<p>占位符传参 就是说 /直接包裹信息/ 这个不太好理解就是接口是做什么的</p>
<h2 id="等我们的项目足够大了-或许我会再用这个重新写一次">等我们的项目足够大了 或许我会再用这个重新写一次</h2>
<h2 id="参考文档">参考文档</h2>
<p><a href="">Express官方文档</a></p>
<h2 id="吐槽">吐槽</h2>
<p>可能是我太菜了 对于前端的理解过于浅显了 在学习使用<code>express</code>的时候总感觉 教程是给哪些已经学会了人使用的 对于我们这样的普通人 阅读体验实在是不是很好</p>
<p>hello world是很简单的 但是很快就会让你摸不着头脑了 哎 还是自己的水平有限吧</p>
<h1>环境搭建</h1>
<p>我不推荐新人就直接使用脚手架之类的东西 我们从零开始 一点点学习和理解 不然真的看不懂的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 创建一个文件夹 并下载express</span><br><span class="line">mkdir express </span><br><span class="line">cd express</span><br><span class="line">npm install --save express</span><br></pre></td></tr></table></figure>
<h1>hello world in express</h1>
<p>创建一个名为hello.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure>
<p>然后用浏览器打开我们的 <code>localhost:3000</code></p>
<p>就可以看见hello world了</p>
<p>到这里的教程还是很正常的 我们下一步是学会托管静态页面</p>
<h2 id="托管静态文件">托管静态文件</h2>
<p>创建一个public 文件夹 在里面写一个名为index.html的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>这样我们就可以直接访问<code>public</code>下的静态文件了</p>
<p><code>localhost:3000/index.html</code> 不必再考虑相对路径了</p>
<h2 id="如何实现访问限制">如何实现访问限制</h2>
<p>就是说 我们只想<code>public </code>下的<code>css</code>文件夹被访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/css&quot;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;public/css&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>我们访问css的请求还是不会出现问题 同时也对访问权限进行了设置</p>
<h1>处理请求</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="params"><span class="string">&quot;/:action/:name/:pwd&quot;</span></span>)&#123;</span><br><span class="line">    <span class="comment">//这样不就可以了 其实也差不多的 哎</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id=""></h2>
]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs</title>
    <url>/static-html/2023/01/12/BOOK/node/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>环境搭建</h1>
<p>这里不解释了</p>
<h1>hello world</h1>
<p>在我看来 这个才是真正意义上的hello world in nodejs –它解释了 我们的nodejs到底是做什么的 而不是你的npm环境</p>
<p>创建一个server.js文件 写入下面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, respond</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    respond.<span class="title function_">end</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>在当前文件夹下打开cmd or powershell 输入 <code>node server.js</code></p>
<p>然后打开浏览器 输入下面的网址 <code>localhost:3000/</code></p>
<p>就可以看到 我们的cmd界面中 输出了<code>hello world</code> 浏览器显示了 hello world (不过是在屏幕的左上角 并且字体有些小)</p>
<h2 id="Nodejs">Nodejs</h2>
<p>我们使用Nodejs 是开发网页的后端 (运行在服务器上的代码)</p>
<p>用于处理我们浏览器的各种请求 比如http 是协议 get是协议中的method 吧</p>
<p>比如 <a href="http://zuoge.online">http://zuoge.online</a> 就是浏览器发送一个get请求到其对应的服务器上 服务器接收请求后 就会返回信息 显示在我们的浏览器中 可以是网页html 或者 数据</p>
<h2 id="解析request请求">解析request请求</h2>
<p>我们的浏览器向服务器发送了http的请求 其中包含了很多信息 比如访问的具体网址 使用的设备 发送请求的ip 大体如图所示</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">其中最关键的是我们的路径解析 </span><br><span class="line"></span><br><span class="line">## 路由</span><br><span class="line"></span><br><span class="line">再看一段代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>const http = require(“http”);</p>
<p>const server = http.createServer((request, respond) =&gt; {<br />
console.log(“hello world”);<br />
respond.end(“hello world”);<br />
})<br />
server.listen(3000);</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们解释一下上面的代码</span><br><span class="line"></span><br><span class="line">console.log() 在nodejs的运行窗口 输出</span><br><span class="line"></span><br><span class="line">respond 返回的信息 就是浏览器访问我们的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 获取get请求的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 解析request中的数据</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">将req中的路由 解析 就是? 及其后面的内容</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; req.<span class="property">url</span>  </span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">将其解析为json</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; json_data = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">获取? 后面的参数</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; q = json_data.<span class="property">query</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">根据 键获取值</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; value  = q.<span class="property">key</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 获取post请求中的数据</span><br><span class="line"></span><br><span class="line">post 无法从路径中获取参数</span><br><span class="line"></span><br><span class="line">这里我们需要其他的方法</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">// 先说js是如何发送post请求的</span><br><span class="line">let xhr = new XMLHttpRequest();</span><br><span class="line">            xhr.open(&quot;POST&quot;, &quot;http://localhost:3000/?action=add_article&quot;, true);</span><br><span class="line">            xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</span><br><span class="line">            xhr.send(JSON.stringify(&#123;</span><br><span class="line">                &quot;author&quot;: document.getElementById(&quot;author&quot;).value,</span><br><span class="line">                &quot;title&quot;: document.getElementById(&quot;title&quot;).value,</span><br><span class="line">                &quot;content&quot;: document.getElementById(&quot;content&quot;).value</span><br><span class="line">            &#125;));</span><br><span class="line">            xhr.onreadystatechange = function () &#123;</span><br></pre></td></tr></table></figure>
<p>我们是如何接受post请求的</p>
<h2 id="利用respond返回数据">利用respond返回数据</h2>
<h3 id="设置状态信息">设置状态信息</h3>
<h2 id="文件读取">文件读取</h2>
<p>fs.readFileSync</p>
<p>这是同步的读取 方式 避免发送空的信息回去</p>
<p>可以对普通文件进行发送 但是对于图片 该怎么办呢?</p>
<h2 id="文件保存">文件保存</h2>
<h2 id="路径重新定向问题">路径重新定向问题</h2>
<p>有些路径的获取 会导致之前的路径无效</p>
<p>目前最好的解决方案就是用相对路径写 并且保证不要出现路径混乱 这里就是自己的代码写得烂啊 你自己想想啊 你如果重定向有问题 不就是直接gg了吗?</p>
<blockquote>
<p>重定向问题</p>
<blockquote>
<p>‘./重新定向文件夹/QQ图片20221004203229.jpg’</p>
</blockquote>
</blockquote>
<h2 id="连接数据库">连接数据库</h2>
<p>需要一个插件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install mysql <span class="comment">--save 还是放到我们的工作环境里面吧</span></span><br></pre></td></tr></table></figure>
<p>这里不写对于数据库的基本操作 而是写 对于操作的要点 比如说 如何去</p>
<h3 id="注册-和-登录">注册 和 登录</h3>
<p><strong>注册方面</strong></p>
<ul>
<li>有不同的账号 检查账号是否相同–账号已经被注册了</li>
<li>先不管这些吧 比如找回什么的</li>
</ul>
<p><strong>登录</strong></p>
<p>user -&gt; pwd -&gt; yes 返回两个不同的信息</p>
<p>账号不存在 -&gt; 密码错误 -&gt; 登录成功</p>
<p>登录函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">respond, respond_data</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 获取到用户名和密码</span></span><br><span class="line">    <span class="comment">// 2. 判断用户名是否存在</span></span><br><span class="line">    <span class="comment">// 3. 如果存在就判断密码是否正确</span></span><br><span class="line">    <span class="comment">// 4. 如果密码正确就返回登录成功</span></span><br><span class="line">    <span class="comment">// 5. 如果密码错误就返回密码错误</span></span><br><span class="line">    <span class="comment">// 6. 如果用户名不存在就返回用户名不存在</span></span><br><span class="line">    db.<span class="title function_">query</span>(<span class="string">&quot;select * from user_info where username = ?&quot;</span>, [respond_data.<span class="property">username</span>], <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明没有相同的用户</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用户名不存在&quot;</span>)</span><br><span class="line">                respond.<span class="title function_">writeHeader</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span> &#125;)</span><br><span class="line">                respond.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;用户名不存在&quot;</span> &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 说明有相同的用户</span></span><br><span class="line">                <span class="keyword">if</span> (result[<span class="number">0</span>].<span class="property">password</span> == respond_data.<span class="property">password</span>) &#123;</span><br><span class="line">                    <span class="comment">// 说明密码正确</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">                    respond.<span class="title function_">writeHeader</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span> &#125;)</span><br><span class="line">                    respond.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;登录成功&quot;</span> &#125;))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 说明密码错误</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;密码是 &quot;</span> + result[<span class="number">0</span>].<span class="property">password</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误的密码是 &quot;</span> + respond_data.<span class="property">password</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;密码错误&quot;</span>)</span><br><span class="line">                    respond.<span class="title function_">writeHeader</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span> &#125;)</span><br><span class="line">                    respond.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="string">&quot;code&quot;</span>: <span class="number">400</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;密码错误&quot;</span> &#125;))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决跨域问题">解决跨域问题</h2>
<p>我们需要在服务端 设置回复信息的头为</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">respond.<span class="built_in">set</span>Header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>就算不设置 信息状态码 都是可以的</p>
<h2 id="编写自己的package">编写自己的package</h2>
<p>这样可以化简我们的</p>
<p>利用moudle.export{</p>
<p>函数名,}</p>
<h1>CMS项目</h1>
<p>content management system 内容管理系统</p>
<p>我们的图床 百度网盘 其实都是一个CMS系统</p>
<h2 id="NP-这里是图床-所以是公开的">NP 这里是图床 所以是公开的</h2>
<p>分析我们的项目结构</p>
<p>index 将上传图像 和 显示图像的页面 聚合到一起</p>
<p>首先是一个 top 导航栏 好吧</p>
<p>其实这里就已经🆗了 logo 是</p>
<p>我们需要一个log 分别是ico webp之类的地方</p>
<table>
<thead>
<tr>
<th>log显示部分</th>
<th>上传图片</th>
</tr>
</thead>
<tbody>
<tr>
<td>图床的显示部分</td>
<td>这里我们使用keep-alive 一个很长的时间 不会很快的更新</td>
</tr>
</tbody>
</table>
<p>这里直接显示10张图片 显示文字 和 图片的内容</p>
<p>class = shower</p>
<p>如何对于图像 还是应该使用就是 new 2 old 的排列方式 图片的大小是统一的 这样让大家都可以看见 我们的缓存的信息 就是还是不错的 list</p>
<h2 id="这里开始我们的上传头像文件作为试点">这里开始我们的上传头像文件作为试点</h2>
<p>如何写一个合理的开发企划</p>
<p>清晰明确的项目文档 哎</p>
<p>其实就是一个 caves 不是很难的吧</p>
<p>所以我们看看 node 和 共</p>
<p>使用redis 进行优化 这里是 进行键值对的 存储</p>
<p>不对 开始加载 然后就可以了</p>
<p>消息队列 使用 redis 实现就好了这个其实估计没有什么技术难度 今年的寒假里 等等啊 我是不是就是经历过这个 这么又到 寒假了 其实我不是很喜欢这个东西 哎</p>
<h2 id="其实我的问题有很多-第一是">其实我的问题有很多 第一是</h2>
<p>nodejs 真的不行吗? 我感觉还可以啊</p>
]]></content>
  </entry>
  <entry>
    <title>学习路线</title>
    <url>/static-html/2023/01/12/BOOK/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>B站的资源</h1>
<p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=3&amp;vd_source=036ef261e6800ac6f6a743a8d5dce899">mysql</a></p>
<p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=3&amp;vd_source=036ef261e6800ac6f6a743a8d5dce899">redis</a></p>
<p><a href="">mongoDB</a></p>
<p><a href="https://www.bilibili.com/video/BV1ME411Y71o/?spm_id_from=333.337.search-card.all.click">GO</a></p>
<h2 id="国外大学的网课">国外大学的网课</h2>
<p><a href="https://missing.csail.mit.edu/">The Missing Semester of Your CS Education</a></p>
<h1>文档</h1>
<p>额 其实很好笑 我不是很想看</p>
]]></content>
  </entry>
  <entry>
    <title>学会任何语言</title>
    <url>/static-html/2023/01/12/BOOK/%E5%AD%A6%E4%BC%9A%E4%BB%BB%E4%BD%95%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>学会任何语言</h1>
<p>这里很明显 不是☞英语 西班牙语之类的 而是说 让一个有编程基础的人 快速上手一个编程语言的通式</p>
<ol start="0">
<li>hello world</li>
<li>变量 和 数据类型</li>
<li>非顺序结构</li>
<li>字符串处理</li>
<li>文件读写</li>
</ol>
<p>我就用我学习GO 作为一个例子吧</p>
<p>同时也希望可以帮助到后面想学习GO的人</p>
<p>小声BB: 这里你会发现 我根本没有讲什么语言的特点 因为我觉得你根本就不了解一门语言 听到大量的名词堆砌 其实没有任何实际的帮助 在摸索中 你会有自己的体会的</p>
<p>比如说 我们的GO error is value</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>等等啊 这里我没有时间了 其实</p>
<p>我很快就要考试了 你说是不是</p>
<h2 id="hello-world">hello world</h2>
<p>这里主要是解决环境问题 不得不承认 这个真的挺麻烦的 虽然大体上都是一个样的</p>
<p>下载一个 编译器/解释器/运行时</p>
<p>将其路径添加到环境变量中</p>
]]></content>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/static-html/2023/01/12/BOOK/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>玩为什么要学习操作系统</h1>
<p>我们所有的软件都是运行在操作系统上的 (操作系统也是一个软件)</p>
<p>我们学习操作系统 不是为了 自己写一个操作系统 而是理解操作系统 帮助我们写出更加优秀的程序 特别在<code>多进程</code> 和<code>多线程</code>方面</p>
<p><a href="https://rawchen.com/307">技术博客参考</a> 五万字100图讲操作系统</p>
<h1>操作系统全局理解</h1>
<p>进程 线程</p>
<p>进程和线程的操作</p>
<p>虚拟内存</p>
<h1>进程 (process)</h1>
<p>定义: 一次执行过程</p>
<p>程序 : 死的代码</p>
<p>进行 : 真正运行的最小单位</p>
<p>四个特征 并发 虚拟 异步 共享</p>
<p>并发 : 某一时间段 处理多件事务</p>
<p>并行 : 某一时刻 同时处理 事务</p>
<p>虚拟 : 磁盘虚拟 我们的固态 变成多个磁盘 一个CPU 虚拟出多个CPU</p>
<p>共享 : 资源共享 不解释了 我们的程序 共用硬件资源</p>
<p>异步 : 这里的异步是说 比如获取用户的键盘输入 肯定是一个异步的 如果是同步的 其他程序就会卡死 这里其实也好理解</p>
<p>将磁盘中的程序读取到内存中 需要cpu吗?</p>
<p>读取数据 需要cpu参与吗?</p>
<h1>工程化的操作系统</h1>
<p>先 明确一点 我们学习操作系统 不是让你学习自己写一个操作系统</p>
<p>所以我们应该学习的路线不是这样的</p>
<ol>
<li>用一门编程语言 创建多个进程 线程 协程</li>
<li>用他们解决问题 并思考存在的问题</li>
</ol>
<p>​</p>
<h2 id="nodejs">nodejs</h2>
<p>我们使用如下的方法 在nodejs里创建子</p>
<p>process and thread</p>
<p>有<code>spawn</code> <code>fork</code> <code>exec</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run child.js&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fork.sj</span></span><br><span class="line"><span class="keyword">import</span> child_process <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line">child_process.<span class="title function_">fork</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;child.js&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;parent process pid&#x27;</span>, process.<span class="property">pid</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出如下 可以看到确实是创建了新的进程 并且两个进程是共用一个输出窗口的</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221119155548858.png" alt="image-20221119155548858" /></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// spawn.js</span></span><br><span class="line"><span class="keyword">const</span> child = child_process.<span class="title function_">spawn</span>(<span class="string">&#x27;node&#x27;</span>, [path.<span class="title function_">resolve</span>(<span class="string">&#x27;child.js&#x27;</span>)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听子进程的输出</span></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child stdout:\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>结果如下  	如果我们不对结果进行监听 子进程的输出不会显示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// exec.js</span></span><br><span class="line">child_process.<span class="title function_">exec</span>(<span class="string">&#x27;node &#x27;</span> + path.<span class="title function_">resolve</span>(<span class="string">&#x27;child.js&#x27;</span>), <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout&#x27;</span>, stdout);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stderr&#x27;</span>, stderr); <span class="comment">// 默认返回字符串</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<p>其实三者之前区别不是很大 看你想做什么</p>
<p>如果是只想完成一个事务 并且需要<code>callback</code> 你可以使用 <code>exec</code> 这样最简单快捷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">child_process.<span class="title function_">exec</span>(<span class="string">&quot;node app.js&quot;</span>,<span class="function">(<span class="params">error,stdout,stderror</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 可以知道子进程运行完毕 和 成功与否</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果是需要频繁的信息交互 使用<code>spawn</code> 对你的子进程输入输出进行管理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听子进程的输出</span></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child print&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果是两个并行的程序 比如说一个监听3000 一个监听5000 就使用<code>fork</code></p>
<h2 id="总结一下">总结一下</h2>
<p>首先 明白一点 异步并不能缩减程序运行的时间 就是说 IO操作还是需要占据我们的CPU的使用的 这个时间是跑不了的</p>
<p>nodejs 是有多个</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">STATUS_CODES: &#123;</span><br><span class="line">&#x27;100&#x27;: &#x27;Continue&#x27;,</span><br><span class="line">&#x27;101&#x27;: &#x27;Switching Protocols&#x27;,</span><br><span class="line">&#x27;102&#x27;: &#x27;Processing&#x27;,</span><br><span class="line">&#x27;103&#x27;: &#x27;Early Hints&#x27;,</span><br><span class="line">&#x27;200&#x27;: &#x27;OK&#x27;,</span><br><span class="line">&#x27;201&#x27;: &#x27;Created&#x27;,</span><br><span class="line">&#x27;202&#x27;: &#x27;Accepted&#x27;,</span><br><span class="line">&#x27;203&#x27;: &#x27;Non-Authoritative Information&#x27;,</span><br><span class="line">&#x27;204&#x27;: &#x27;No Content&#x27;,</span><br><span class="line">&#x27;205&#x27;: &#x27;Reset Content&#x27;,</span><br><span class="line">&#x27;206&#x27;: &#x27;Partial Content&#x27;,</span><br><span class="line">&#x27;207&#x27;: &#x27;Multi-Status&#x27;,</span><br><span class="line">&#x27;208&#x27;: &#x27;Already Reported&#x27;,</span><br><span class="line">&#x27;226&#x27;: &#x27;IM Used&#x27;,</span><br><span class="line">&#x27;300&#x27;: &#x27;Multiple Choices&#x27;,</span><br><span class="line">&#x27;301&#x27;: &#x27;Moved Permanently&#x27;,</span><br><span class="line">&#x27;302&#x27;: &#x27;Found&#x27;,</span><br><span class="line">&#x27;303&#x27;: &#x27;See Other&#x27;,</span><br><span class="line">&#x27;304&#x27;: &#x27;Not Modified&#x27;,</span><br><span class="line">&#x27;305&#x27;: &#x27;Use Proxy&#x27;,</span><br><span class="line">&#x27;307&#x27;: &#x27;Temporary Redirect&#x27;,</span><br><span class="line">&#x27;308&#x27;: &#x27;Permanent Redirect&#x27;,</span><br><span class="line">&#x27;400&#x27;: &#x27;Bad Request&#x27;,</span><br><span class="line">&#x27;401&#x27;: &#x27;Unauthorized&#x27;,</span><br><span class="line">&#x27;402&#x27;: &#x27;Payment Required&#x27;,</span><br><span class="line">&#x27;403&#x27;: &#x27;Forbidden&#x27;,</span><br><span class="line">&#x27;404&#x27;: &#x27;Not Found&#x27;,</span><br><span class="line">&#x27;405&#x27;: &#x27;Method Not Allowed&#x27;,</span><br><span class="line">&#x27;406&#x27;: &#x27;Not Acceptable&#x27;,</span><br><span class="line">&#x27;407&#x27;: &#x27;Proxy Authentication Required&#x27;,</span><br><span class="line">&#x27;408&#x27;: &#x27;Request Timeout&#x27;,</span><br><span class="line">&#x27;409&#x27;: &#x27;Conflict&#x27;,</span><br><span class="line">&#x27;410&#x27;: &#x27;Gone&#x27;,</span><br><span class="line">&#x27;411&#x27;: &#x27;Length Required&#x27;,</span><br><span class="line">&#x27;412&#x27;: &#x27;Precondition Failed&#x27;,</span><br><span class="line">&#x27;413&#x27;: &#x27;Payload Too Large&#x27;,</span><br><span class="line">&#x27;414&#x27;: &#x27;URI Too Long&#x27;,</span><br><span class="line">&#x27;415&#x27;: &#x27;Unsupported Media Type&#x27;,</span><br><span class="line">&#x27;416&#x27;: &#x27;Range Not Satisfiable&#x27;,</span><br><span class="line">&#x27;417&#x27;: &#x27;Expectation Failed&#x27;,</span><br><span class="line">&#x27;418&#x27;: <span class="string">&quot;I&#x27;m a Teapot&quot;</span>,</span><br><span class="line">&#x27;421&#x27;: &#x27;Misdirected Request&#x27;,</span><br><span class="line">&#x27;422&#x27;: &#x27;Unprocessable Entity&#x27;,</span><br><span class="line">&#x27;423&#x27;: &#x27;Locked&#x27;,</span><br><span class="line">&#x27;424&#x27;: &#x27;Failed Dependency&#x27;,</span><br><span class="line">&#x27;425&#x27;: &#x27;Too Early&#x27;,</span><br><span class="line">&#x27;426&#x27;: &#x27;Upgrade Required&#x27;,</span><br><span class="line">&#x27;428&#x27;: &#x27;Precondition Required&#x27;,</span><br><span class="line">&#x27;429&#x27;: &#x27;Too Many Requests&#x27;,</span><br><span class="line">&#x27;431&#x27;: &#x27;Request Header Fields Too Large&#x27;,</span><br><span class="line">&#x27;451&#x27;: &#x27;Unavailable For Legal Reasons&#x27;,</span><br><span class="line">&#x27;500&#x27;: &#x27;Internal Server Error&#x27;,</span><br><span class="line">&#x27;501&#x27;: &#x27;Not Implemented&#x27;,</span><br><span class="line">&#x27;502&#x27;: &#x27;Bad Gateway&#x27;,</span><br><span class="line">&#x27;503&#x27;: &#x27;Service Unavailable&#x27;,</span><br><span class="line">&#x27;504&#x27;: &#x27;Gateway Timeout&#x27;,</span><br><span class="line">&#x27;505&#x27;: &#x27;HTTP Version Not Supported&#x27;,</span><br><span class="line">&#x27;506&#x27;: &#x27;Variant Also Negotiates&#x27;,</span><br><span class="line">&#x27;507&#x27;: &#x27;Insufficient Storage&#x27;,</span><br><span class="line">&#x27;508&#x27;: &#x27;Loop Detected&#x27;,</span><br><span class="line">&#x27;509&#x27;: &#x27;Bandwidth Limit Exceeded&#x27;,</span><br><span class="line">&#x27;510&#x27;: &#x27;Not Extended&#x27;,</span><br><span class="line">&#x27;511&#x27;: &#x27;Network Authentication Required&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Sql锁</title>
    <url>/static-html/2023/01/12/Cookie/SQL%E9%94%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>并发中的mysql</h1>
<p>因为并发出现的问题</p>
<p>脏读 不可重复读 幻读</p>
<p>事务的隔离级别</p>
<h2 id="读锁和写锁">读锁和写锁</h2>
<p>读锁 共享锁: 只能读 , 不可写</p>
<p>写锁 互斥锁: 不能读 , 只有当前事务可以写</p>
]]></content>
  </entry>
  <entry>
    <title>Vpn</title>
    <url>/static-html/2023/01/12/Cookie/VPN/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>VPN</h1>
<p>what is VPN?</p>
<blockquote>
<p>VPN is virtual private network.</p>
</blockquote>
<p>DNS NO 修改DNS无效 这里其实是因为本来google的dns就很远了 不好用</p>
<p>IP NO 直接访问ip 是个傻子都知道你要去哪里 直接关了</p>
<p>VPN Yes 其实你是访问它的服务器,通过一个中间商访问的外部网络 从其他人的视角看来,你只不过是访问了一台不知道做什么用的服务器罢了.</p>
<h2 id="pigcha">pigcha</h2>
<ul>
<li>简单易用</li>
<li>资源较贵</li>
<li>功能比较单一</li>
<li>适合新人</li>
</ul>
<h1>clash</h1>
<ul>
<li>有一定的上手难度  本身不提供网络服务 需要自己去订阅</li>
<li>资源比较便宜</li>
<li>功能很多样 局域网代理 虚拟网卡等</li>
<li>适合有一定动手能力的人</li>
</ul>
<h3 id="局域网代理">局域网代理</h3>
<p>只要是在同一个wifi下的设备都可以享受到这个的代理.</p>
<p>allow lan 就可以了 就是对于电脑的网卡压力比较大</p>
<h2 id="git">git</h2>
<p>pigcha会自动代理我们的git</p>
<p>我们其实也可以使用它不一定非得使用就是它,主要是太贵了 331 200g 平均</p>
<p>接受不了了 我们还是去买一个3600g的吧,感觉就是很够用了 不是吗,这个学期我不应该有其他的消费了</p>
<h1>重装系统</h1>
<p>其实我并不会真正意义上的装系统 – 一台电脑 给他直接装上系统,主要是</p>
]]></content>
  </entry>
  <entry>
    <title>职业规划</title>
    <url>/static-html/2023/01/12/Cookie/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="分析我们的软件开发">分析我们的软件开发</h2>
<p>平台 电脑 手机 X86 ARM</p>
<p>电脑上还还可以分为 客户端 和 网页端</p>
<p>手机上 不知道为什么 几乎没有什么网页端的客户 都是下载软件APP</p>
<p>现在因为微信 和 支付宝这类的国民软件 开发了小程序 其实就是把浏览器放到了 我们的程序里 这里还是使用html的相关知识</p>
<p>但是如果你只是分析后台的部分 你会发现 其实后端 并没有这么多的 区分度 只要我可以给你提供一个接口 让他们访问获取数据 就🆗了</p>
<p>从这个角度来看 如果你学习了前端 你要做的东西很多很杂</p>
<p>我们想这样做吗? 其实是不想的 更加重要的是后台的业务部分</p>
<p>所以说 我决定将我的重心放到后端上</p>
<p>主要是使用go nodejs java?</p>
<p>学习mysql redis mongodb</p>
<p>分布式相关的 nginx 这些</p>
<p>计算机基础知识了 就是 其实也不是很复杂 你说是不是 哈哈哈哈 笑死了</p>
<p>可是没有人帮我写 我应该就是开摆的 你知道吗? 你可以的 我会把接口全部都写好了 就是</p>
]]></content>
  </entry>
  <entry>
    <title>重新认识Typora</title>
    <url>/static-html/2023/01/12/Cookie/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86typora/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1><a id="top">typora重新认识</a></h1>
<p>1 : 使用浏览器搜索</p>
<p>这个是我在设置里面找到的</p>
<p><img src="https://i0.hdslb.com/bfs/album/970e55aeef60a88bb64c9b02513be670e237fb49.png" alt="image-20221021083110534" /></p>
<p>默认是谷歌 但是我们可以改为就是使用bing</p>
<p>使用方法 : 选择文字 然后右键 就有了</p>
<p>2 : 全局内容搜索</p>
<p>检索的范围是 当前文件夹下的 全部文件 包括子文件的文件 不过 只有我们的md文件</p>
<p>使用方法 : 在左下角 点击一下 操作里面的 第二个</p>
<p><img src="https://i0.hdslb.com/bfs/album/b944e9ed209b067cb583ed498aa3df417684472e.png" alt="image-20221021083530479" /></p>
<p>3 自定义快捷键</p>
<p>还是需要我们进入设置文件夹</p>
<p><a href="support.typora.io/Shortcut-Keys/#change-shortcut-keys">typora的快捷键表</a></p>
<p>其实本身就已经很健全了 我们学习一下 就好了 主要是需要直接拉出来我们的全局搜索功能</p>
<p>或者是搜索功能</p>
<p>对的</p>
<p>完美的bind 其实我是对于完美的embed 添加一点点 东西就完美了 哈哈哈</p>
<h2 id="天然的优势">天然的优势</h2>
<p>因为我们的 <code>typora</code> 是用 <code>electron</code> 写的</p>
<p>其实本质还是我们的 <code>html</code> 所以说 <code>typora</code>可以完美插入各种 <code>html</code>元素</p>
<p>特别是我最喜欢的 <code>&lt;embed&gt;</code> 或者是<code>&lt;iframe&gt;</code></p>
<p>或者你想看视频 动图? 无论是本地的还是云端的 都可以满足你</p>
<h2 id="页面跳转">页面跳转</h2>
<p><a href="#top">回到顶部</a></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>CLI工具入门</title>
    <url>/static-html/2023/01/12/Guides/CLI%E5%B7%A5%E5%85%B7%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>CLI工具入门</h1>
<p>随着我对于键盘的喜爱程度不断上升— 希望更多的操作都通过我们的键盘去完成 对于CLI工具的要求自然就有了.</p>
<p>我觉得只要可以解决你的问题,图形化还是命令行都是很好的工具 qaq</p>
<h1>CLI 框架</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/urfave/cli/v2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (<span class="string">&quot;github.com/urfave/cli/v2&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="hello-world">hello world</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/urfave/cli/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := &amp;cli.App&#123;</span><br><span class="line">        Name:  <span class="string">&quot;boom&quot;</span>,</span><br><span class="line">        Usage: <span class="string">&quot;make an explosive entrance&quot;</span>,</span><br><span class="line">        Action: <span class="function"><span class="keyword">func</span><span class="params">(*cli.Context)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;boom! I say!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := app.Run(os.Args); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="基本概念">基本概念</h2>
<p>FLAG  –flag</p>
<p>Argument</p>
<p>Command</p>
<p>Action</p>
<h1>利用参数</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1>利用FLAG</h1>
<h1>结合</h1>
<p>优先级问题</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">gt argv <span class="comment">--flag</span></span><br><span class="line"></span><br><span class="line">gt <span class="comment">--flag argv</span></span><br></pre></td></tr></table></figure>
<p>等一下 这里的问题在于 我们的flag类型是否会对我们的结果造成影响</p>
<p>当string flag 不输入参数时 就会视为 help</p>
<p>但是如果时 bool flag 就不会出现这样的问题</p>
<p>一句话 flag 始终应该在参数的前面</p>
<p>然后根据flag是否需要参数 也就是我们的bool类型不需要参数 向后增加 就是这样的一个逻辑</p>
<p>如果执行了 subcommand 的action 就不会执行主程序的action 只会执行一个action 如果</p>
<p>如果我们想在build 后运行 程序 很明显 我们应该把我们的逻辑放到我们的就是subcommand中去</p>
<p>flag 在我们的 subcommand 前</p>
<p>flag是最高的优先级</p>
<p>hexo -s</p>
<p>hexo -w 这里是一个布尔类型的 其实是</p>
]]></content>
  </entry>
  <entry>
    <title>视频和音频</title>
    <url>/static-html/2023/01/12/Word/%E8%A7%86%E9%A2%91%E5%92%8C%E9%9F%B3%E9%A2%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>文件格式</h1>
<p>文件格式的作用就是告诉我们的计算机如何去读取\处理该文件.</p>
<p>不同的文件格式并不代表他们的内容或者说编码是不同的,比如md和txt,两者都是纯文本,只不过使用md文件会通过特殊的渲染程序.</p>
<p>理解了这一点将会帮助你理解后面的内容.</p>
<h1>音频</h1>
<blockquote>
<p>常见的音频格式 MP3(mpeg) WMA  WAV  APE  FLAC OGG AAC</p>
</blockquote>
<p>不要看网上说,mp3是有损压缩  WMA是无损的这样的话,这里还涉及到了一个码率问题</p>
<ul>
<li>
<p>采样率 类别视频的帧率   16khz 44.1khz</p>
<p>这里不就是可以记录一个超声波的结果了吗</p>
</li>
<li>
<p>分辨率 8bit 用于表示   db大小访问. 那不就是没有区别吗</p>
</li>
</ul>
<p>这里的涉及到的问题有点多 首先我们知道声音是因为物体震动产生的,我们就可以通过描述这个震动的波形图,知道声音的参数.</p>
<p>声音的三要素, 响度(DB) 体现在波形图上的增幅</p>
<p>音调(HZ) 体现在波形图就是波的频率</p>
<p>音色 这个其实不重要 就是区分 汽车鸣笛和钢琴 一个让人感到不适 另一个让人感觉恬静</p>
<p>我们现在需要将声音记录下来</p>
<p>采样率Sampling rate  因为我们不可能取无穷多个点 只能比如说 16khz 44.1khz 后者的波形图细节更好</p>
<p>采样深度 现在确定了一秒种记录多少次数据 但是数据的取值访问还没有确定</p>
<p>比如8bit 就是48分贝  16比特96分贝 20bit120分贝 如果不存在绝对的高音和低音 8bit就够用了</p>
<p>声道 虽然一般都是双声道 两个耳朵 但是很多音频文件并不存在就是差异 3D环绕音就是两只耳朵播放的声音是不同的.</p>
<h2 id="不同格式的区别">不同格式的区别</h2>
<p>我喜欢直接一点,作为后来出现的音频格式ACC有着更高的压缩率,被普遍使用在视频文件中,故此问题完结,以后我们就只需要使用它作为我们唯一的存储格式就好了.</p>
<h2 id="音频格式间的转化">音频格式间的转化</h2>
<p>就是使用ffmpeg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.mp3转wav (默认格式)：</span><br><span class="line">ffmpeg -i XXX.mp3 -f wav XXX.wav</span><br><span class="line"></span><br><span class="line">2.mp3转pcm （自定义格式：采样率16000hz，分辨率16bits，单声道）：</span><br><span class="line">ffmpeg -i xxx.mp3 -acodec pcm_s16le -f s16le -ac 1 -ar 16000 xxx.pcm</span><br><span class="line"></span><br><span class="line">3.mp3转ogg</span><br><span class="line">ffmpeg -i xxx.mp3 -acodec libvorbis -ab 128k xxx.ogg</span><br><span class="line"></span><br><span class="line">4.amr转wav：</span><br><span class="line">ffmpeg -acodec libamr_nb -i XXX.amr XXX.wav</span><br><span class="line"></span><br><span class="line">5.amr转mp3：</span><br><span class="line">ffmpeg -i XXX.amr XXX.mp3</span><br><span class="line"></span><br><span class="line">6.wav转amr：</span><br><span class="line">ffmpeg -i XXX.wav -acodec libamr_nb -ab 12.2k -ar 8000 -ac 1 XXX.amr</span><br><span class="line"></span><br><span class="line">7.wav转mp3：</span><br><span class="line">ffmpeg -i XXX.wav -f mp3 -acodec libmp3lame -y XXX.mp3</span><br><span class="line"></span><br><span class="line">8.wav转pcm：</span><br><span class="line">ffmpeg -i xxx.wav -acodec pcm_s16le -f s16le -ac 1 -ar 16000 xxx.pcm</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>视频</h1>
<p>常见的视频格式有mp4 mov flv</p>
<p>推荐使用的是 mp4 h265 可以减少带宽和内存占用 但是对于解码器具有一定的要求 比如老的电脑就不支持了 win10需要下载hevc</p>
<p>但是真的很好用就是了</p>
<p>视频格式 30fps H265 1080p 5-10Mbps  目前没有找到使用GPU加速的方面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -hwaccel cuvid -c:v h264_cuvid -i 1.mp4 -c:v hevc_nvenc -preset medium -rc:v vbr_hq -r 30 -c:a copy GPU.mp4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>名词解释</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP的使用</title>
    <url>/static-html/2022/12/12/Cookie/FTP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>FTP的使用</h1>
<details><summary>什么是FTP</summary>
    FTP (File Transfer Protocol) is used to communicate and transfer files  between computers on a TCP/IP (Transmission Control Protocol/Internet  Protocol) network, aka the internet. Users, who have been granted  access, can receive and transfer files in the File Transfer Protocol  server (also known as FTP host/site).
</details>
<p>一种文件的传输协议 我们不必探究底层的原理 只需要学会使用就好了</p>
<h2 id="服务器端口">服务器端口</h2>
<p>ftp默认使用 21 20 两个端口 计算机网络也讲了这个</p>
<p>39000-40000 这个是我们PureFTPd的默认端口访问</p>
<p>我们需要在服务器的防火墙开发端口</p>
<h2 id="软件">软件</h2>
<p><a href="https://filezilla-project.org/">FileZilla</a> 免费软件 也不必我们去Windos控制面板里设置什么 开箱即用 简单小巧</p>
<p><a href="">PureFTPd</a> 这个是宝塔面板默认安装的软件 我们不必配置</p>
<h2 id="创建ftp账户">创建ftp账户</h2>
<p>在我们的宝塔面板中 选择ftp –&gt;添加ftp</p>
<p><img src="https://i0.hdslb.com/bfs/album/a877f6480cc8ab1ccb10bd2f9636ec807a009331.png" alt="image-20221021123908597" /></p>
<h2 id="连接设置">连接设置</h2>
<p>主机就是服务器的ip</p>
<p>加密这里只能选择明文FTP</p>
<p>用户和密码是你刚刚设置的</p>
<p><img src="https://i0.hdslb.com/bfs/album/af3a4f73bd3d90b8cb98d6fea23cb0e3dd011ec6.png" alt="image-20221021123344061" /></p>
<p><strong>重点来了</strong></p>
<p>传输设置 –&gt; 被动</p>
<p>之前网络上好多教程说是主动传输 结果反而是错的 不能理解</p>
<p>当然了 我也不过是 一个初学者 只是解决了问题 并不懂得背后的原理 甚至很多时候 能够解问题 都是凭借运气</p>
<h2 id="大功告成">大功告成</h2>
<p>开始使用ftp进行文件传输吧</p>
]]></content>
  </entry>
  <entry>
    <title>JAVA_PATH</title>
    <url>/static-html/2022/12/12/Cookie/JAVA_PATH/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>JAVA环境配置</h1>
<p>首先 你需要下载并安装 <a href="https://www.oracle.com/java/technologies/downloads/">JDK</a> (Java SE Development)</p>
<p>大概的名字是<code>jdk-17_windows-x64</code> 之类的 不要下载运行时<code>runtime</code></p>
<p>请牢记你的安装路径</p>
<h2 id="配置JAVA-HOME-和-CLASSPATH">配置JAVA_HOME  和 CLASSPATH</h2>
<p>你需要记住之前的安装路径 这很正常 然后添加环境变量</p>
<p>新建一个变量环境变量 名字为JAVA_HOME 内容为 上面的路径 <code>SOFT\JAVA</code></p>
<p>新建一个环境变量 名字为CLASSPATH 内容为 <code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</code></p>
<p>然后添加PATH</p>
<p>新建 添加如下的路径</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">JAVA_HOME</span></span>%\bin</span><br><span class="line"><span class="tag">%<span class="selector-tag">JAVA_HOME</span></span>%\jre\bin</span><br></pre></td></tr></table></figure>
<h2 id="报错">报错</h2>
<p>如果有<code>java</code> 但是没有<code>javac</code> 很可能是没有安装正确的<code>JDK</code></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221104144002765.png" alt="image-20221104144002765" /></p>
<p>删除我们的 <code>lib/ext</code> 文件夹就好了</p>
<p>有的时候<code>win</code>会无法识别<code>%</code>里的内容 建议将上面的 <code>%JAVA_HOME</code> 写成绝对路径</p>
]]></content>
  </entry>
  <entry>
    <title>Join和+在文件路径处理上的对比</title>
    <url>/static-html/2022/12/12/Cookie/join%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E5%9C%A8%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>前言</h1>
<p>我们在写代码的时候 经常会遇到文件读写 之类需要文件路径的情况 你可以使用<code>path.join</code> 或者 <code>+</code>对字符串进行拼接 我们就来分析一下两者的区别</p>
<h2 id="通用性分析">通用性分析</h2>
<p>在<code>windows</code>下我们<code>backslash</code>  在<code>Unix</code>下我们使用 <code>slash</code></p>
<p><img src="http://81.68.91.70/picgo/7_49_57.webp" alt="image-20221103074957329" /></p>
<p>搞笑的是 <code>backslsh \</code>还有转义的意思 为了避免被转义 需要写成 <code>\\</code> 如果在传输的过程中 对其进行了多次处理(你不知道这个<code>\</code>) 很可能变成这样的结果</p>
<p>很明显 如果你使用 <code>\</code>在windos下 不会出现的问题 到了服务器上就会出现一些意外情况</p>
<p>通用性上 <code>join </code>完胜</p>
<h2 id="实用性分析">实用性分析</h2>
<p>写代码的时候 难免会写很多错误 如果代码可以处理我们的错误就会很舒服</p>
<p>我们的<code>path.join</code> 拥有错误处理能力</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="comment">// 使用的是相对路径 </span></span><br><span class="line"><span class="keyword">let</span> path_test1 = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(),<span class="string">&quot;./network&quot;</span>,<span class="string">&quot;./test.jpeg&quot;</span>)</span><br><span class="line"><span class="comment">// 有/ 并且过多</span></span><br><span class="line"><span class="keyword">let</span> path_test2 = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(),<span class="string">&quot;/network&quot;</span>,<span class="string">&quot;////test.webp&quot;</span>)</span><br><span class="line"><span class="comment">// 有/ 并且是反斜杠</span></span><br><span class="line"><span class="keyword">let</span> path_test3 = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(),<span class="string">&quot;\\network&quot;</span>,<span class="string">&quot;\\test.webp&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path_test1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path_test2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path_test3)</span><br></pre></td></tr></table></figure>
<p>他们都可以获得正确的结果 并且是可以不同平台间通用的 (我的是win 所以最后的路径使用的是<code>\</code>)</p>
<p><img src="http://81.68.91.70/picgo/8_43_8.webp" alt="image-20221103084308130" /></p>
<p>实用性分析 也是<code>join</code>的胜利</p>
<h2 id="性能分析">性能分析</h2>
<p>其实不必 分析也可以知道 肯定是字符串拼接的效率要高 但是这一点点的性能差别真的没有太大优化的意义</p>
<p>两个性能差别挺大的</p>
<details><summary>分析设计</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">from</span> <span class="string">&quot;./api/time.js&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params">fun, times</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="title function_">time</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">        <span class="title function_">fun</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="title function_">time</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始时间&quot;</span> + start)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;结束时间&quot;</span> + end)</span><br><span class="line">    <span class="comment">// console.log(&quot;耗时&quot;+(end-start))</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test_join</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> path_new = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), <span class="string">&quot;network&quot;</span>, <span class="string">&quot;test.jpeg&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> path_new2 = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), <span class="string">&quot;network&quot;</span>, <span class="string">&quot;\\test.jpeg&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test_plus</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> path_new = process.<span class="title function_">cwd</span>() + <span class="string">&quot;/network&quot;</span> + <span class="string">&quot;/test.jpeg&quot;</span></span><br><span class="line">    <span class="keyword">let</span> path_new2 = process.<span class="title function_">cwd</span>() + <span class="string">&quot;/network/&quot;</span> + <span class="string">&quot;test.jpeg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">timer</span>(test_join, <span class="number">10000000</span>)</span><br><span class="line"><span class="title function_">timer</span>(test_plus, <span class="number">10000000</span>)</span><br></pre></td></tr></table></figure>
结果是:
开始时间8_36_19
结束时间8_36_27
开始时间8_36_27
结束时间8_36_27
</details>
<h2 id="总结">总结</h2>
<p>​		一个软件最关键的指标就是健硕性 先确保程序可以正常运行 我们再来讨论其他的</p>
<p>所以以后无论什么情况下 我们都使用<code>path.join</code>来处理我们的文件路径问题</p>
<h2 id="小技巧">小技巧</h2>
<p><code>ES6</code>中我们无法使用<code>__dirname</code> 来获取当前的文件的路径  可以采用如下的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dirname = process.<span class="property">argv</span>[<span class="number">1</span>].<span class="title function_">reaplce</span>(文件名,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>当然了这个其实还是有问题的啊 就是如果是模块的话</p>
<h1>模块间的信息传递</h1>
<p>导出函数 和 变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// core.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>)&#123;<span class="keyword">return</span> x+y&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;a,b,add&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> core <span class="keyword">from</span> <span class="string">&quot;core.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(core)</span><br></pre></td></tr></table></figure>
<p>这样我们就可以获取到 <code>core</code> 中的函数和变量</p>
<p>不过 其中的变量是常量 是无法修改的 我们传递一个对象就好了</p>
<p>变量在自己的模块里是可以被修改的 到了其他的模块就会变成常量</p>
<p>核心模块 就是无法向其他模块传递信息的 我们只有通过函数的参数传递</p>
<p>获取当前的路径</p>
<p>在其他的模块里也可以获得 就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dirname = process.<span class="title function_">cwd</span>()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>单元测试</title>
    <url>/static-html/2022/12/12/Cookie/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>Unit Testing</h1>
<p>我们对于最小单元进行测试 比如上传图片 cover 之类 的</p>
<h2 id="测试方法">测试方法</h2>
<ol>
<li>
<p>手动测试</p>
<p>就是人工对于api进行测验 这个其实我经常做 比如说看看前端是否可以拿到了信息 现在我们不要这样了</p>
</li>
<li>
<p>断言测试</p>
</li>
</ol>
<p>这里就是我们自己编写断言语句 比如说</p>
<p>assert.equal(期望,结果)</p>
<p>3.测试框架</p>
<p>mocha</p>
<p>这个目前的问题在于 我不会异步测试 因为很多设计网络请求的库 是肯定需要自己</p>
<h1>有关控制台的单元测试</h1>
<p>作为一名学生 特别是<code>c</code> 和 <code>c++</code>的学生 你肯定会接触很多就是类似于 输入3个数字 返回最大的 输入一组数据 进行排序之类的问题</p>
<p>这类问题 本身其实并不困难 只是调试起来比较麻烦</p>
<p>对于这种是在控制台进行输入输出的代码 我们可以使用<code>vbs</code>进行单元测试</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入你的姓名：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;你好，&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个用于暂停程序，防止程序运行完毕后自动退出</span></span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line">// test.vbs</span><br><span class="line"><span class="keyword">Set</span> shell = <span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">shell.Sendkeys <span class="string">&quot;test.exe&quot;</span></span><br><span class="line">shell.Sendkeys <span class="string">&quot;&#123;ENTER&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">shell.Sendkeys <span class="string">&quot;KM911&quot;</span></span><br><span class="line">shell.Sendkeys <span class="string">&quot;&#123;ENTER&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>在当前目录下打开控制台</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">g++ test.cpp -o test.exe -fexec-charset=gbk &amp;&amp; test.vbs</span><br></pre></td></tr></table></figure>
<p>结果如图 	切记 不要在vbs中尝试输出中文 并且对于存在<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>的问题要小心</p>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>就是说程序运行需要一定的 时间 比如我们将<code>g++</code>的编译指令也是可以写到<code>vbs</code>里的 但是我们不知道这个需要多久的时间 可能<code>g++</code>还没有编译成功 你就已经进行<code>Sendkeys</code> 导致脚本失效 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
  </entry>
  <entry>
    <title>后端快速入门</title>
    <url>/static-html/2022/12/12/Cookie/%E5%90%8E%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><p>#从请求中获取信息</p>
<h2 id="params">params</h2>
<p>url/{name}   url/123456/</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/del/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Respond <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(name = &quot;name&quot;)</span> String name)</span> &#123;</span><br></pre></td></tr></table></figure>
<h2 id="query">query</h2>
<p>url/?name=123456</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span>&#123;</span><br></pre></td></tr></table></figure>
<h2 id="body">body</h2>
<p>json www 也有格式不一样的 就是我们注意一下就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Respond <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestBody</span> Image image)</span> <span class="keyword">throws</span> IOException &#123;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.Params  <span class="comment">// get data from url/&#123;name&#125;/&#123;password&#125;</span></span><br><span class="line">c.Query   <span class="comment">// url/?name=123456&amp;password=123 </span></span><br><span class="line">c.ParseBody <span class="comment">// get data from body json </span></span><br><span class="line">c.PostForm <span class="comment">// get data from body multipart/form-data</span></span><br><span class="line">c.FormFile <span class="comment">// get file object</span></span><br></pre></td></tr></table></figure>
<h2 id="利用map获取参数">利用map获取参数</h2>
<h1>返回信息</h1>
]]></content>
  </entry>
  <entry>
    <title>文件读写</title>
    <url>/static-html/2022/12/12/Cookie/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>文件读写</h1>
<h2 id="fs读取文件">fs读取文件</h2>
<p>这个是nodejs提供的默认模块 可以在服务器后端使用 自然无法在服务器里使用</p>
<p>这个需要引入 但是其实也是一个原生的模块 类似于cmath 之类的东西</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>fs.readFileSync (file_name)</td>
<td>同步读取文件</td>
</tr>
<tr>
<td>fs.readFile(file_name)</td>
<td>异步读取文件</td>
</tr>
<tr>
<td>fs.writeFileSync(file_name,data)</td>
<td>同步写入文件</td>
</tr>
<tr>
<td>fs.writeFile(file_name,data,callback)</td>
<td>异步写入文件</td>
</tr>
<tr>
<td>fs.appendFileSync(file_name,data)</td>
<td>同步追加写入</td>
</tr>
<tr>
<td>fs.appendFile(file_name,data,callback)</td>
<td>异步追加写入</td>
</tr>
<tr>
<td>fs.renameSync(old_name,new_name)</td>
<td>修改文件名字</td>
</tr>
<tr>
<td>fs.unlinkSync(file_name)</td>
<td>删除文件</td>
</tr>
</tbody>
</table>
<p>读取出来的是<code>buffer</code> 使用<code>toString</code> 就可以将其变成字符串</p>
<p>对于加密的文件 比如说 doc 之类的 如果直接按照<code>utf-8</code>读取就会乱码 这里我暂时还不知道该如何处理 等等啊</p>
<p>其实我们也可以这样写 <code>let data = fs.readFileSync('code.txt', 'utf8');</code> 这样的到的就是字符串了 而不是<code>buffer</code></p>
<h2 id="浏览器中读取文件-原生读取文件">浏览器中读取文件 原生读取文件</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;file&quot;</span>).<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="title function_">readAsDataURL</span>(file); <span class="comment">// 参数是一个 input获取到的file对象</span></span><br><span class="line">reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reader.<span class="property">result</span>.<span class="title function_">toString</span>());&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input获取到的file对象</span></span><br><span class="line"><span class="title class_">File</span> &#123; <span class="attr">name</span>: <span class="string">&quot;0.webp&quot;</span>, <span class="attr">lastModified</span>: <span class="number">1666417227164</span>, <span class="attr">webkitRelativePath</span>: <span class="string">&quot;&quot;</span>, <span class="attr">size</span>: <span class="number">39662</span>, <span class="attr">type</span>: <span class="string">&quot;image/webp&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DataURL  是文件类型 + 文件的base64 数据编码 我们</span></span><br><span class="line"><span class="attr">data</span>:image/webp;base64,<span class="title class_">UklGRuaaAABXRUJQVlA</span>...</span><br><span class="line">aaAABXRU=</span><br></pre></td></tr></table></figure>
<p>使用 DateURL 读取xls文件 是使用base64 保存 可以直接保存 不会乱码</p>
<p><img src="https://i0.hdslb.com/bfs/album/2ac4a0b54f31e2ca699f120b3c07710073d89ff4.png" alt="image-20221024190747948" /></p>
<p>保存文件的一个方法 确实是很有意思的 利用a标签 笑死我了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">a.<span class="property">href</span> = reader.<span class="property">result</span>.<span class="title function_">toString</span>(); <span class="comment">// 保存的dataURL</span></span><br><span class="line">a.<span class="property">download</span> = file.<span class="property">name</span>; <span class="comment">// 文件名称 string</span></span><br><span class="line">a.<span class="title function_">click</span>();</span><br></pre></td></tr></table></figure>
<h2 id="协同工作">协同工作</h2>
<p>我们上面说了 可以使用DateURL 进行文件的传输 但是我们需要将文件前面的 格式表示移除 然后再保存 文件</p>
<p>为了是下载文件 而不是 打开文件 我们需要进行如下的设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  文件大小的设置 </span></span><br><span class="line">respond.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Length&quot;</span>, fs.<span class="title function_">statSync</span>(file_path).<span class="property">size</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>传输流 而不是传输文件 这里是我之前的错误做法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接返回数据 先不说对于线程的阻塞的严重性 其实就算你使用异步 也还是会有影响 </span></span><br><span class="line"><span class="comment">// 用户需要等待 我们的文件读取 完毕后 才会显示是否下载的选项</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(file_path,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">respond.<span class="title function_">end</span>(data)</span><br></pre></td></tr></table></figure>
<h2 id="正确的做法">正确的做法</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用文件流 其实感觉很抽象 </span></span><br><span class="line"><span class="keyword">let</span> file = fs.<span class="title function_">createReadStream</span>(file_path)</span><br><span class="line"> respond.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">     <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">     <span class="string">&quot;Content-Disposition&quot;</span>: <span class="string">&quot;attachment;filename=&quot;</span> + <span class="built_in">encodeURIComponent</span>(file_name) + <span class="string">&quot;;filename*=utf-8&#x27;&#x27;&quot;</span> + <span class="built_in">encodeURIComponent</span>(file_name),</span><br><span class="line">     <span class="string">&quot;Content-Length&quot;</span>: fs.<span class="title function_">statSync</span>(file_path).<span class="property">size</span></span><br><span class="line"> &#125;)</span><br><span class="line">file.<span class="title function_">pipe</span>(respond)</span><br></pre></td></tr></table></figure>
<h3 id="webp的案例">webp的案例</h3>
<p>这里我们的webp文件本身 其实是只需要 后面的数据部分 我们利用replace将其移除</p>
<p>我在想正确的做法 是不是按照<code>,</code> 号来分割 这样我们还可以判断其文件格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> base64Data = json_data.<span class="property">data</span>.<span class="title function_">replace</span>(<span class="regexp">/^data:image\/webp;base64,/</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;images/&quot;</span> + json_data.<span class="property">filename</span>, base64Data, <span class="string">&#x27;base64&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>)</span><br></pre></td></tr></table></figure>
<h2 id="这里的问题是-我们如何使用一个a标签进行远程的下载">这里的问题是 我们如何使用一个a标签进行远程的下载</h2>
<p>这里其实需要两个就是 a和 nodejs的后台配合</p>
<p>这里我们需要 设置 respond header</p>
]]></content>
  </entry>
  <entry>
    <title>服务器代码不可用</title>
    <url>/static-html/2022/12/12/Cookie/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%A0%81%E6%9C%AC%E5%9C%B0%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>服务器代码本地不可用问题</h1>
<p>很现实的问题 以数据库为例 在服务器上 我们是访问<code>localhost </code>但是在本地的时候 你没有数据库 就无法运行我们的程序 还有发送请求的url问题</p>
<h2 id="解决方案">解决方案</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;解释 这里是服务器的配置 database 表示是否连接到服务器 root 是根目录&quot;</span>,</span><br><span class="line">        <span class="string">&quot;history_message_max_length&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;root&quot;</span>: <span class="string">&quot;http://81.68.91.70&quot;</span>,</span><br><span class="line">        <span class="string">&quot;database&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;@Dzg15484&quot;</span>,</span><br><span class="line">            <span class="string">&quot;database&quot;</span>: <span class="string">&quot;node&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;local&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;history_message_max_length&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;root&quot;</span>: <span class="string">&quot;http://localhost:3000/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;database&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host&quot;</span>: <span class="string">&quot;81.68.91.70&quot;</span>,</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">&quot;@Dzg15484&quot;</span>,</span><br><span class="line">            <span class="string">&quot;database&quot;</span>: <span class="string">&quot;node&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我写了如上的配置文件 每次运行前程序读取配置信息</p>
<h3 id="数据库的连接">数据库的连接</h3>
<p>这里通过读取上面的配置文件 决定是否连接数据库 如何连接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check_platfrom</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> file = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;./config.json&quot;</span>)</span><br><span class="line">    file = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(file)</span><br><span class="line">    <span class="keyword">if</span> (os.<span class="title function_">platform</span>() == <span class="string">&quot;win32&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">global</span>.<span class="property">settings</span> = file.<span class="property">local</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">global</span>.<span class="property">settings</span> = file.<span class="property">server</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">global</span>.<span class="property">settings</span>.<span class="property">database</span> == <span class="string">&quot;true&quot;</span>) &#123; <span class="comment">// 是否连接数据库</span></span><br><span class="line">        <span class="variable language_">global</span>.<span class="property">db</span> = mysql.<span class="title function_">createConnection</span>(<span class="variable language_">global</span>.<span class="property">settings</span>.<span class="property">db</span>)</span><br><span class="line">        <span class="variable language_">global</span>.<span class="property">db</span>.<span class="title function_">connect</span>() </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态资源的访问">静态资源的访问</h3>
<p>目前我们有两种静态资源</p>
<ol>
<li>服务器本地上的资源 推荐使用相对路径 这样只要你是在本地上可以运行的 服务器上面也是可以运行的</li>
<li>COS资源 这个的使用时间还很长 相对位置也不会太会改变 所以也不必考虑太多 本地上可以运行 也就不会出问题</li>
</ol>
<h3 id="http请求问题">http请求问题</h3>
<p>这里是最头疼的地方了 因为这个是js的 就是运行在客户端 存在一个就是跨域问题</p>
<p>解决方案</p>
<p>在我们的js文件头部加上  这样就可以实现测试环境和生产环境的统一了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line"><span class="keyword">if</span> (url.<span class="title function_">startsWith</span>(<span class="string">&quot;http://localhost&quot;</span>)) &#123;</span><br><span class="line">    request_url = <span class="string">&quot;http://localhost:3000/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    request_url = <span class="string">&quot;http://81.68.91.70/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>服务器的网络带宽优化</title>
    <url>/static-html/2022/12/12/Cookie/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>服务器的带库优化</h1>
<p>发一张图片的压力 太大了 我们的网络带宽 就只有就是 这里就异步发送信息 可以吗? 其实 是可以的 主要是 image的压力比较大 哎</p>
<p><a href="https://zhuanlan.zhihu.com/p/157112243">消息队列的介绍</a></p>
<p>使用我们的腾讯云 SDK 优化</p>
<p>心路历程  看看我们的服务器贷款吧</p>
<p>可以看见 我们的网络带宽的使用 呈现很明显的就是 突变性 大部分的时间都是在很低的使用率 但是突然就会出现 很高的使用量 这样的结果是我们不想见到的 我们需要 一个<em>三峡大坝</em> 进行<em>流量调控</em></p>
<p><img src="https://i0.hdslb.com/bfs/album/eb837735a905edc914c9ad7ad10e2d4bb3e70d0b.png" alt="image-20221021095114836" /></p>
<h2 id="消息队列">消息队列</h2>
<p>队列在数据结构里面我们已经学习过了 FIFO的一种结构 (主要是为了保证消息的先后顺序)</p>
<h3 id="初步尝试">初步尝试</h3>
<p>为了实现可以存储 历史消息的功能 我写下了如下的代码</p>
<p>就是创建了一个长度为n的列表 会存储n条消息</p>
<p>当消息数目不超过n条 直接将信息存储</p>
<p>如果超过n条 就将最早的一条删除 然后将新的信息存储</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">message_queue</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加消息</span></span><br><span class="line">    <span class="title function_">add_message</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">message</span>.<span class="property">length</span> &lt; max_length) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">push</span>(message)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// message.shift() 删除数组的第一个元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">push</span>(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取消息</span></span><br><span class="line">    <span class="title function_">get_message</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用户登录时 我们就将消息发送给用户 实现了获取历史消息的功能</p>
<h2 id="二次优化">二次优化</h2>
<p>一开始 我是直接将全部的信息 直接发送给用户</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">message = <span class="title class_">MessageQueue</span>.<span class="title function_">get_message</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; message.<span class="property">length</span>; i++) &#123;    </span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message[i]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样当然没有任何的问题 只是 不利于我们的带宽</p>
<p>所以我现在使用一个回调函数 变成这样 其实就是1秒后再将消息发送给用户 [^小错误]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; message.<span class="property">length</span>; i++) &#123;    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 1秒后发送消息</span></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message[i]))</span><br><span class="line">    &#125;, <span class="number">1000</span>*i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图片优化">图片优化</h2>
<p>问题 图片的信息量 很大 我其实已经做了一次优化了</p>
<p>使用<a href="webp%E4%BB%8B%E7%BB%8D.md">webp</a> 而不是原本的图片格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">image_to_webp</span>(<span class="params">image_base</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">src</span> = image_base;</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">            canvas.<span class="property">width</span> = img.<span class="property">width</span>;</span><br><span class="line">            canvas.<span class="property">height</span> = img.<span class="property">height</span>;</span><br><span class="line">            <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">let</span> data = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/webp&quot;</span>, <span class="number">0.5</span>); <span class="comment">//0.5表示压缩率</span></span><br><span class="line">            <span class="title function_">resolve</span>(data) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一步是写在用户端的 所以不会使用我们的服务器算力 同时还可以减少网络带宽的压力 但是 还是不够</p>
<h1>对象存储的使用</h1>
<p>现在我们使用腾讯的COS 进行网页加速</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//zuoge-1307686113.cos.ap-nanjing.myqcloud.com/img/author_background_image.webp</span></span><br><span class="line">很明显 其实这个获取文件应该时很简单的 </span><br><span class="line">解析一下上面的网站 可以看出来是</span><br><span class="line"><span class="attr">https</span>:<span class="comment">// + 对象存储的名字 + 对象存储位置 + 文件路径</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>好 我们现在试试看获取我们的  mp3文件试试看</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>zuoge-<span class="number">1307686113</span>.cos.ap-nanjing.myqcloud.com<span class="regexp">/video/gi</span>egie.mp3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="之前的错误处理">之前的<em>错误</em>处理</h2>
<p>其实倒也不是错误 只是不够好 我们利用我们的服务器存储图片资源 对于网络带宽很不友好 现在我们将图片上传到腾讯云COS上 返回一个url 让客户直接访问</p>
<p>这样有两个好处  一是我们的服务器压力减小了 二是提高了用户的访问速度</p>
<p>唯一的缺点就是 得加钱 哈哈哈哈哈 不过其实腾讯云的价格是很实惠的</p>
<h2 id="正确的做法">正确的做法</h2>
<p>其实一开始也不是很正确的 如果先看我是如何犯错的请看这里</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="COS真的离谱">COS真的离谱</h3>
<p>一觉醒来 发现腾讯云给自己的发短息 说我欠费了 我想说我不是买了资源包 为什么还是会又费用呢? 这不是搞笑的吗?</p>
<p>我就重新仔细地再看了一遍腾讯云COS的文档</p>
<p><img src="https://i0.hdslb.com/bfs/album/434876cfb9d259207e2ba08b56290fbbaa1e2070.png" alt="image-20221023092046315" /></p>
<p>原来 存储和下载是分开计算流量的 关键是下载请求 还是要费用</p>
<p>费用组成: 存储费用 + 下载流量 + 请求次数</p>
<p>我去 这不就是坑人吗 关键是还挺贵的 哎 今天我们就还是更换我们的逻辑吧</p>
<p>不能随便使用我们的COS了</p>
<h2 id="使用本地存储">使用本地存储</h2>
<p>localStorage 我们现在使用这个方案</p>
<p>我们进入首页时 检查是否有图片 没有就去访问下载 下载保存到本地使用 这样只有第一次访问会占用比较多的资源</p>
<h2 id="DataURL">DataURL</h2>
<p>这里可以理解为一种文件格式   表示文件数据的同时 表示文件的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;data:&quot;</span> + type + <span class="string">&quot;;base64,&quot;</span> + base64_data</span><br></pre></td></tr></table></figure>
<p>对于一个 <code>img</code> 标签 如果我们直接使用下面的语句</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">img.<span class="property">src</span> = base64_data </span><br></pre></td></tr></table></figure>
<p>这样是无法正确显示的 很好理解 我们没有指定格式 自然无法显示 DataURL 就是为了解决这样的问题  正确的做法为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">img.<span class="property">src</span> = dataURL </span><br></pre></td></tr></table></figure>
<p>所以 为了可以简单方便地使用localStorage 我们直接存储 <code>DataURL</code></p>
<p><code>localStorage.setItem(key_name) </code></p>
<p><code>localStorage.getItem(key_name)</code></p>
<p>判断为空 就是直接 != null</p>
<p>大小为5M</p>
<h2 id="简单使用">简单使用</h2>
<p><code>localStorage</code>采用键值对的方式进行存储 我们可以直接使用图片的名字进行保存数据 不过数据需要加上类型 也就是我们的 “data/webp”</p>
<h2 id="init-和-save-to-local-filename-filepath">init 和 save_to_local(filename,filepath)</h2>
<p>解决思路 大概是这样的 每个页面都有自己的init 函数 用于检测本地是否有图片 将其替代网络的图片显示</p>
<p>save_to_local 在我们的初始页面进行设置</p>
]]></content>
  </entry>
  <entry>
    <title>注册名表的玩法</title>
    <url>/static-html/2022/12/12/Cookie/%E6%B3%A8%E5%86%8C%E5%90%8D%E8%A1%A8%E7%9A%84%E7%8E%A9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>学习修改注册表</h1>
<p>路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Computer</span>\<span class="variable constant_">HKEY_CLASSES_ROOT</span>\*\shell </span><br><span class="line">这里是存放我们的选中文件后右键指令</span><br><span class="line"></span><br><span class="line"><span class="title class_">Computer</span>\<span class="variable constant_">HKEY_CLASSES_ROOT</span>\<span class="title class_">Directory</span>\shell</span><br><span class="line">文件夹里的相关操作</span><br></pre></td></tr></table></figure>
<p>变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">%<span class="number">1</span> 表示的是选中当前文件</span><br><span class="line">%V 表示移动至当前文件路径</span><br></pre></td></tr></table></figure>
<p>比如说我们想让右键打开记事本 变成<code>notepad++</code>而不是自带的笔记本</p>
<p><img src="http://81.68.91.70/picgo/10_5_21_25_45.webp" alt="image-20221104212545034" /></p>
<p>不过现在没有图标不是很好看对吧</p>
<p>我们<code>new </code> <code>string value</code></p>
<p><code>Icon</code> <code>exe path</code> 就好了</p>
<p><img src="http://81.68.91.70/picgo/10_5_21_29_25.webp" alt="image-20221104212925687" /></p>
<h2 id="导出-备用">导出 备用</h2>
<p>我们以后装电脑 就可以直接使用了 哈哈哈</p>
<h2 id="VSCODE的插件路径">VSCODE的插件路径</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vscode 的插件问题 </span><br><span class="line">--extensions-dir <span class="string">&quot;D:\0.SOFT\Code\extensions&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6和commonjs的区别</title>
    <url>/static-html/2022/12/12/Cookie/%E8%A7%A3%E5%86%B3ES6%E5%92%8Ccommonjs%E7%9A%84%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>ES6的commonjs的区别</h1>
<p>其实我一开始是很迷惑的 就是说 什么是ES6的内容 什么是commonjs的内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = &#123; <span class="attr">firstName</span>: <span class="string">&quot;dong&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;做个&quot;</span>,theme :<span class="string">&quot;test&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> &#123; firstName, lastName &#125; = name</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName)</span><br></pre></td></tr></table></figure>
<p>上面就是一个很标准的ES6写法 （变量的解构赋值 let 也是ES6提供的） 我们的node 就可以直接运行 没有任何的我呢提</p>
<p>但是如果你写了这样的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>; <span class="comment">// 使用import引入模块</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>就会报错</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">import express from &#x27;express&#x27;;</span></span><br><span class="line"><span class="section">^^^^^^</span></span><br><span class="line"></span><br><span class="line">SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure>
<p>报错的原因是 import 是将其他模块 作为module 但是我们的require不是 这样的</p>
<p>解决的方法就是在我们<code>package.json</code>中添加<code>&quot;type&quot;: &quot;module&quot;,</code> 表示你是使用ES6语法</p>
<p>目前我发现的ES6和其他commonjs冲突的地方就是这样了</p>
<h2 id="总结">总结</h2>
<p>对于ES6 和 commonjs 其实是可以混用的 只有我们的模块是会出现问题的</p>
<p>这里其实还可以将我们的模块导出方案实现更加好</p>
<p>现在需要写一些项目了 开始加油</p>
]]></content>
  </entry>
  <entry>
    <title>CI/CD</title>
    <url>/static-html/2022/11/01/Guides/CI-CD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>CI/CD</h1>
<p>新名词 但是 其实很好理解 比如说 我们的nodejs项目 最后的产品 可能是一个pkg打包完成的软件</p>
<p>我们将源代码push到仓库里 就会自动编译 打包 然后部署到生产环境</p>
<p>从自己的GitHub小卡片到我们的第一个PR 到就是说 我们的vecelc 开始学习这些东西吧 好吧</p>
<p>先说一下 GitHub action 并不好用 为什么 因为 过去了很久了 我觉得GitHub action 很好用 是我自己傻逼,没有找到正确的使用方法.</p>
<h1>Github action</h1>
<h2 id="解决了什么问题">解决了什么问题</h2>
<ul>
<li>自动运行测试用例</li>
</ul>
<p>你在本地上固然可以运行诸如<code>go test -v</code> 对项目进行测试,但是当其他人提交pr后,你需要将其拉取到本地,然后运行测试.虽然理论上讲,一个存在测试用例的项目中,其他开发人员应该确保自己的代码是可以通过测试用例的,但是我们无法保证全部的人都会运行测试用例.</p>
<h2 id="开始使用">开始使用</h2>
<p>其实就是编写workflows 下的 yml文件,又是一个游标卡尺的语言,哈哈哈哈.</p>
<h2 id="创建go的环境">创建go的环境</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># workflow 的名称</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Go</span></span><br><span class="line"><span class="comment"># 触发的条件</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># build 任务</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">  	<span class="comment"># 选择机器环境 基本上都是Ubuntu了 哈哈哈</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">  	<span class="comment"># 小任务的名称</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pull</span> <span class="string">code</span> <span class="string">on</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="comment"># uses 就是使用一些特殊的指令</span></span><br><span class="line">      <span class="comment"># checkout 就是 git pull</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span></span><br><span class="line">      <span class="comment"># a action for set up go </span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-go@v3</span></span><br><span class="line">      <span class="comment"># with argvs </span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">go-version:</span> <span class="number">1.19</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">	  <span class="comment"># run command </span></span><br><span class="line">	  <span class="attr">run:</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-v</span> <span class="string">./...</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">go</span> <span class="string">test</span> <span class="string">-v</span> <span class="string">./...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="创建GITHUB-TOKEN">创建GITHUB_TOKEN</h3>
<p>一些比较特殊的项目比如GitHub action中进行静态网页的部署工作,需要将build好的代码放到一个新的分支</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>很多教程都讲错了,说是ssh的token,关键是我一开始也觉得有道理,把pub_key添加后,发现还是无效,哎.</p>
<p>settings 中的token 只会显示一会哦,需要保存下来.</p>
<p>将其添加到仓库中就好了.</p>
<h2 id="hexo-的案例">hexo 的案例</h2>
<p>这里似乎有问题 如果使用ubuntu的版本过劳 会一次处在 queue的状态</p>
<p><img src="http://81.68.91.70/pg/image/KMiNnv7G0T4C.png" alt="image-20230427173146985" /></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">HEXO</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Cache node modules to speed up build</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># npm cache files are stored in `~/.npm` on Linux/macOS</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">      $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">      $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> </span><br><span class="line">         </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">and</span> <span class="string">push</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TEST_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>
<h2 id="静态页面部署">静态页面部署</h2>
<p>对于静态页面部署 可以说是没有任何的难度了</p>
<p>只需要你创建仓库 然后导入就好了 像GitHub pages 和 vercel 都会自动的为你部署文件</p>
<h2 id="动态页面部署">动态页面部署</h2>
<p>我们其实是可以利用api 实现动态页面的 但是有一些限制 就是你不能修改路由</p>
<p>项目的结构 必须 和 网站的结构一致 （当然了 现在的我还没有接触过vue 和 react 这样的框架 很多话可能都是错误的）</p>
<h2 id="API-部署">API 部署</h2>
<p>首先我们要明白一件事情 我们的vercel.app是运行在一个只读的文件系统上的 所以我们不能进行存储的相关功能 但是其实还是的 可以保存到本地然后push上去就好了 (vercel好像有100GB的存储空间 真的用不完)</p>
<p>Vercel 会自动创建一个server 我们只需要按照它的格式书写api就好了</p>
<p><code>api/index.js</code></p>
<p>两种书写方式 ES6 和 commonjs</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js commonjs</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 其实这个也是ES6的语法 为什么会不兼容? </span></span><br><span class="line">  <span class="keyword">const</span> &#123; id, theme &#125; = req.<span class="property">query</span>; </span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getBilibiliInfo</span>(id);</span><br><span class="line">  data.<span class="property">theme</span> = theme;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;image/svg+xml&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">`public, max-age=<span class="subst">$&#123;<span class="number">6000</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="title function_">renderBilibiliCard</span>(data));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为了实现本地的测试 我们可以创建一个 <code>app.js</code> 不然的话只能部署到vercel后才可以查看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&quot;./api/index&quot;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api&quot;</span>,index) <span class="comment">// get请求会交给我们的index 处理</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p><strong>ES6的写法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js ES6</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的我们创建一个<code>app.js</code>用于本地测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">&#x27;./api/index.js&#x27;</span>;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api&quot;</span>, index);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>引入其他模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render.js </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> text + <span class="string">&quot;调用了render方法&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在index.js 里写下</span></span><br><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">&quot;../render.js&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title function_">render</span>(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>看看你的</h1>
<p>这里我提供我的vercel api供大家使用</p>
<h3 id="GitHub-卡片">GitHub 卡片</h3>
<p><code>http://learn-km911.vercel.app/api/?username=&lt;GitHub用户名&gt;</code></p>
<p><img src="http://learn-km911.vercel.app/api/?username=km911&amp;theme=react&amp;show_icons=true" alt="" /></p>
<h3 id="常用语言卡片">常用语言卡片</h3>
<p><code>https://learn-km911.vercel.app/api/top-langs/?username=&lt;用户名&gt;&amp;layout=compact</code></p>
<p><img src="https://learn-km911.vercel.app/api/top-langs/?username=KM911&amp;layout=compact&amp;theme=vue" alt="" /></p>
<h1>项目参考</h1>
<p><a href="https://github.com/anuraghazra/github-readme-stats">GitHub Readme Stats</a></p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP的使用</title>
    <url>/static-html/2022/10/22/Guides/FTP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>FTP的使用</h1>
<details><summary>什么是FTP</summary>
    FTP (File Transfer Protocol) is used to communicate and transfer files  between computers on a TCP/IP (Transmission Control Protocol/Internet  Protocol) network, aka the internet. Users, who have been granted  access, can receive and transfer files in the File Transfer Protocol  server (also known as FTP host/site).
</details>
一种文件的传输协议 我们不必探究底层的原理 只需要学会使用就好了 
<h2 id="服务器端口">服务器端口</h2>
<p>ftp默认使用 21 20 两个端口 计算机网络也讲了这个</p>
<p>39000-40000 这个是我们PureFTPd的默认端口访问</p>
<p>我们需要在服务器的防火墙开发端口</p>
<h2 id="软件">软件</h2>
<p><a href="https://filezilla-project.org/">FileZilla</a> 免费软件 也不必我们去Windos控制面板里设置什么 开箱即用 简单小巧</p>
<p><a href="">PureFTPd</a> 这个是宝塔面板默认安装的软件 我们不必配置</p>
<h2 id="创建ftp账户">创建ftp账户</h2>
<p>在我们的宝塔面板中 选择ftp –&gt;添加ftp</p>
<p>这里需要设置ftp的账号和密码.</p>
<h2 id="连接设置">连接设置</h2>
<p>主机就是服务器的ip</p>
<p>加密这里只能选择明文FTP</p>
<p>用户和密码是你刚刚设置的</p>
<p><img src="https://i0.hdslb.com/bfs/album/af3a4f73bd3d90b8cb98d6fea23cb0e3dd011ec6.png" alt="image-20221021123344061" /></p>
<p><strong>重点来了</strong></p>
<p>传输设置 –&gt; 被动</p>
<p>之前网络上好多教程说是主动传输 结果反而是错的 不能理解</p>
<p>当然了 我也不过是 一个初学者 只是解决了问题 并不懂得背后的原理 甚至很多时候 能够解问题 都是凭借运气</p>
<h2 id="大功告成">大功告成</h2>
<p>开始使用ftp进行文件传输吧</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>异步函数的返回值</title>
    <url>/static-html/2022/10/22/Cookie/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>异步函数的返回值</h1>
<p>我们其实已经知道了 异步函数中写下return 是无法返回正确的结果的 可这里是因为我们的结果需要等待异步函数运行完成 现在我们的返回值 是一个和异步无关的量 比如就是一个常量 现在的结果是什么样的呢?</p>
<p>这是一个同步函数 可以正常返回结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;404.html&#x27;</span>) <span class="comment">// 同步读取文件</span></span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">toString</span>()</span><br><span class="line">&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">read</span>())</span><br></pre></td></tr></table></figure>
<p>直接返回异步函数的结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFile</span>(<span class="string">&#x27;404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;) <span class="comment">// 异步读取文件</span></span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">toString</span>()</span><br><span class="line">&#125;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">read</span>())</span><br></pre></td></tr></table></figure>
<p>结果是<code>undefined</code>  我们上面分析是因为 <code>data</code>需要等待<code>readFile</code> 函数完成才可以有结果 我们直接返回 得到的肯定是<code>undefined</code></p>
<p>如果我等待一段时间 值会变化吗?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="title function_">read</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>结论是 无论多久 都还是<code>undefined</code> 其实也好理解 因为你在赋值的时候 就是<code>undefined</code> 自然<code>data</code>的值不会变化 (我这个想法 真的挺好笑的 毕竟刚刚开始接触 异步函数 真的很不好理解 哈哈哈)</p>
<p>现在我们试试看 <code>callback</code>函数内部写下<code>return</code> 理论上来说 <code>read</code>函数会等待<code>readFile</code>函数运行完毕后再返回值 这样就是一个同步函数了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFile</span>(<span class="string">&#x27;404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">read</span>())</span><br></pre></td></tr></table></figure>
<p>可结果还是<code>undefined</code> 也就是说 并没有等待<code>readFile</code> 函数运行完毕 就已经返回了结果</p>
<p>如果我们返回的是常量呢?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFile</span>(<span class="string">&#x27;404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">read</span>())</span><br></pre></td></tr></table></figure>
<p>结果还是 <code>undefined</code>  就算你的<code>return</code>返回的结果是一个常量 因为是异步函数 直接返回<code>undefined</code></p>
<p>只有一种情况下异步函数可以返回正确的值  当<code>return</code>在异步函数外部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFile</span>(<span class="string">&#x27;404.html&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以得到 200</p>
<p>当然了 你也可以使用Promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;404.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> data = <span class="title function_">read</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br></pre></td></tr></table></figure>
<p>这上面是一个错误用法 因为我们的<code>read</code> 返回的是一个<code>Promise</code> 我们需要获取其中的结果 应该对我们的Promise对象使用 <code>.then</code> 这同样也是一个<code>callback</code>函数 哈哈哈哈 还是异步函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<p>对于异步函数 我们如果想要获取到正确的值 需要将其变成同步函数 或者 将<code>return</code> 写在异步函数外部 并且返回值 和异步函数无关 也可以使用 <code>Promise</code></p>
]]></content>
      <categories>
        <category>异步</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器ESC</title>
    <url>/static-html/2022/10/04/Guides/%E6%9C%8D%E5%8A%A1%E5%99%A8ESC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>服务器的环境搭建</h1>
<h2 id="夹带私货">夹带私货</h2>
<p>我推荐你使用centos 不是它很好 而是它很老 就是说 支持的版本比较长 centos7.6是2011年的 就内存占用方面领先其他的系统好多 比如ubuntu 和 debain 其实没别的理由 发展了几年 需要加些新的功能 说对吧 其实大部分的功能我们根本就不需要 😄</p>
<p>理解了为什么那么多服务器都是使用centos了 其实这个也是没有办法的事情</p>
<blockquote>
<p>很有意思的一点 国内服务器更多的是centos 但是全球访问来看 Ubuntu的数量是前者的2-4倍<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</blockquote>
<p>不出意外的话 我现在也大概率使用centos了 作为主要的服务器</p>
<h1>远程连接</h1>
<h3 id="获取服务器root用户密码">获取服务器root用户密码</h3>
<p><img src="https://i0.hdslb.com/bfs/album/71bacf6018e92d780f6aef67128086a955accac2.png" alt="image-20221016122635966" /></p>
<p>因为我们是第一次使用服务器 所以其实没有密码 需要我们重置(设置)新的密码</p>
<h3 id="下载-shh">下载 shh</h3>
<p><a href="https://www.mls-software.com/files/setupssh-8.2p1-1.exe?spm=5176.ecscore_overview.0.0.1b494df5dpIOCC&amp;file=setupssh-8.2p1-1.exe">openssh 下载</a></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh -V</span> </span><br></pre></td></tr></table></figure>
<p>如果显示了版本信息 我们就可以开始远程连接了</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">root@</span>公网ip</span><br></pre></td></tr></table></figure>
<p>然后会让我们输入上面的服务器密码</p>
<h2 id="配置宝塔面板">配置宝塔面板</h2>
<p>不要自己安装任何的软件先 可能会破坏宝塔的安装环境 特别是自己安装<code>nginx</code> 或者其他的<code>web</code>相关软件</p>
<p>我们需要先在服务器上安装宝塔面板</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> centos</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/i</span>nstall_6.<span class="number">0</span>.sh &amp;&amp; sh install.sh</span><br><span class="line"><span class="regexp">//</span> ubuntu/debian</span><br><span class="line">wget -O install.sh http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/i</span>nstall-ubuntu_6.<span class="number">0</span>.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure>
<p>这里会出现 8888 端口没有开启的情况</p>
<p>我们需要前往安全组之类的地方进行开启端口</p>
<h3 id="小插曲">小插曲</h3>
<p>这里宝塔面板对于 Linux 支持版本不一样 上面更新的就是面板 6 系</p>
<h3 id="安装网站环境">安装网站环境</h3>
<p>打开宝塔面板会自动进入软件安装页面</p>
<p>创建网站 记得要把我们的 ip 给添加进去 这样才可以用 ip 访问</p>
<h2 id="购买域名">购买域名</h2>
<p>其实就算 没有域名 我们还是可以通过ip直接的访问 没有什么很大的影响 对于我们学习来说</p>
<h3 id="http-不安全的问题">http 不安全的问题</h3>
<p>其实并不是不安全 而是 http 没有加密 所以容易被劫持 比如钓鱼 wifi</p>
<p>这里我们需要安装 ssl 证书</p>
<p>阿里云有免费的证书申请</p>
<h3 id="如何部署-ssl-证书">如何部署 ssl 证书</h3>
<p>用宝塔部署要简单太多了</p>
<p>下载证书 解压缩 然后 将内容复制进去 哈哈哈 🆗了</p>
<h1>利用服务器</h1>
<p>买了一个服务器 有什么用呢？</p>
<p>我连电脑都觉得没有用 你还想让我做什么呢？</p>
<h2 id="博客">博客</h2>
<p>理解博客 其实就是 HTML 文件罢了 (你这样说 什么东西不是 HTML 文件) 我的意思是 你只需提供 html 文件的更新 就好了</p>
<h2 id="图床">图床</h2>
<p><a href="./Guides/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.html">图床搭建html</a></p>
<p><a href="./Guides/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.md">图床搭建md</a></p>
<h2 id="ftp-网盘">ftp (网盘)</h2>
<p>这个体验真的很不错我觉得 哈哈哈哈</p>
<p>主要是带宽限制了 我们的服务器的速度 不过 1.3MB/s 的速度其实是很不错了的 呢！！！</p>
<p><a href="./ftp%E7%9A%84%E4%BD%BF%E7%94%A8.html">FTP的使用html</a></p>
<p><a href="./ftp%E7%9A%84%E4%BD%BF%E7%94%A8.md">FTP的使用_md_</a></p>
<h2 id="跑代码">跑代码</h2>
<p>这里为了可以自由地编写和运行代码 我搭建了一个jupyter 还可以远程访问</p>
<p><a href="./Jupyter%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.md">Jupyter远程连接md</a> <a href="./Jupyter%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.html">Jupyter远程连接html</a></p>
<p>我写了一个爬虫 每天的凌晨1:30分自动爬取P站的日榜 不过有一说一 P站的日榜 总是有很多奇奇怪怪的东西 (我是指比如说漫画什么的 关键是它的漫画还就一张图片 不明所以 )</p>
<p><img src="https://i0.hdslb.com/bfs/album/cc5e3f1a23a6c0d0149b96593eeb5afc27066035.png" alt="image-20221022101747695" /></p>
<p><img src="https://i0.hdslb.com/bfs/album/5842d5b75bcece5c35b15245998420e0b6b0e440.png" alt="image-20221022101810021" /></p>
<h2 id="api-接口">api 接口</h2>
<p>主要是我需要去学一点点最简单的后端内容</p>
<p>其实不会很复杂的 你不可能就是说 需要很高的安全性 我们简单一点点 就好 比如说</p>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/145812549">Ubuntu VS CentOS，谁才是更好的 Linux 版本？</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>图床搭建</title>
    <url>/static-html/2022/09/26/Guides/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="搭建图床">搭建图床</h2>
<p>我们搭建图床主要是为了保存图片 方便将其发布到互联网上 让任何人都可以看见我们的图片 还可以进行加速 服务器本身并不需要加载图片 客户端负责进行 加载图片的工作 这个很关键</p>
<h2 id="使用对象存储">使用对象存储</h2>
<p><a href="https://sspai.com/post/59284">参考教程</a></p>
<p>这里就用腾讯云作为案例了</p>
<p><img src="D:/38985d56ebf496fb1cfb475541e9a0be46963f67.png" alt="image-20221007182020471" /></p>
<h3 id="获取密钥">获取密钥</h3>
<p><img src="https://i0.hdslb.com/bfs/album/34aef57881342edfd11991b876ff60c28bdb0bca.png" alt="image-20221007183259598" /></p>
<p>这里我们就可以得到 前三项数据了</p>
<p><img src="https://i0.hdslb.com/bfs/album/2aeec450f79f3eace33788eb9167e3fb90723ad9.png" alt="image-20221007183350827" /></p>
<h3 id="存储空间-和-存储区域">存储空间 和 存储区域</h3>
<p>存储空间 就是 存储桶的名称  <strong>zuoge-1307686113</strong></p>
<p>存储区域 就是 所属区域 <strong>ap-nanjing</strong></p>
<p><img src="https://i0.hdslb.com/bfs/album/efaeab11adb556a46eeeb10b6890f63abe3aee7d.png" alt="image-20221007183439553" /></p>
<h3 id="指定存储路径">指定存储路径</h3>
<p>设置为 <strong>img/</strong> 就会把图片全部放到该文件夹下 (你猜猜看我为什么加粗 一定要加 <strong>/</strong> 啊)</p>
<p><img src="https://i0.hdslb.com/bfs/album/6b015212ab2e057d1a2fd32a3e5cd9d5726c6d07.png" alt="image-20221007183657701" /></p>
<h2 id="白嫖B站">白嫖B站</h2>
<p>这里需要使用一个插件<a href="https://github.com/xlzy520/typora-plugin-bilibili">B站图床插件</a></p>
<p>只需下载main.exe即可 位置要记好等下要用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">D:\<span class="number">0.</span>SOFT\environment\<span class="keyword">go</span>\main.exe token=<span class="number">0008</span>ab15%<span class="number">2</span>C1680268896%<span class="number">2</span>Ca08ff%<span class="number">2</span>Aa1</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node <span class="attr">D</span>:\<span class="number">1.</span><span class="variable constant_">CS</span>\git_hub\typora-plugin-bilibili\typora.<span class="property">js</span></span><br></pre></td></tr></table></figure>
<h3 id="获取SESSDATA">获取SESSDATA</h3>
<p>登录哔哩哔哩→F12打开控制台→Application→Cookies→SESSDATA</p>
<h3 id="配置typora图像策略">配置typora图像策略</h3>
<p>图像–&gt;上传服务 –&gt;Custom Command</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">下载的文件路径\main.exe <span class="attribute">token</span>=你的SESSDATA</span><br></pre></td></tr></table></figure>
<h3 id="反防盗链">反防盗链</h3>
<p>B站会做防盗链处理 我们需要破解</p>
<p>其实就是添加一个referrer</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>验证图片上传选项</p>
<p>感觉这个方法是最简单的 根本就不需要什么脑子</p>
<h2 id="自建图床">自建图床</h2>
<p>这个其实就是利用我们自己的服务器 有一说一 ESC 和 OSS 好像用ESC要亏一些</p>
<h3 id="搭建chevereto环境">搭建chevereto环境</h3>
<p><a href="https://feiju12138.github.io/2021/11/14/%E6%90%AD%E5%BB%BAChevereto%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/">chevereto参考教程</a></p>
<p>将zip文件上传解压</p>
<p>正常情况</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">Chevereto can&#x27;t create the <span class="keyword">app</span>/settings.php <span class="keyword">file</span>. You must manually create this <span class="keyword">file</span>.</span><br></pre></td></tr></table></figure>
<p>因为linux的文件权限很呆 这里是没有写入权限 我们修改成为777</p>
<h4 id="连接数据库">连接数据库</h4>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926183011293.png" alt="image-20220926183011293" /></p>
<p>我们这里使用宝塔面板去创建数据库吧</p>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926184304494.png" alt="image-20220926184304494" /></p>
<p>成功了</p>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926184404129.png" alt="" /></p>
<h4 id="获取api">获取api</h4>
<p>Dashboard</p>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926185917249.png" alt="image-20220926185917249" /></p>
<p>获取api key</p>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926185942611.png" alt="image-20220926185942611" /></p>
<h4 id="设置最大上传文件限制">设置最大上传文件限制</h4>
<p>因为我不知如何变成root用户 所以我们是用guest上传图片 会有限制 我们需要扩大文件上传上限</p>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926190519226.png" alt="image-20220926190519226" /></p>
<h3 id="配置picgo">配置picgo</h3>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">43.143</span>.<span class="number">151.27</span><span class="regexp">/api/</span><span class="number">1</span>/upload</span><br></pre></td></tr></table></figure>
<h4 id="下载chevereto插件">下载chevereto插件</h4>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926190106653.png" alt="image-20220926190106653" /></p>
<h3 id="配置typora图片设置">配置typora图片设置</h3>
<p>上传服务 picgo (app)</p>
<p><img src="http://43.143.151.27/images/2022/09/26/image-20220926190305792.png" alt="image-20220926190305792" /></p>
<h3 id="目前还是会报错-不知道是什么意思">目前还是会报错 不知道是什么意思</h3>
<h3 id="利用phpMyAdmi">利用phpMyAdmi</h3>
<h2 id="图床管理">图床管理</h2>
<p>这里主要是讲讲我自己的图床管理经验</p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>我的计算机之路</title>
    <url>/static-html/2022/09/24/Life/%E6%88%91%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="不幸的开端">不幸的开端</h2>
<p>我人生中第一次看见和计算机相关的书 应该是我老爹买的一本 &lt;&lt;五笔输入法教程&gt;&gt; 现在想起来 我觉得我老爹有些可笑 – 我家里并没有电脑 连一个键盘都没有 我不知道他是想做什么 当然了 我肯定连那本书的封面都没有翻开过 或许他很早就预料到了21世纪是属于计算机的也说不定 不过他似乎并没有那么开阔的视野和胸怀 不然的话 他也不会是现在这个样子</p>
<p>网吧没去过 但是游戏机室倒是去了不少 那时我才一年级 真的 当大家 还在看着少儿频道的动画梦工厂的时候 我就已经学会了 如何用八神无限定人 耍赖 对了 主要当年大家的水平都菜 (真小学生 能不菜吗? 😂)  当时和自己的几个好朋友一起 真的挺开心的 小学时期的 “孽缘” 很快就结束了 其中一个好像连初中都没有上 就和父亲一起出去打工了 还有一个也因为没有联系方式 因为分班就没有再联系了 (什么 垃圾学校 年年分班 其实现在想想 应该是我们那个地方 外出务工的人很多 有的就把孩子带走了 有的因为户口 就又带回来了 诸如此类吧 不过也好 至少我在小学时 就经历了很多奇怪的事情 不过仔细想想 似乎也不值得谈论些什么 只不过是最单纯的样子罢了) 其实就算有手机之类的 我们也未必会联系 不是吗?</p>
<p>大概在二年级下 游戏机室基本上就开始倒闭了 其实不是没有客流量了 只是不太赚钱 (现在回家 看到的游戏机室都是那种 千金捕鱼 用铁通装着一元硬币的那种) 好了 我也该开始好好学习了是不? 怎么可能 我和计算机的故事 压根就没有开始.</p>
<p>小时候 有的小伙伴家里比较富有 会购置一台电脑 那个时候还有拨号上网 就是每次开机时 都要先点一个叫做 “宽带连接”的图标 然后就可以上网了 不过 就我观察 其实%99的家庭 购买的电脑 最后都会变成小孩子的娱乐工具 不过这样也挺好的 不是吗 ? 至少孩子会不会去打架 游泳什么的(我们那地方治安比较差 加上有血吸虫 就 ….) 当时大家基本上就是 洛克王国 赛尔号 (皮卡堂过家家 小花仙 什么的我是真的没有玩过)</p>
<p>说出来你可能不是很相信 就算是在高考完后的暑假 我去发小家里玩 当时是要百度一个东西 我不会打字 其实不是不会 只是找不到字母键在哪里(准确来说是不会用正确的打法 就是经常会按i的时候按到o 就根本没有办法打字 你懂吧 ) 就还是让我发小帮我打的 就…… 好尴尬真的 我服了 自己了</p>
<h2 id="对网络的热爱">对网络的热爱</h2>
<p>我觉得我还是很喜欢上网冲浪的啊 对计算机网络可能就没有那么热爱了 哈哈哈</p>
<p>主要是网络可以帮助你认识很多不一样的人,这些人和你在现实生活中见到的人表现出的精神和气质与谈吐完全不同,可能网络的匿名性让大家都卸下了伪装吧.</p>
<h2 id="曲折的探索之路">曲折的探索之路</h2>
<p>我们必须要承认 有个人带带自己 在计算机这条道路上 真的是很重要的 – 我是真的不会配置环境变量 我不觉得一个刚刚学会c语言的人 可以看懂json文件是干什么的 就算知道了 也不知道该写什么 如何配置路径呢?</p>
<p>我比较惨 没有遇到什么“大腿” 可以让我抱抱 所以真的花了很多时间在弯路上 如果当初有人告诉我 Linux系统一般都是生成环境用得比较多,如果你只是为了学习linux基础知识,买一台服务器或者虚拟机才是最简单可行的方式,而不是被人欺骗去装了arch.我第一次开机的时候人都傻了,纯输入命令行,这对于一个第一次接触linux的人无疑是巨大的打击.即使是现在我也没有装好过arch,倒不是不愿去折腾,而是我以及装好了WSL并且可以使用了.</p>
]]></content>
  </entry>
  <entry>
    <title>Slice of Life</title>
    <url>/static-html/2022/09/23/Life/Slice/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="TIMING">TIMING</h2>
<p>基本信息:28 上海人 在一家互联网的小公司上班 我们就叫它T</p>
<p>(ps 我一开始 就问它 你不是打星际的啊 大笑 😀 结果确实)</p>
<p>T: K 你说,”我不喜欢你 但是也不讨厌你” 和“我不讨厌你 但是也不喜欢你”</p>
<p>K: 我可没学过什么 交换两个集合的先后顺序 他们的并集会有什么区别 别搞啊</p>
<p>T: 哎 你这种人就是没有少女心</p>
<p>K: 别 我个男的 要什么少女心 有点恶心了啊</p>
<hr />
<p>T: 你喜欢什么样的女生呢?</p>
<p>K: 在全集被定义之前 我没有办法求出来补集 www</p>
<p>T: 别搞 认真的</p>
<p>K: 那就是 “今天是周末 平常都是看到穿制服的我 现在该说点什么 你是知道的吧”</p>
<p>T: 手把手教学 , 等等 重铸奶茶店荣光 我辈义不容辞是吧</p>
<p>K: 我去 为什么我的梗你都懂啊</p>
<p>T: 比你多活好几年 那可不</p>
<p>K: 不过有一说一 味太冲了 😀</p>
<hr />
<p>K: 你能教教我计算机相关的知识吗?</p>
<p>T: 讲真 你觉得就你自己的水平 现在听得懂我讲的东西吗?</p>
<p>K: 我觉得可以 试试看吧</p>
<p>T: ssm  SpringMVC、SpringBoot、Spring Cloud …….</p>
<p>K: 我放弃 我没学java 专业不通了属于是 G</p>
<hr />
<h2 id="银子">银子</h2>
<p>基本信息: 一个很可爱的男生 咳咳 没有别的意思啊 性格很好 一起打游戏 就算输了 也不会生气什么的 很你nice 就是我太菜了 /(ㄒoㄒ)/~~</p>
<p>叫它 M吧</p>
<p>M: 我读高中的时候 不是谈恋爱吗 然后不知道怎么的 被我父母知道了 不过他们不知道是谁 然后我的父母就质问我 : 我是不是和学校里的女生谈恋爱了 我当时立马说 不是 结果我妈就一口咬定肯定是学校里的女生 搞不好还是班里的女生 明天我要去学校一趟 我当时急死了 真的不知道我妈怎么猜出来的 吐了🤮</p>
<p>K: 不是 你别急啊 其实你妈也只是猜的 就是想看看你的反应 结果你直接就招了 哎 看看我是怎么和我的姐姐拉扯的啊</p>
<p>M: 好像有点道理</p>
<h2 id="我的姐姐">我的姐姐</h2>
<p>基本信息: 大我7岁 (光着屁股一起长大的 不对 是我光着屁股 跟着她一起长大的 😂) 哈哈哈哈 叫它 S吧</p>
<p>S: 你是不喜欢那个女生呢?</p>
<p>K: 额 , 怎么想的?</p>
<p>S: 你看啊 你在她身上花费了很多时间 你不就是喜欢她吗?</p>
<p>K: 这样讲的话 我觉得我应该最喜欢学习了 毕竟我都读了十几年书了</p>
<p>S: 确实 那你还有什么证明你不喜欢她的理由吗?</p>
<p>K: 你看啊 其实我有很多机会和她一起 但是我就是不去找她 我觉得对于大多数人来说 如果不主动找对方的话 应该就是不喜欢了</p>
<p>S: 有道理 果然啊 你不喜欢人家</p>
<p>K: 别 就算我这样说 和我喜欢她这件事 没有任何关系 在我看来</p>
<p>M: 秀啊 搞得我都有点看不懂你了 K</p>
<p>K: 其实主要是 只要我自己也不确定这件事情 我根本就不会被别人看出来 哈哈哈 在骗自己这件事情上 我可是很厉害的 😀</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>我所知道的Markdown</title>
    <url>/static-html/2022/09/19/Cookie/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84markdown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="markdown">markdown</h2>
<h3 id="基本语法">基本语法</h3>
<p>这里因为我用的是 typora 可能有些操作和大家的不太一样</p>
<p>(似乎我的这个主题将加粗变成了 就是快速修改颜色)</p>
<table>
<thead>
<tr>
<th style="text-align:center">元素</th>
<th>语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">标题</td>
<td>#  ## 数目表示 几级标题</td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td><code>[显示的内容](链接)</code></td>
</tr>
<tr>
<td style="text-align:center">图片</td>
<td><code>![image](图片位置)</code></td>
</tr>
<tr>
<td style="text-align:center">加粗</td>
<td><code>**加粗**</code>  <strong>加粗的字体</strong></td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td><code>*倾斜*</code><em>倾斜的字体</em></td>
</tr>
<tr>
<td style="text-align:center">加粗斜体</td>
<td><code>***加起来***</code>   *<strong>加粗斜体*</strong></td>
</tr>
<tr>
<td style="text-align:center">分割线</td>
<td><code>---</code>  — 或者 <code>***</code></td>
</tr>
<tr>
<td style="text-align:center">高亮</td>
<td><code>==高亮==</code>== 高亮 ==</td>
</tr>
<tr>
<td style="text-align:center">删除线</td>
<td><code>~~删除的内容~~</code><s>被删除了</s></td>
</tr>
<tr>
<td style="text-align:center">代码</td>
<td><code>code</code> 利用两个 ` 多行代码就是 三个</td>
</tr>
<tr>
<td style="text-align:center">无序列表</td>
<td>利用没有人用的符号 比如 <code>+ *</code></td>
</tr>
<tr>
<td style="text-align:center">有序列表</td>
<td>1. 2. 也好理解</td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td><code>&gt;</code>  有的引用是 tab 笑死我了</td>
</tr>
<tr>
<td style="text-align:center">任务清单</td>
<td><code>- [ ]</code> -[ ] <code>- [X]</code></td>
</tr>
</tbody>
</table>
<h3 id="高级语法">高级语法</h3>
<h4 id="脚注">脚注</h4>
<p>为什么要用脚注<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 目前脚注的书写<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[^脚注]</span><br><span class="line">[<span class="symbol">^脚注</span>]:<span class="link">对脚注的解释</span></span><br></pre></td></tr></table></figure>
<p>脚注同样可以跳转</p>
<h4 id="表格">表格</h4>
<p>typora 的表格非常简单 只需要写下首栏即可</p>
<p>对其和添加格子都可以交给它 nice</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">姓名</span>|<span class="string">学号</span>|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="标题跳转">标题跳转</h4>
<p>很不幸 我们的 typora 点击链接 不是进入链接 而是查看源代码 所以无法使用 但是在 vscode 里就可以了 (这个？)</p>
<p>学会了 只要按下 <code>CTRL</code> 的同时点击链接就好了 无敌好吧我的 typora</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">标题跳转</span>](#某个标题)</span><br></pre></td></tr></table></figure>
<p><a href="#markdown">回到首页</a></p>
<h4 id="锚点跳转">锚点跳转</h4>
<p>首先我们定义锚点 然后就像使用链接一样 使用我们的锚点就好了 其实就是根据元素的name进行跳转</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[跳转至<span class="attr">name=</span><span class="keyword">tag</span> <span class="title">的锚点](#tag</span>)</span><br></pre></td></tr></table></figure>
<p><a name="tag">这里是一个锚点 name=tag</a></p>
<p><a href="#tag">跳转至 name=tag 的锚点</a></p>
<h4 id="跳转至其他文件">跳转至其他文件</h4>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[跳转]</span>(DZG<span class="selector-class">.md</span>) 直接指向文件的名称就好了</span><br><span class="line">这个在我们的网页中是无法使用的 因为没有md文件</span><br><span class="line">可不可以变成<span class="selector-tag">html</span>文件 呢? 有想法的你</span><br></pre></td></tr></table></figure>
<p>[跳转至其环境变量 html]</p>
<p>[跳转至环境变量 md]</p>
<p>是否可以跳转到其他文件的某个位置?  🆗的</p>
<p>就是将上面的组合起来就好了 文件+锚点 完美解决问题 哈哈哈哈</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">标题跳转</span>](<span class="name">文件的路径</span>#某个标题)</span><br></pre></td></tr></table></figure>
<p><a href="%E6%9C%8D%E5%8A%A1%E5%99%A8ESC.md#bind">服务器</a></p>
<h2 id="HTML">HTML</h2>
<p>很好奇对不对？为什么我要讲这个 其实我们的 typora 就是一个浏览器 将我们的文本进行渲染成 html 所以我们可以使用 html 标签进行编写 md</p>
<p>前排提示 发现 iframe 没有 embed 好用</p>
<p>特别是在网页上 如果使用 iframe 无法进行交互 但是我们的 embed 就可以交互 这样的体验肯定是要好得多的</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">统一资源插入格式</span><br><span class="line"><span class="attribute">src</span> <span class="operator">=</span> <span class="string">&quot;http://43.143.151.27/ftp/&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="改变字体样式">改变字体样式</h3>
<p>其实就是对其写 css 不过考虑到其实不是很经济 (花费过多的时间了) 就不考虑了吧</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span> </span><br><span class="line">    红色的字体 </span><br><span class="line">    感觉怎么样</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p style="color:red;"> 
    红色的字体 
    感觉怎么样
</p>
<h3 id="插入视频">插入视频</h3>
<p>本地视频还可以 但是如果是上传到网络上就比较堪忧了 主要是很容易因为网络延迟 影响我们的观看体验</p>
<p>除非我们可以做一个 B 站插件 一件上传我们的视频 就是说 这个不太可能我觉得 就是说 白嫖 B 站我觉得有点难了</p>
<p>两中方式 我觉得如果是本地视频 还是 video 要方便很多</p>
<p>但是第三方的 还是使用 embed + <a href="http://player.com">player.com</a> 吧</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;video src <span class="operator">=</span> <span class="string">&quot;D:\1.CS\git_hub\大数据导论\video.mp4&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;embed src <span class="operator">=</span> <span class="string">&quot;//player.bilibili.com/player.html?aid=983940611&amp;bvid=BV1Ht4y1V7hF&amp;cid=787857810&amp;page=2&quot;</span> width<span class="operator">=</span><span class="string">&quot;100%&quot;</span> height<span class="operator">=</span><span class="string">&quot;400px&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>现在想的方法是说统一采用服务器的网络带宽 这样不会就是对于服务器的压力太大了吗</p>
<p>typora 是会做优化吗？为什么就是说 会自己去加载啊 而且加载的速度还很快</p>
<p>如果想插入第三方的视频 可以使用如下的方法</p>
<embed src = "//player.bilibili.com/player.html?aid=983940611&bvid=BV1Ht4y1V7hF&cid=787857810&page=2" width="100%" height="400px">
<p>先获取视频的播放格式 点击嵌入代码</p>
<p>直接粘贴 代码即可 不过要设置一下高度 不然看起来会很奇怪<br />
需要我解释参数的含义吗 大家应该都看得懂 html 的基本语法吧</p>
<h3 id="插入音频">插入音频</h3>
<p>支持 mp3 wav ogg 猜的 啊哈哈哈</p>
<p>使用本土的 audio 就好了</p>
<p>这些都存在一个问题 就是我们该如何解决本地和网络的区别啊 先尝试头痛死了 放到 ftp 上面去吗？</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&lt;audio src = <span class="string">&quot;https://zuoge-1307686113.cos.ap-nanjing.myqcloud.com/video/giegie.mp3&quot;</span>&gt;</span><br><span class="line">为什么无法显示呢? 原生组件 必须要写&lt;\<span class="keyword">end</span>&gt; </span><br></pre></td></tr></table></figure>
<audio src = "https://zuoge-1307686113.cos.ap-nanjing.myqcloud.com/video/giegie.mp3">
<h3 id="插入网页">插入网页</h3>
<p>想不到吧哈哈哈哈 真的很有意思</p>
<p>下面是我的博客展示 等等啊 在我的博客里面看我的博客展示 是不是很奇怪啊 😂</p>
<p>同样的按下 <code>CTRL</code> 可以直接从浏览器打开我们的网页 但是这样就不是聚合了 哈哈</p>
<p>还可以玩游戏 我的天啊 太强大了吧 哈哈哈</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;embed src <span class="operator">=</span> <span class="string">&quot;./BLOG/2048/&quot;</span> width <span class="operator">=</span><span class="string">&quot;100%&quot;</span> height<span class="operator">=</span> <span class="string">&quot;500px&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<embed src = "./BLOG/2048/" width ="100%" height= "500px">
<h3 id="插入-pdf">插入 pdf</h3>
<p>一定要设置宽度 不然字体真的太小了</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;embed src<span class="operator">=</span><span class="string">&quot;http://43.143.151.27/ftp/Essay/国内外数据安全研究领域前沿动态追踪 基于2013年以来的文献计量分析.pdf&quot;</span>  width <span class="operator">=</span> <span class="string">&quot;100%&quot;</span> height<span class="operator">=</span><span class="string">&quot;600&quot;</span> &gt;</span><br></pre></td></tr></table></figure>
<h2 id="Mermaid">Mermaid</h2>
<p>这个你可以理解为 思维导图的 md 版本 个人其实不是很推荐 主要是使用起来比较麻烦</p>
<p><a href="https://zhuanlan.zhihu.com/p/166668789">详细教程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/355997933">简明教程</a></p>
<h3 id="让-hexo-支持-Mermaid">让 hexo 支持 Mermaid</h3>
<p>我学会这三个就够了</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>pie</td>
<td>饼图</td>
</tr>
<tr>
<td>graph</td>
<td>流程图</td>
</tr>
<tr>
<td>classDiagram</td>
<td>类图</td>
</tr>
</tbody>
</table>
<h3 id="饼状图-PIE">饼状图 (PIE)</h3>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">pie </span><br><span class="line">	<span class="keyword">title</span> 我的常用语言</span><br><span class="line">	<span class="string">&quot;python&quot;</span> :<span class="number">4</span></span><br><span class="line">	<span class="string">&quot;shell&quot;</span> :<span class="number">1</span></span><br><span class="line">	<span class="string">&quot;c/c++&quot;</span> :<span class="number">3</span></span><br><span class="line">	<span class="string">&quot;html&quot;</span> :<span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pie </span><br><span class="line">    title 我的常用语言</span><br><span class="line">    &quot;python&quot;  :4</span><br><span class="line">    &quot;shell&quot; :1</span><br><span class="line">    &quot;c/c++&quot; :3</span><br><span class="line">    &quot;html&quot; :2</span><br></pre></td></tr></table></figure>
<h3 id="流程图-GRAPH">流程图 (GRAPH)</h3>
<p>默认是 TD 可选参数 LR RL</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">graph LR</span></span><br><span class="line"><span class="comment">	小学</span><span class="literal">--</span>&gt; <span class="comment">初中</span> <span class="literal">--</span>&gt; <span class="comment">高中</span><span class="literal">--</span>&gt; <span class="comment">大学</span></span><br><span class="line"><span class="comment">	高中</span><span class="literal">--</span>&gt;<span class="comment">大专</span></span><br><span class="line"><span class="comment">	中专</span><span class="literal">--</span>&gt;<span class="comment">大学</span></span><br><span class="line"><span class="comment">	初中</span><span class="literal">--</span>&gt; <span class="comment">中专</span> <span class="literal">--</span>&gt; <span class="comment">大专</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    小学--&gt; 初中 --&gt; 高中--&gt; 大学</span><br><span class="line">    高中--&gt;大专</span><br><span class="line">    中专--&gt;大学</span><br><span class="line">    初中--&gt; 中专 --&gt; 大专</span><br></pre></td></tr></table></figure>
<h3 id="类图-classDiagram">类图 (classDiagram)</h3>
<p>服了 原来老师讲的确实是真的</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">	<span class="keyword">class</span> Student&#123;</span><br><span class="line">  		-age <span class="type">int</span></span><br><span class="line">  		-<span class="type">name</span> <span class="type">char</span></span><br><span class="line">  		-sex <span class="type">bool</span></span><br><span class="line">  		+SetAge(<span class="type">int</span> new_age) <span class="type">void</span></span><br><span class="line">  		+SetName(<span class="type">char</span> <span class="type">name</span>) <span class="type">void</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class Student&#123;</span><br><span class="line">          -age int</span><br><span class="line">          -name char</span><br><span class="line">          -sex bool</span><br><span class="line">          +SetAge(int new_age) void</span><br><span class="line">          +SetName(char name) void</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Latex">Latex</h2>
<p>typora 支持插入数学公式 利用</p>
<h3 id="字母-和-符号">字母 和 符号</h3>
<table>
<thead>
<tr>
<th style="text-align:center">字母</th>
<th style="text-align:left">表示方法</th>
<th style="text-align:center">符号</th>
<th style="text-align:left">表示方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">𝜃</td>
<td style="text-align:left"><code>\theta</code></td>
<td style="text-align:center">∫</td>
<td style="text-align:left"><code>\int</code></td>
</tr>
<tr>
<td style="text-align:center">𝜆</td>
<td style="text-align:left"><code>\lambda</code></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h3 id="特殊表示">特殊表示</h3>
<h3 id="一些案例">一些案例</h3>
<p>我的高速</p>
<p>我的高代</p>
<p>我的离散</p>
<h2 id="存在的问题">存在的问题</h2>
<ul>
<li>如果使用本地路径 肯定就无法在网页端查看</li>
</ul>
<blockquote>
<p>但是我们使用 网络上的绝对地址也不是很方便啊</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">网络格式</span><br><span class="line"><span class="attribute">src</span> <span class="operator">=</span><span class="string">&quot;http://43.143.151.27/ftp/Video/video.mp4&quot;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">本地格式</span><br><span class="line"><span class="attribute">src</span> <span class="operator">=</span> <span class="string">&quot;D:\ftp\Video/video.mp4&quot;</span></span><br></pre></td></tr></table></figure>
<p>其实两者差不多 就是开头的前缀要改成 <a href="http://ip">http://ip</a></p>
<p>这样的话 我的电脑也要有 ftp 文件夹？不是啊 文件不就是你放上去的吗？</p>
<ul>
<li>更加严重的是 如果无法打开了</li>
</ul>
<blockquote>
<p>会导致后面的文本无法正常生成 我的天哥</p>
</blockquote>
<ul>
<li>mermaid 还是无法生成图像 比较麻烦 等等我看看</li>
<li>我们的 md 文件必须标题和 title 是一样的</li>
</ul>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>使用脚注可以压缩信息在很短的文字内显示更多的信息 而且可以让观看者 有选择地去阅读 是一种很好的东西哦 <a href="https://zhuanlan.zhihu.com/p/342135587">某个参考教程</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>对应的脚注必须完全相同 连空格都不可以多 我就是看错了 主要是这个一会斜体 一会正体 我服了 真的 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机相关</title>
    <url>/static-html/2022/09/15/Life/%E6%9C%89%E4%BA%9B%E5%91%86%E6%9D%BF%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="莫名其妙的考核问题">莫名其妙的考核问题</h2>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">请问 下面那个不是C语言的关键字():</span><br><span class="line"><span class="symbol">A:</span> <span class="keyword">for</span></span><br><span class="line"><span class="symbol">B:</span> <span class="keyword">While</span></span><br><span class="line"><span class="symbol">C:</span> <span class="keyword">do</span> </span><br><span class="line"><span class="symbol">D:</span> int </span><br></pre></td></tr></table></figure>
<p>我当时看半天没看出来 我百思不得其解 这不都是关键字吗 我怕不是学了一个假的C语言 一看答案 C语言区分大小写 所以While 不是关键字</p>
<p>我服了 这个W 和 w的区别 我….  是真的我不会吗 我不理解这里考察的意义是什么 诸如此类的问题还有 很多 各种脑内编译 考察的知识点 实在是莫名其妙 特 别是计算机这种更加需要我们的动手能力的  难道更重要的不是 代码的规范程度 接口函数的文档 项目结构</p>
<h2 id="诡异的名词">诡异的名词</h2>
<p>后继 前驱 这是什么东西 我看不懂 堆栈 更是好笑 (堆是堆 栈是栈 堆栈是什么东西) 诸如此类的东西还有很多 如果你是一个理工科的 你肯定有比我更加深刻的理解(鲁棒性 哈哈哈)</p>
<p>虽然确实 由于我国的计算机技术 要落后于其他国家 为了 “西为中用” 确实需要将很多外来词汇进行 “中国化” 反正我们也学习了很多年的英语 不如干脆就直接 用原来的词汇算了 就像大家现在基本上都说 GPA而不是绩点一样 根本就不会影响大家的理解 next 和 peroi</p>
<h2 id="承认他人的强大">承认他人的强大</h2>
<p>我还是不喜欢这种 为什么不可以就承认自己就是没有别人强大 微信真的很恶心 其实如果她是一个npm的安装包 在GitHub上开源 而不是什么微信web开发工具 把 div 变成view 把html  css变成 wxml wxss 我肯定要对其大肆夸赞 但是事实是 “微信小程序 让技术后退了十年” 开玩笑的 我只是不喜欢把他人的成果 拿来 然后包装一下 变成自己的  然后就可以大肆 吹嘘自己的成果有多么丰硕 是当我看不见node.exe吗? 哎!</p>
<h2 id="其实根本就没有学习计算机">其实根本就没有学习计算机</h2>
<p>我的专业是大数据 根本就不是正统的计算机(CS 和 SE) 虽然我有很多语言课程 C语言 python R语言 但是似乎并没有真正的走进计算机的大门 学习计算机绝对不是利用你所学习的语言写一个 “学生成绩管理系统”不对 大多数人的实践课作业 可能还抵不上一个学生成绩管理系统 从网上各处copy 变成自己的作业</p>
<p>好吧 我是</p>
<h2 id="成为一个程序员">成为一个程序员?</h2>
<p>什么是程序员 其实好多事情我都不是很想将</p>
<p>脑子有些混乱 导致写的东西有些莫名其妙 无所谓了 我觉得反正 我讲的话其实也是一样的 没有什么意义的行为</p>
]]></content>
  </entry>
  <entry>
    <title>环境变量</title>
    <url>/static-html/2022/09/15/Cookie/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="环境变量">环境变量</h2>
<p>这个名词只有使用win的人需要知道和了解</p>
<p>我们的程序或者文件被下载到了电脑中 你想要启动它 就必须要文件的存放位置 这个就是环境变量 – 告知计算机我们的文件存放在何处</p>
<h2 id="添加环境变量">添加环境变量</h2>
<h3 id="简单版">简单版</h3>
<p>打开文件管理器 -&gt; 右键 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; path -&gt; 新建 -&gt;添加路径</p>
<p>自行进行添加</p>
<h3 id="命令行版">命令行版</h3>
<p>我们可以直接使用一条指令进行环境变量的添加</p>
<p>新建一个名为 NODE_PATH 的环境变量 后面是其路径</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">setx <span class="string">&quot;NODE_PATH&quot;</span> <span class="string">&quot;D:<span class="subst">\0</span>.SOFT\NODE<span class="subst">\n</span>ode_global<span class="subst">\n</span>ode_modules&quot;</span> <span class="operator">/</span>m </span><br></pre></td></tr></table></figure>
<h2 id="批量管理环境变量">批量管理环境变量</h2>
<p>由于时不时会重装系统 环境变量又需要重新配置 所以可以写一个文件用于保存我们的环境变量</p>
<p>编写一个 .bat文件进行操作 下面是我的</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">@REM 配置环境变量path 可以是不是复制一下 进行保存我们的环境变量 </span></span><br><span class="line"><span class="comment">@REM 有系统的环境 python git nodejs vscode pycharm min64 go </span></span><br><span class="line">setx &quot;<span class="built_in">path</span>&quot; &quot;C:\Windows;C:\Windows\system32;C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\;D:\<span class="number">0</span>.SOFT\environment\Scripts\;D:\<span class="number">0</span>.SOFT\environment\;D:\<span class="number">0</span>.SOFT\Git\<span class="built_in">cmd</span>;D:\<span class="number">0</span>.SOFT\NODE\;D:\<span class="number">0</span>.SOFT\NODE\node_cache;D:\<span class="number">0</span>.SOFT\NODE\node_global;D:\<span class="number">0</span>.SOFT\Microsoft VS Code\bin;D:\<span class="number">0</span>.SOFT\PyCharm\bin;D:\<span class="number">0</span>.SOFT\mingw64\bin;D:\<span class="number">0</span>.SOFT\GOGO\bin;&quot; /m</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 配置我们的python环境</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip install -r win_pip.txt</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 这里我们进行对于node.js环境的修复</span></span><br><span class="line">setx &quot;NODE_PATH&quot; &quot;D:\<span class="number">0</span>.SOFT\NODE\node_global\node_modules&quot; /m </span><br><span class="line"><span class="comment">@REM  添加淘宝的镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix &quot;D:\<span class="number">0</span>.SOFT\NODE\node_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache  &quot;D:\<span class="number">0</span>.SOFT\NODE\node_cache&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title>讨厌写Ppt</title>
    <url>/static-html/2022/09/13/Life/%E8%AE%A8%E5%8E%8C%E5%86%99ppt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="好恶心">好恶心</h2>
<p>有一个笑话是这样说的 写代码的不如写ppt的 写ppt的不如讲ppt的 讲ppt的不如看ppt的  我不懂也不希望懂</p>
<p>好了其实只是说 我真的不是很喜欢 (其实是很反感写ppt 或许这和我不喜欢语文有关?) ppt的插入图片 可以通过拖拽的形式设计大小 而且很直观 你来一个 height:”800px” 很难让人觉得 到底多大 就像现在我的也不知道 margin:10px 是多少一样</p>
<p>其实就是单纯地讨厌ppt 没有什么别的意思</p>
<p>哎 好热啊</p>
<p>如果可以希望 我以后可以不用在写ppt了 哈哈哈</p>
]]></content>
      <categories>
        <category>胡言乱语</category>
      </categories>
  </entry>
  <entry>
    <title>中秋节快乐</title>
    <url>/static-html/2022/09/10/Life/%E4%B8%AD%E7%A7%8B%E8%8A%82%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="中秋节到了">中秋节到了</h2>
<p>​		今天是9.10号 如你所见 我还在折腾我的博客 当然了 主要还是我太菜了 配置个文件可以配置半天 基本上没有难度的事情 对于我来说 就是很困难</p>
<p>​		其实有的时候 觉得身边的人都挺好的 还有人给我送月饼呵 不过 我自己大概是无所谓的 毕竟大部分的时间都是在玩电脑</p>
<p>哎 就是说 我站起来的时候 腿脚都在发软 服了</p>
<p>不过这些不重要 大家中秋节快乐 呵</p>
<p>我就先去写ps1了 还有很多东西没有写 头有点痛 难受死了</p>
<p>图片来自我的好兄弟阿波 确实</p>
<p><img src="https://i0.hdslb.com/bfs/album/c12a191badf6da6c7a0fc767b8567b5113aa4bdf.jpg" alt="psc" /></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>中秋节</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的坑 🤮</title>
    <url>/static-html/2022/09/10/Guides/hexo%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h2 id="说真的-很多问题">说真的 很多问题</h2>
<p>我自己都不知道为什么会出现,但是我还是自己解决了,简单的讲就是说,如果我本地是好的,服务器上面的就是坏的,反正也是同理,太难受了 真的是我吐了 🤮</p>
<p>不想搞了 累死自己了 该休息一下了</p>
<p>时隔半年再看自己当时写下的话,觉得自己还是太菜了,😂</p>
<h2 id="Template-render-error-unknown-path">Template render error: (unknown path)</h2>
<p><img src="https://i0.hdslb.com/bfs/album/0617fb541c340b49d135a6ffae8bde18d9be257e.png" alt="image-20221006225313883" /></p>
<p>原因是出现了 % { 这样无法转义的字符</p>
<p>也就是说 问题是我这里是如何显示它的呢 在什么情况下不可用</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么写博客</title>
    <url>/static-html/2022/09/10/Life/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/static-html/assets/css/APlayer.min.css"><script src="/static-html/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/static-html/assets/js/Meting.min.js"></script><h1>为什么要写博客?</h1>
<p>​	我其实直到大二的开始 才真正进入计算机(或者应该叫编程的门 我的水平还不配 学习cs 不过这并不妨碍她给我带来很多快乐 并且是其他的事物所无法带来的) 如果按照学校里的教学安排 我可能很久也不会去学HTML的相关知识 偶然的机会 看到了一个视频 教你如何写网页的 (手动@<a href="">康文昌</a>)   就跟着学了一下 确实比自己当初 在菜鸟教程上 copy着在pycharm里面 稀里糊涂地写着要好太多了 不过很快 我就失去了 兴趣 (或许我就是一个三分热度地人吧)  因为当初我觉得的把 图片和文字放到网上实在是没有什么意思 其实现在也还是这么觉得</p>
<p>​	转机是在一次游戏中 (VRchat) 我当时认识了一个台湾的女生 她人很友好(不友好的话 我根本就不可能认识她 好吗 ヾ(•ω•`)o) 我因为一些原因把她给 鸽了 (可恶啊啊w(ﾟДﾟ)w) 所以我想着做点东西给她作为赔偿 讲真 两个网友 我在大陆 她在台湾 其实也不是很熟悉 我当时真的不知道该送什么东西给她 不知道怎么想到的 就试着写一个网页给她吧</p>
<p>​	然后就背着电脑去图书馆 其实我也不知道 写一个网页大概要花多少时间 就是 我还什么什么都不懂 就像她的口头禅一样 “没关系啊o((&gt;ω&lt; ))o” 我觉得不会就现学就好了 然后一个连js都不会的人 就开始了他的网页之旅 (现在回忆起来 还是觉得自己好勇敢的哈哈哈)</p>
<p>​	当时真的是什么都不会 从如何添加图片 (当时对于路径问题 困扰了好久 分不清什么时候该用 . 和 / 哈哈哈) 怎么样让音乐自动播放 (我明明已经 autoplay了 为什么还是不行呢? 结果发现 浏览器禁止自动播放视频和音频 除非静音播放 或者 进行了点击等操作 ) 还有 对页面进行添加新的元素 我发现document.write() 会把之前的页面内容清除 我服了 真的好多的问题 都需要我一个一个去解决 还有css的排版布局 我不知道为什么 明明已经 center了 还是没有居中的效果 ………</p>
<p>​	反正就是状况百出就对了 什么都做不好的感觉 可是不知道为什么 我还是想把这个网格写出来(或许这就是妹子的力量? 大雾 )  可能是那句 “没关系啊” 真的对我的触动很大吧 不管她是不是真的有一点点难过 她还是在安慰我  或许是愧疚感吧 最后我 晚饭没吃 写到图书馆关门 终于把网页写得差不多了 后面就是调试 和 把视频和图片等资源放上去</p>
<p>不过 或许是处于礼貌 她至少表现出了对于 这个礼物的喜欢 不过我觉得一个女生喜欢的样子不该是这样 呃呃呃 不过考虑到 我其实不是很了解对方 所以还是不要妄加揣摩</p>
<p>我也算是开始了 计算机网络的应用之路了呵 还是很开心的 不是吗 无论是什么原因 或许 我该早一点 遇见某些事和人的 不过 无所谓了 真的都可以</p>
<p>后面又是奇怪的巧合 不知道怎么的 就开始写博客了 就变成了现在这个样子了 希望我也可以记录自己一点点变成 自己喜欢的样子了 加油加油.</p>
<h1>知识网络</h1>
<p>额,因为有很多笔记需要去记录,并且计算机相关的知识可能是来自某个视频,或者是某个博客,通过一个超链接,就可以让你快速访问,如果是传统的纸质笔记就无法实现着一点.</p>
<p>此外,你还有插入图片,代码的需求,像doc或者xmind等这样的存储形式就不太适合了.</p>
<p>用IPad等去做手账其实还是传统的纸质笔记,没有本质的区别,所以我们现在需要一个新的记录自己知识的方法.</p>
<p>我选择使用md + typora + hexo 的方式.</p>
<p>其实前者就已经可以满足对于我自己预览的需求了,考虑到不光可以将你的博客用于记录,还是可以展示给其他人看的,于是乎我就加上了hexo,正好也就学习了CI\CD.</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
